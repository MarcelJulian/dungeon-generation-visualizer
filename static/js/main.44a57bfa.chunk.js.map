{"version":3,"sources":["Components/navbar.jsx","Components/helper.js","Components/BinarySpacePartitioning/room.js","Components/BinarySpacePartitioning/connector.js","Components/BinarySpacePartitioning/leaf.js","Components/BinarySpacePartitioning/BSP.js","Components/BinarySpacePartitioning/SvgComponents.jsx","Components/grid.jsx","Components/ContentLayout/leftPane.jsx","Components/ContentLayout/controlPanelSlider.jsx","Components/ContentLayout/controlPanel.jsx","Components/ContentLayout/index.jsx","Components/main.jsx","serviceWorker.js","index.js"],"names":["Navbar","id","href","icon","faGithub","size","Component","Coor","x","y","getX","getY","getData","this","ConvertedRoom","width","height","getSize","Room","minWidth","minHeight","getWidth","getHeight","roomWidthBoundary","roomHeightBoundary","Math","floor","random","roomXBoundary","roomYBoundary","nodePos","isSplitVertical","side","iter","condition","x2","y2","i","push","Connector","leftSide","rightSide","splitPos","getPath","path","randLeft","length","randRight","coorLeftX","coorLeftY","coorRightX","coorRightY","split","ConvertedLeaf","getAll","Leaf","isSplitHorizontal","leftChild","rightChild","room","connector","lowerLim","upperLim","getLeftChild","getRightChild","getIsSplitVertical","getIsSplitHorizontal","getSplitPos","getRoom","getConnector","splitVertical","splitHorizontal","boundary","min","rand","createConnector","leftSideCoors","addSide","rightSideCoors","trimSide","node","coors","concat","getConnectorSide","tempCoors","insertedVal","forEach","c","includes","tempCoor","find","e","idx","indexOf","splice","console","log","BSP","tree","root","q","createRoom","shift","splitRoot","delay","BspFirstSplitPath","document","getElementById","pauseAnimations","props","convertedLeaf","visuSpeed","pathString","getRectanglePath","pathStyle","strokeDasharray","strokeDashoffset","dur","getVisualizationDuration","d","style","animatePath","BspSplitPath","x1","y1","getLineSplitPath","idAnim","replace","lastIndexOf","num","parseInt","slice","begin","BspRoomPath","convertedRoom","BspConnectorPath","convertedConnector","interval","turnIdx","lastDir","dirList","path1","path2","curDir","getDir","c1","c2","c1x","c1y","c2x","c2y","c1x_i","c1y_i","c2x_i","c2y_i","c3","c3x","c3y","c3x_i","c3y_i","c4","c4x","c4y","c4x_i","c4y_i","getConnectorPath","id2","idAnim2","idDoor","beginDoor","pathStyleWhite","stroke","strokeWidth","x3","y3","x4","y4","id1","getDoorPath","points","attributeType","attributeName","to","fill","BspSplitSvg","col","row","bspTree","curState","column","updateTree","gridStyle","winWidth","winHeight","className","convertSize","createFirstSplitPath","paths","cnt","leaf","key","createSplitPath","xlinkHref","createRoomPath","createConnectorPath","obj","gridWidth","gridHeight","winXCenter","winYCenter","coor","coorX","coorY","connectBspPaths","g","n","childElementCount","beginAnim","animGray","animThin","setAttribute","animDoor","animDoor2","animateTags","getElementsByTagName","totalDuration","timestamps","getAttribute","substring","Grid","passedTree","curBspTree","randNum","createGrid","grid","tdStyle","state","header","scope","border","children","j","window","innerWidth","innerHeight","updateWindowDimensions","bind","addEventListener","bspHandler","removeEventListener","headerHeight","offsetHeight","controlHeight","curWidth","curHeight","setState","LeftPane","showArrow","showSteps","faChevronRight","onClick","hideLeftPaneHandler","h","transform","ControlPanelSlider","sliderListener","activateListener","setInterval","changeSliderWidth","deactivateListener","clearInterval","svgRoot","curTime","round","getCurrentTime","ts","visuTimestamps","maxTime","pos","slider","clickEvent","maxW","clientWidth","rect","target","getBoundingClientRect","clientX","left","clickTime","setCurrentTime","visuState","ControlPanel","showControlButtons","faRedoAlt","reset","title","faStepBackward","stepBackward","showPausePlayButton","faStepForward","stepForward","faStop","stop","parentNode","removeChild","nextIdx","findIndex","t","prevTime","setSliderPos","pausePlay","animationsPaused","unpauseAnimations","nextTime","curAlgo","faPause","faPlay","ContentLayout","main","algo","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.44a57bfa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <header id=\"navbar\">\r\n                <div id=\"title\">\r\n                    <b>Dungeon Generation Visualizer</b>\r\n                </div>\r\n                <a href=\"https://github.com/MarcelJulian/dungeon-generation-visualizer\">\r\n                    <FontAwesomeIcon icon={faGithub} id=\"gh-icon\" size=\"lg\" />\r\n                </a>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n","class Coor {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    getX = () => this.x;\r\n    getY = () => this.y;\r\n    getData = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n        };\r\n    };\r\n}\r\n\r\nclass Size {\r\n    constructor(coor, width, height) {\r\n        this.coor = coor;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    getCoor = () => this.coor;\r\n    getX = () => this.coor.getX();\r\n    getY = () => this.coor.getY();\r\n    getWidth = () => this.width;\r\n    getHeight = () => this.height;\r\n    getX2 = () => this.coor.getX() + this.width;\r\n    getY2 = () => this.coor.getY() + this.height;\r\n    getData = () => {\r\n        return {\r\n            x: this.coor.getX(),\r\n            y: this.coor.getY(),\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n}\r\n\r\nexport { Coor, Size };\r\n","import { Coor, Size } from \"../helper.js\";\r\n\r\nclass Room {\r\n    minWidth = 2;\r\n    minHeight = 2;\r\n\r\n    constructor(x, y, width, height) {\r\n        //to prevent rooms going too close to each other\r\n        let roomWidthBoundary = width - 2 - this.minWidth + 1;\r\n        let roomHeightBoundary = height - 2 - this.minHeight + 1;\r\n\r\n        this.width =\r\n            Math.floor(Math.random() * roomWidthBoundary) + this.minWidth;\r\n        this.height =\r\n            Math.floor(Math.random() * roomHeightBoundary) + this.minHeight;\r\n\r\n        let roomXBoundary = width - 2 - this.width + 1;\r\n        let roomYBoundary = height - 2 - this.height + 1;\r\n\r\n        this.x = Math.floor(Math.random() * roomXBoundary) + x + 1;\r\n        this.y = Math.floor(Math.random() * roomYBoundary) + y + 1;\r\n    }\r\n\r\n    getConnectorSide(nodePos, isSplitVertical) {\r\n        let side = [];\r\n        let iter = 0,\r\n            condition = 0,\r\n            x2 = 0,\r\n            y2 = 0;\r\n\r\n        if (isSplitVertical) {\r\n            iter = this.y;\r\n            condition = this.y + this.height;\r\n\r\n            //get bottom side\r\n            if (nodePos === \"left\") x2 = this.x + this.width - 1;\r\n            //get top side\r\n            else x2 = this.x;\r\n\r\n            for (let i = iter; i < condition; i++) side.push(new Coor(x2, i));\r\n        } else {\r\n            iter = this.x;\r\n            condition = this.x + this.width;\r\n\r\n            //get right side\r\n            if (nodePos === \"left\") y2 = this.y + this.height - 1;\r\n            //get left side\r\n            else y2 = this.y;\r\n\r\n            for (let i = iter; i < condition; i++) side.push(new Coor(i, y2));\r\n        }\r\n\r\n        return side;\r\n    }\r\n\r\n    getX = () => this.x;\r\n    getY = () => this.y;\r\n    getWidth = () => this.width;\r\n    getHeight = () => this.height;\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n}\r\n\r\nclass ConvertedRoom {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n}\r\n\r\nexport default Room;\r\nexport { ConvertedRoom };\r\n","import { Coor } from \"../helper.js\";\r\n\r\nexport default class Connector {\r\n    constructor(leftSide, rightSide, isSplitVertical, splitPos) {\r\n        let path = [];\r\n        // leftSide.forEach((element) => {\r\n        //     console.log(\"Left: X: \" + element.getX() + \" Y: \" + element.getY());\r\n        // });\r\n\r\n        // rightSide.forEach((element) => {\r\n        //     console.log(\r\n        //         \"Right: X: \" + element.getX() + \" Y: \" + element.getY()\r\n        //     );\r\n        // });\r\n\r\n        let randLeft = Math.floor(Math.random() * leftSide.length);\r\n        let randRight = Math.floor(Math.random() * rightSide.length);\r\n\r\n        let coorLeftX = leftSide[randLeft].getX();\r\n        let coorLeftY = leftSide[randLeft].getY();\r\n        let coorRightX = rightSide[randRight].getX();\r\n        let coorRightY = rightSide[randRight].getY();\r\n\r\n        if (isSplitVertical) {\r\n            let split = splitPos - Math.floor(Math.random() * 2);\r\n            // console.log(\"Split: \" + split);\r\n\r\n            for (let i = coorLeftX + 1; i <= split; i++) {\r\n                path.push(new Coor(i, coorLeftY));\r\n                // console.log(\"First Step: \" + i + \", \" + coorLeftY);\r\n            }\r\n\r\n            if (coorLeftY < coorRightY) {\r\n                for (let i = coorLeftY + 1; i <= coorRightY; i++) {\r\n                    path.push(new Coor(split, i));\r\n                    // console.log(\"Second Step < : \" + split + \", \" + i);\r\n                }\r\n            } else if (coorLeftY > coorRightY) {\r\n                for (let i = coorLeftY - 1; i >= coorRightY; i--) {\r\n                    path.push(new Coor(split, i));\r\n                    // console.log(\"Second Step > : \" + split + \", \" + i);\r\n                }\r\n            } else {\r\n                //straight\r\n            }\r\n\r\n            for (let i = split + 1; i < coorRightX; i++) {\r\n                path.push(new Coor(i, coorRightY));\r\n                // console.log(\"Third Step: \" + i + \", \" + coorRightY);\r\n            }\r\n        } else {\r\n            let split = splitPos - Math.floor(Math.random() * 2);\r\n            // console.log(\"Split: \" + split);\r\n            //left: (1,6) (2,6) (3,6) (4,6) (5,6)\r\n            //right: (1,9) (2,9)\r\n\r\n            for (let i = coorLeftY + 1; i <= split; i++) {\r\n                path.push(new Coor(coorLeftX, i));\r\n                // console.log(\"First Step: \" + coorLeftX + \", \" + i);\r\n            }\r\n\r\n            if (coorLeftX < coorRightX) {\r\n                for (let i = coorLeftX + 1; i <= coorRightX; i++) {\r\n                    path.push(new Coor(i, split));\r\n                    // console.log(\"Second Step < : \" + i + \", \" + split);\r\n                }\r\n            } else if (coorLeftX > coorRightX) {\r\n                for (let i = coorLeftX - 1; i >= coorRightX; i--) {\r\n                    path.push(new Coor(i, split));\r\n                    // console.log(\"Second Step > : \" + i + \", \" + split);\r\n                }\r\n            } else {\r\n                //straight\r\n            }\r\n\r\n            for (let i = split + 1; i < coorRightY; i++) {\r\n                path.push(new Coor(coorRightX, i));\r\n                // console.log(\"Third Step: \" + coorRightX + \", \" + i);\r\n            }\r\n        }\r\n\r\n        this.path = path;\r\n    }\r\n\r\n    getPath = () => this.path;\r\n}\r\n","//Classes in javascript is weird. Using classes in this project is fine but,\r\n//it's better to benefit from the prototype aspect of javascript than the classics.\r\nimport Room from \"./room.js\";\r\nimport Connector from \"./connector.js\";\r\n\r\nclass Leaf {\r\n    leftChild = null;\r\n    rightChild = null;\r\n\r\n    isSplitVertical = false;\r\n    isSplitHorizontal = false;\r\n\r\n    splitPos = 0;\r\n\r\n    room = null;\r\n    connector = null;\r\n\r\n    constructor(\r\n        x,\r\n        y,\r\n        width,\r\n        height,\r\n        isSplitVertical = false,\r\n        isSplitHorizontal = false,\r\n        splitPos = 0\r\n    ) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.isSplitVertical = isSplitVertical;\r\n        this.isSplitHorizontal = isSplitHorizontal;\r\n        this.splitPos = splitPos;\r\n    }\r\n\r\n    split() {\r\n        if (this.leftChild != null || this.rightChild != null) return false;\r\n\r\n        //if l or w is 50% larger, force split. Else, the split is random.\r\n        if (this.width / this.height >= 1.5) this.isSplitVertical = true;\r\n        else if (this.height / this.width >= 1.5) this.isSplitHorizontal = true;\r\n        else {\r\n            let rand = Math.floor(Math.random() * 2);\r\n            if (rand) this.isSplitVertical = true;\r\n            else this.isSplitHorizontal = true;\r\n        }\r\n\r\n        if (this.isSplitVertical) return this.splitVertical();\r\n        else if (this.isSplitHorizontal) return this.splitHorizontal();\r\n    }\r\n\r\n    //lowest and highest multiplier for random\r\n    //these limits are needed to either make the splits size vary or similar\r\n    lowerLim = 0.2;\r\n    upperLim = 0.8;\r\n\r\n    //smallest possible width and height\r\n    minWidth = 6;\r\n    minHeight = 6;\r\n\r\n    //TODO: convert these limits to props\r\n\r\n    splitVertical() {\r\n        //width is too small to be splitted\r\n        if (this.width < this.minWidth * 2) return false;\r\n\r\n        let boundary = Math.floor(\r\n            this.width - this.width * (this.upperLim - this.lowerLim)\r\n        );\r\n\r\n        //preventing size being lower than the min size\r\n        boundary =\r\n            boundary > this.width - this.minWidth * 2\r\n                ? this.width - this.minWidth * 2\r\n                : boundary;\r\n        boundary += 1;\r\n        let min =\r\n            this.width * this.lowerLim > this.minWidth\r\n                ? this.width * this.lowerLim\r\n                : this.minWidth;\r\n\r\n        let rand = Math.floor(Math.random() * boundary);\r\n        rand += Math.floor(min);\r\n\r\n        this.splitPos = rand;\r\n\r\n        this.leftChild = new Leaf(this.x, this.y, rand, this.height);\r\n        this.rightChild = new Leaf(\r\n            this.x + rand,\r\n            this.y,\r\n            this.width - rand,\r\n            this.height\r\n        );\r\n        return true;\r\n    }\r\n\r\n    splitHorizontal() {\r\n        //height is too small to be splitted\r\n        if (this.height < this.minHeight * 2) return false;\r\n\r\n        let boundary = Math.floor(\r\n            this.height - this.height * (this.upperLim - this.lowerLim)\r\n        );\r\n\r\n        //preventing size being lower than the min size\r\n        boundary =\r\n            boundary > this.height - this.minHeight * 2\r\n                ? this.height - this.minHeight * 2\r\n                : boundary;\r\n        boundary += 1;\r\n        let min =\r\n            this.height * this.lowerLim > this.minHeight\r\n                ? this.height * this.lowerLim\r\n                : this.minHeight;\r\n\r\n        let rand = Math.floor(Math.random() * boundary);\r\n        rand += Math.floor(min);\r\n\r\n        this.splitPos = rand;\r\n\r\n        this.leftChild = new Leaf(this.x, this.y, this.width, rand);\r\n        this.rightChild = new Leaf(\r\n            this.x,\r\n            this.y + rand,\r\n            this.width,\r\n            this.height - rand\r\n        );\r\n        return true;\r\n    }\r\n\r\n    createRoom() {\r\n        if (this.leftChild !== null || this.rightChild !== null) return;\r\n        if (this.room !== null) return;\r\n        this.room = new Room(this.x, this.y, this.width, this.height);\r\n    }\r\n\r\n    createConnector() {\r\n        if (\r\n            this.connector !== null ||\r\n            this.getLeftChild() === null ||\r\n            this.getRightChild() === null\r\n        )\r\n            return;\r\n\r\n        if (this.getLeftChild().getConnector() === null)\r\n            this.getLeftChild().createConnector();\r\n\r\n        if (this.getRightChild().getConnector() === null)\r\n            this.getRightChild().createConnector();\r\n\r\n        let leftSideCoors = this.addSide(\r\n            this.getLeftChild(),\r\n            \"left\",\r\n            this.getIsSplitVertical()\r\n        );\r\n        let rightSideCoors = this.addSide(\r\n            this.getRightChild(),\r\n            \"right\",\r\n            this.getIsSplitVertical()\r\n        );\r\n\r\n        leftSideCoors = this.trimSide(\r\n            leftSideCoors,\r\n            \"left\",\r\n            this.getIsSplitVertical()\r\n        );\r\n\r\n        rightSideCoors = this.trimSide(\r\n            rightSideCoors,\r\n            \"right\",\r\n            this.getIsSplitVertical()\r\n        );\r\n\r\n        let split = this.splitPos;\r\n        if (this.isSplitVertical) split += this.x;\r\n        else split += this.y;\r\n\r\n        this.connector = new Connector(\r\n            leftSideCoors,\r\n            rightSideCoors,\r\n            this.getIsSplitVertical(),\r\n            split\r\n        );\r\n    }\r\n\r\n    addSide(node, side, isSplitVertical) {\r\n        let coors = [];\r\n        if (node.leftChild !== null)\r\n            coors = coors.concat(\r\n                this.addSide(node.leftChild, side, isSplitVertical)\r\n            );\r\n        if (node.rightChild !== null)\r\n            coors = coors.concat(\r\n                this.addSide(node.rightChild, side, isSplitVertical)\r\n            );\r\n\r\n        if (node.getConnector() !== null)\r\n            coors = coors.concat(node.getConnector().getPath());\r\n\r\n        if (node.getRoom() !== null) {\r\n            coors = coors.concat(\r\n                node.getRoom().getConnectorSide(side, isSplitVertical)\r\n            );\r\n        }\r\n\r\n        return coors;\r\n    }\r\n\r\n    trimSide(coors, side, isSplitVertical) {\r\n        let tempCoors = [];\r\n        let insertedVal = [];\r\n\r\n        coors.forEach((c) => {\r\n            if (isSplitVertical) {\r\n                //check if the axis is alr filled\r\n                if (insertedVal.includes(c.getY())) {\r\n                    let tempCoor = tempCoors.find((e) => e.getY() === c.getY());\r\n\r\n                    //if the new coor is closer to the splitPos, switch it\r\n                    if (side === \"left\") {\r\n                        if (c.getX() > tempCoor.getX()) {\r\n                            let idx = tempCoors.indexOf(tempCoor);\r\n                            tempCoors.splice(idx, 1);\r\n                            tempCoors.push(c);\r\n                        }\r\n                    } else {\r\n                        if (c.getX() < tempCoor.getX()) {\r\n                            let idx = tempCoors.indexOf(tempCoor);\r\n                            tempCoors.splice(idx, 1);\r\n                            tempCoors.push(c);\r\n                        }\r\n                    }\r\n                } else {\r\n                    //it's a new coor, simply push\r\n                    insertedVal.push(c.getY());\r\n                    tempCoors.push(c);\r\n                }\r\n            } else {\r\n                //check if the axis is alr filled\r\n                if (insertedVal.includes(c.getX())) {\r\n                    let tempCoor = tempCoors.find((e) => e.getX() === c.getX());\r\n\r\n                    //if the new coor is closer to the splitPos, switch it\r\n                    if (side === \"left\") {\r\n                        if (c.getY() > tempCoor.getY()) {\r\n                            let idx = tempCoors.indexOf(tempCoor);\r\n                            tempCoors.splice(idx, 1);\r\n                            tempCoors.push(c);\r\n                        }\r\n                    } else {\r\n                        if (c.getY() < tempCoor.getY()) {\r\n                            let idx = tempCoors.indexOf(tempCoor);\r\n                            tempCoors.splice(idx, 1);\r\n                            tempCoors.push(c);\r\n                        }\r\n                    }\r\n                } else {\r\n                    //it's a new coor, simply push\r\n                    insertedVal.push(c.getX());\r\n                    tempCoors.push(c);\r\n                }\r\n            }\r\n        });\r\n        return tempCoors;\r\n    }\r\n\r\n    toStrings() {\r\n        console.log(\"x: \" + this.x + \" y: \" + this.y);\r\n        console.log(\"width: \" + this.width + \" height: \" + this.height);\r\n    }\r\n\r\n    getX = () => this.x;\r\n    getY = () => this.y;\r\n    getWidth = () => this.width;\r\n    getHeight = () => this.height;\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n    getLeftChild = () => this.leftChild;\r\n    getRightChild = () => this.rightChild;\r\n    getIsSplitVertical = () => this.isSplitVertical;\r\n    getIsSplitHorizontal = () => this.isSplitHorizontal;\r\n    getSplitPos = () => this.splitPos;\r\n    getRoom = () => this.room;\r\n    getConnector = () => this.connector;\r\n}\r\n\r\nclass ConvertedLeaf {\r\n    constructor(x, y, width, height, isSplitVertical, splitPos) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.isSplitVertical = isSplitVertical;\r\n        this.splitPos = splitPos;\r\n    }\r\n\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n\r\n    getAll = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n            isSplitVertical: this.isSplitVertical,\r\n            splitPos: this.splitPos,\r\n        };\r\n    };\r\n}\r\n\r\nexport default Leaf;\r\n\r\nexport { ConvertedLeaf };\r\n","import Leaf from \"./leaf.js\";\r\n\r\nfunction splitRoot(root, tree) {\r\n    //level order tree traversal\r\n    let q = [];\r\n    q.push(root);\r\n    while (q.length !== 0) {\r\n        tree.push(q[0]);\r\n\r\n        if (q[0].split()) {\r\n            q.push(q[0].getLeftChild());\r\n            q.push(q[0].getRightChild());\r\n            // tree.push(q[0].getLeftChild());\r\n            // tree.push(q[0].getRightChild());\r\n        } else {\r\n            q[0].createRoom();\r\n        }\r\n        q.shift();\r\n    }\r\n\r\n    //run createConnector() from root\r\n    tree[0].createConnector();\r\n\r\n    return tree;\r\n}\r\n\r\nfunction BSP(x, y, width, height) {\r\n    var tree = [];\r\n    var root = new Leaf(x, y, width, height);\r\n\r\n    tree = splitRoot(root, tree);\r\n\r\n    return tree;\r\n\r\n    //only get leaves (last node)\r\n    /*\r\n    var leaves = [];\r\n\r\n    tree.forEach((l) => {\r\n        if (l.getRightChild());\r\n        else leaves.push(l);\r\n    });\r\n\r\n    return leaves;\r\n    */\r\n}\r\n\r\nexport default BSP;\r\n","import React, { Component } from \"react\";\r\nimport \"./SvgComponents.css\";\r\n\r\nvar delay = \" + 0.2s\";\r\n\r\nexport class BspFirstSplitPath extends Component {\r\n    componentDidMount() {\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        svgRoot.pauseAnimations();\r\n    }\r\n\r\n    render() {\r\n        const { convertedLeaf, visuSpeed } = this.props;\r\n\r\n        let { x, y, width, height } = convertedLeaf.getSize();\r\n\r\n        let pathString = getRectanglePath(x, y, width, height);\r\n\r\n        let length = (width + height) * 2;\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n\r\n        return (\r\n            <path id=\"bsp-split-path-0\" d={pathString} style={pathStyle}>\r\n                {animatePath(dur, \"bsp-split-anim-0\", \"0s\")}\r\n            </path>\r\n        );\r\n    }\r\n}\r\n\r\nexport class BspSplitPath extends Component {\r\n    render() {\r\n        const { id, convertedLeaf, visuSpeed } = this.props;\r\n\r\n        let {\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            isSplitVertical,\r\n            splitPos,\r\n        } = convertedLeaf.getAll();\r\n\r\n        let { x1, y1, x2, y2 } = getLineSplitPath(\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            isSplitVertical,\r\n            splitPos\r\n        );\r\n\r\n        let length = 0;\r\n        if (isSplitVertical) length = height;\r\n        else length = width;\r\n\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n\r\n        let idAnim = id.replace(\"path\", \"anim\");\r\n        let idx = id.lastIndexOf(\"-\");\r\n        let num = parseInt(id.slice(idx + 1)) - 1;\r\n        let begin = idAnim.slice(0, idx + 1) + num + \".end\" + delay;\r\n\r\n        return (\r\n            <line id={id} x1={x1} y1={y1} x2={x2} y2={y2} style={pathStyle}>\r\n                {animatePath(dur, idAnim, begin)}\r\n            </line>\r\n        );\r\n    }\r\n}\r\n\r\nexport class BspRoomPath extends Component {\r\n    render() {\r\n        const { id, convertedRoom, visuSpeed } = this.props;\r\n\r\n        let { x, y, width, height } = convertedRoom.getSize();\r\n\r\n        let pathString = getRectanglePath(x, y, width, height);\r\n\r\n        let length = (width + height) * 2;\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n        let idAnim = id.replace(\"path\", \"anim\");\r\n        let idx = id.lastIndexOf(\"-\");\r\n        let num = parseInt(id.slice(idx + 1)) - 1;\r\n        let begin = idAnim.slice(0, idx + 1) + num + \".end\" + delay;\r\n        if (num === -1) begin = \"animate-split-gray.end\" + delay;\r\n\r\n        return (\r\n            <path id={id} d={pathString} style={pathStyle}>\r\n                {animatePath(dur, idAnim, begin)}\r\n            </path>\r\n        );\r\n    }\r\n}\r\n\r\nexport class BspConnectorPath extends Component {\r\n    render() {\r\n        const {\r\n            id,\r\n            convertedConnector,\r\n            visuSpeed,\r\n            interval,\r\n            isSplitVertical,\r\n        } = this.props;\r\n\r\n        let { path1, path2 } = getConnectorPath(\r\n            convertedConnector,\r\n            interval,\r\n            isSplitVertical\r\n        );\r\n\r\n        let length = convertedConnector.length * interval;\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n            // strokeWidth: 3,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length * 2);\r\n\r\n        let id2 = id.replace(\"path\", \"path2\");\r\n\r\n        let idAnim = id.replace(\"path\", \"anim\");\r\n        let idAnim2 = idAnim.replace(\"anim\", \"anim2\");\r\n        let idDoor = idAnim.replace(\"connector\", \"door\");\r\n        let idx = id.lastIndexOf(\"-\");\r\n        let num = parseInt(id.slice(idx + 1)) - 1;\r\n        let begin = idDoor + \".end\" + delay;\r\n        let beginDoor = idAnim.slice(0, idx + 1) + num + \".end\" + delay;\r\n\r\n        let door = () =>\r\n            getDoorPath(\r\n                convertedConnector,\r\n                interval,\r\n                isSplitVertical,\r\n                idDoor,\r\n                beginDoor\r\n            );\r\n\r\n        return (\r\n            <g>\r\n                {door()}\r\n                <polyline id={id} points={path1} style={pathStyle}>\r\n                    {animatePath(dur, idAnim, begin)}\r\n                </polyline>\r\n                <polyline id={id2} points={path2} style={pathStyle}>\r\n                    {animatePath(dur, idAnim2, begin)}\r\n                </polyline>\r\n            </g>\r\n        );\r\n    }\r\n}\r\n\r\nfunction animatePath(dur, id, begin = \"indefinite\") {\r\n    return (\r\n        <animate\r\n            id={id}\r\n            attributeType=\"CSS\"\r\n            attributeName=\"stroke-dashoffset\"\r\n            to=\"0\"\r\n            dur={dur + \"s\"}\r\n            fill=\"freeze\"\r\n            begin={begin}\r\n        />\r\n    );\r\n}\r\n\r\nfunction getVisualizationDuration(visuSpeed, length) {\r\n    return length / visuSpeed;\r\n}\r\n\r\nfunction getRectanglePath(x, y, width, height) {\r\n    return (\r\n        \"M\" +\r\n        x +\r\n        \" \" +\r\n        y +\r\n        \" L\" +\r\n        (x + width) +\r\n        \" \" +\r\n        y +\r\n        \" L\" +\r\n        (x + width) +\r\n        \" \" +\r\n        (y + height) +\r\n        \" L\" +\r\n        x +\r\n        \" \" +\r\n        (y + height) +\r\n        \" L\" +\r\n        x +\r\n        \" \" +\r\n        y +\r\n        \" Z\"\r\n    );\r\n}\r\n\r\nfunction getLineSplitPath(x, y, width, height, isSplitVertical, splitPos) {\r\n    if (isSplitVertical)\r\n        return {\r\n            x1: x + splitPos,\r\n            y1: y,\r\n            x2: x + splitPos,\r\n            y2: y + height,\r\n        };\r\n    return {\r\n        x1: x,\r\n        y1: y + splitPos,\r\n        x2: x + width,\r\n        y2: y + splitPos,\r\n    };\r\n}\r\n\r\nfunction getConnectorPath(path, interval, isSplitVertical) {\r\n    let turnIdx = [],\r\n        lastDir = \"\",\r\n        dirList = [];\r\n    let path1 = \"\",\r\n        path2 = \"\";\r\n\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        let curDir = getDir(\r\n            path[i].getX(),\r\n            path[i].getY(),\r\n            path[i + 1].getX(),\r\n            path[i + 1].getY()\r\n        );\r\n        if (lastDir === \"\") {\r\n            lastDir = curDir;\r\n            dirList.push(curDir);\r\n        } else if (lastDir !== curDir) {\r\n            lastDir = curDir;\r\n            turnIdx.push(i);\r\n            dirList.push(curDir);\r\n        }\r\n    }\r\n\r\n    //straight line\r\n    if (dirList.length === 1) {\r\n        let c1 = path[0],\r\n            c2 = path[path.length - 1];\r\n        const c1x = c1.getX(),\r\n            c1y = c1.getY(),\r\n            c2x = c2.getX(),\r\n            c2y = c2.getY();\r\n        const c1x_i = c1x + interval,\r\n            c1y_i = c1y + interval,\r\n            c2x_i = c2x + interval,\r\n            c2y_i = c2y + interval;\r\n\r\n        if (dirList[0] === \"down\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y_i;\r\n        } else if (dirList[0] === \"right\") {\r\n            path1 = c1x + \",\" + c1y_i + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 = c1x + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n        } else console.log(\"Error Connector with length 1. Dir: \" + dirList[0]);\r\n    } else if (dirList.length === 2) {\r\n        //1 turn\r\n        let c1 = path[0],\r\n            c2 = path[turnIdx[0]],\r\n            c3 = path[path.length - 1];\r\n        const c1x = c1.getX(),\r\n            c1y = c1.getY(),\r\n            c2x = c2.getX(),\r\n            c2y = c2.getY(),\r\n            c3x = c3.getX(),\r\n            c3y = c3.getY();\r\n        const c1x_i = c1x + interval,\r\n            c1y_i = c1y + interval,\r\n            c2x_i = c2x + interval,\r\n            c2y_i = c2y + interval,\r\n            c3x_i = c3x + interval,\r\n            c3y_i = c3y + interval;\r\n\r\n        if (\r\n            dirList[0] === \"down\" &&\r\n            dirList[1] === \"right\" &&\r\n            isSplitVertical\r\n        ) {\r\n            path1 = c1x + \",\" + c1y_i + \" \" + c2x + \",\" + c2y_i;\r\n            path1 += \" \" + c3x_i + \",\" + c3y_i;\r\n            path2 = c1x + \",\" + c1y + \" \" + c1x_i + \",\" + c1y;\r\n            path2 += \" \" + c2x_i + \",\" + c2y + \" \" + c3x_i + \",\" + c3y;\r\n        } else if (\r\n            dirList[0] === \"down\" &&\r\n            dirList[1] === \"right\" &&\r\n            !isSplitVertical\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y_i;\r\n            path1 += \" \" + c3x + \",\" + c3y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path2 += \" \" + c3x_i + \",\" + c3y + \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (\r\n            dirList[0] === \"right\" &&\r\n            dirList[1] === \"down\" &&\r\n            isSplitVertical\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path1 += \" \" + c3x_i + \",\" + c3y;\r\n            path2 = c1x + \",\" + c1y_i + \" \" + c2x + \",\" + c2y_i;\r\n            path2 += \" \" + c3x + \",\" + c3y_i + \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (\r\n            dirList[0] === \"right\" &&\r\n            dirList[1] === \"down\" &&\r\n            !isSplitVertical\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c1x + \",\" + c1y_i;\r\n            path1 += \" \" + c2x + \",\" + c2y_i + \" \" + c3x + \",\" + c3y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (dirList[0] === \"up\" && dirList[1] === \"right\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x_i + \",\" + c3y;\r\n            path2 = c1x + \",\" + c1y_i + \" \" + c1x_i + \",\" + c1y_i;\r\n            path2 += \" \" + c2x_i + \",\" + c2y_i + \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (dirList[0] === \"right\" && dirList[1] === \"up\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y + \" \" + c3x_i + \",\" + c3y;\r\n            path2 = c1x + \",\" + c1y_i + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (dirList[0] === \"left\" && dirList[1] === \"down\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c1x_i + \",\" + c1y_i;\r\n            path2 += \" \" + c2x_i + \",\" + c2y_i + \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (dirList[0] === \"down\" && dirList[1] === \"left\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y + \" \" + c3x + \",\" + c3y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i;\r\n        } else\r\n            console.log(\r\n                \"Error Connector with length 2. Dir: \" +\r\n                    dirList[0] +\r\n                    \" to \" +\r\n                    dirList[1]\r\n            );\r\n    } else if (dirList.length === 3) {\r\n        //2 turn\r\n        let c1 = path[0],\r\n            c2 = path[turnIdx[0]],\r\n            c3 = path[turnIdx[1]],\r\n            c4 = path[path.length - 1];\r\n        const c1x = c1.getX(),\r\n            c1y = c1.getY(),\r\n            c2x = c2.getX(),\r\n            c2y = c2.getY(),\r\n            c3x = c3.getX(),\r\n            c3y = c3.getY(),\r\n            c4x = c4.getX(),\r\n            c4y = c4.getY();\r\n        const c1x_i = c1x + interval,\r\n            c1y_i = c1y + interval,\r\n            c2x_i = c2x + interval,\r\n            c2y_i = c2y + interval,\r\n            c3x_i = c3x + interval,\r\n            c3y_i = c3y + interval,\r\n            c4x_i = c4x + interval,\r\n            c4y_i = c4y + interval;\r\n\r\n        if (\r\n            dirList[0] === \"down\" &&\r\n            dirList[1] === \"right\" &&\r\n            dirList[2] === \"down\"\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y_i;\r\n            path1 += \" \" + c3x + \",\" + c3y_i + \" \" + c4x + \",\" + c4y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path2 += \" \" + c3x_i + \",\" + c3y + \" \" + c4x_i + \",\" + c4y_i;\r\n        } else if (\r\n            dirList[0] === \"down\" &&\r\n            dirList[1] === \"left\" &&\r\n            dirList[2] === \"down\"\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y + \" \" + c4x + \",\" + c4y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i + \" \" + c4x_i + \",\" + c4y_i;\r\n        } else if (\r\n            dirList[0] === \"right\" &&\r\n            dirList[1] === \"down\" &&\r\n            dirList[2] === \"right\"\r\n        ) {\r\n            path1 = c1x + \",\" + c1y_i + \" \" + c2x + \",\" + c2y_i;\r\n            path1 += \" \" + c3x + \",\" + c3y_i + \" \" + c4x_i + \",\" + c4y_i;\r\n            path2 = c1x + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path2 += \" \" + c3x_i + \",\" + c3y + \" \" + c4x_i + \",\" + c4y;\r\n        } else if (\r\n            dirList[0] === \"right\" &&\r\n            dirList[1] === \"up\" &&\r\n            dirList[2] === \"right\"\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y + \" \" + c4x_i + \",\" + c4y;\r\n            path2 = c1x + \",\" + c1y_i + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i + \" \" + c4x_i + \",\" + c4y_i;\r\n        } else\r\n            console.log(\r\n                \"Error Connector with length 3. Dir: \" +\r\n                    dirList[0] +\r\n                    \" to \" +\r\n                    dirList[1] +\r\n                    \" to \" +\r\n                    dirList[2]\r\n            );\r\n    }\r\n\r\n    return {\r\n        path1: path1,\r\n        path2: path2,\r\n    };\r\n}\r\n\r\nfunction getDoorPath(path, interval, isSplitVertical, id, begin) {\r\n    let pathStyleThin = {\r\n        strokeDasharray: interval - 5,\r\n        strokeDashoffset: interval - 5,\r\n        stroke: \"black\",\r\n        strokeWidth: 1,\r\n    };\r\n    let pathStyleWhite = {\r\n        strokeDasharray: interval - 5,\r\n        strokeDashoffset: interval - 5,\r\n        stroke: \"white\",\r\n        strokeWidth: 5,\r\n    };\r\n\r\n    let dur = 0.25;\r\n\r\n    let c1 = path[0],\r\n        c2 = path[path.length - 1];\r\n    const c1x = c1.getX(),\r\n        c1y = c1.getY(),\r\n        c2x = c2.getX(),\r\n        c2y = c2.getY();\r\n    const c1x_i = c1x + interval,\r\n        c1y_i = c1y + interval,\r\n        c2x_i = c2x + interval,\r\n        c2y_i = c2y + interval;\r\n\r\n    let x1 = 0,\r\n        y1 = 0,\r\n        x2 = 0,\r\n        y2 = 0,\r\n        x3 = 0,\r\n        y3 = 0,\r\n        x4 = 0,\r\n        y4 = 0;\r\n    if (isSplitVertical) {\r\n        x1 = c1x;\r\n        y1 = c1y + 2.5;\r\n        x2 = c1x;\r\n        y2 = c1y_i - 2.5;\r\n        x3 = c2x_i;\r\n        y3 = c2y + 2.5;\r\n        x4 = c2x_i;\r\n        y4 = c2y_i - 2.5;\r\n    } else {\r\n        x1 = c1x + 2.5;\r\n        y1 = c1y;\r\n        x2 = c1x_i - 2.5;\r\n        y2 = c1y;\r\n        x3 = c2x + 2.5;\r\n        y3 = c2y_i;\r\n        x4 = c2x_i - 2.5;\r\n        y4 = c2y_i;\r\n    }\r\n\r\n    let id1 = id;\r\n    let id2 = id.replace(\"door\", \"door2\");\r\n    return (\r\n        <g>\r\n            <line x1={x1} y1={y1} x2={x2} y2={y2} style={pathStyleWhite}>\r\n                {animatePath(dur, id1, begin)}\r\n            </line>\r\n            {/* <line x1={x1} y1={y1} x2={x2} y2={y2} style={pathStyleThin}>\r\n                {animatePath(dur)}\r\n            </line> */}\r\n            <line x1={x3} y1={y3} x2={x4} y2={y4} style={pathStyleWhite}>\r\n                {animatePath(dur, id2, begin)}\r\n            </line>\r\n            {/* <line x1={x3} y1={y3} x2={x4} y2={y4} style={pathStyleThin}>\r\n                {animatePath(dur)}\r\n            </line> */}\r\n        </g>\r\n    );\r\n}\r\n\r\nfunction getDir(x1, y1, x2, y2) {\r\n    if (x1 > x2) return \"left\";\r\n    else if (x1 < x2) return \"right\";\r\n    else if (y1 > y2) return \"up\";\r\n    else if (y1 < y2) return \"down\";\r\n}\r\n","import React, { Component } from \"react\";\r\n//TODO: change BSP.js to index.js, go refactor!\r\nimport BSP from \"./BinarySpacePartitioning/BSP.js\";\r\nimport {\r\n    BspFirstSplitPath,\r\n    BspSplitPath,\r\n    BspRoomPath,\r\n    BspConnectorPath,\r\n} from \"./BinarySpacePartitioning/SvgComponents.jsx\";\r\nimport { ConvertedLeaf } from \"./BinarySpacePartitioning/leaf.js\";\r\nimport { ConvertedRoom } from \"./BinarySpacePartitioning/room.js\";\r\nimport Leaf from \"./BinarySpacePartitioning/leaf.js\";\r\nimport Room from \"./BinarySpacePartitioning/room.js\";\r\nimport Connector from \"./BinarySpacePartitioning/connector.js\";\r\nimport \"./grid.css\";\r\nimport { Coor } from \"./helper.js\";\r\n\r\nclass Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            winWidth: window.innerWidth,\r\n            //61 is header height\r\n            //TODO: convert magic number\r\n            winHeight: window.innerHeight - 41.8 - 73.3,\r\n            row: 15,\r\n            column: 25,\r\n            interval: 30,\r\n        };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n        this.curBspTree = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        //get new window Width and Height\r\n        this.updateWindowDimensions();\r\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\r\n\r\n        let timestamps = connectBspPaths();\r\n        if (this.props.bspTree === null) {\r\n            this.props.bspHandler(this.curBspTree, timestamps);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        let timestamps = connectBspPaths();\r\n        if (this.props.bspTree === null) {\r\n            this.props.bspHandler(this.curBspTree, timestamps);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        let headerHeight = document.getElementById(\"navbar\").offsetHeight;\r\n        let controlHeight = document.getElementById(\"control-panel\")\r\n            .offsetHeight;\r\n\r\n        let curWidth = window.innerWidth;\r\n        //61 is header height\r\n        let curHeight = window.innerHeight - headerHeight - controlHeight - 1;\r\n        this.setState({\r\n            winWidth: curWidth,\r\n            winHeight: curHeight,\r\n        });\r\n    }\r\n\r\n    updateTree = (passedTree) => {\r\n        this.curBspTree = passedTree;\r\n    };\r\n\r\n    randNum = () => Math.floor(Math.random() * 1000);\r\n\r\n    render() {\r\n        var gridStyle = {\r\n            width: this.state.winWidth,\r\n            height: this.state.winHeight,\r\n        };\r\n\r\n        return (\r\n            <div key={this.randNum()} id=\"visualizer\">\r\n                <div id=\"grid\" style={gridStyle}>\r\n                    <table>\r\n                        <tbody>{this.createGrid()}</tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <BspSplitSvg\r\n                    curState={this.state}\r\n                    visuSpeed={this.props.visuSpeed}\r\n                    bspTree={this.props.bspTree}\r\n                    bspHandler={this.props.bspHandler}\r\n                    updateTree={this.updateTree}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    createGrid = () => {\r\n        let grid = [];\r\n        let tdStyle = {\r\n            width: this.state.interval + \"px\",\r\n            height: this.state.interval + \"px\",\r\n        };\r\n\r\n        let header = [];\r\n        for (let i = 0; i < this.state.column; i++)\r\n            header.push(\r\n                <th key={i} scope=\"col\" style={tdStyle}>\r\n                    {i}\r\n                </th>\r\n            );\r\n\r\n        let noBorderStyle = {\r\n            border: \"none\",\r\n        };\r\n\r\n        grid.push(\r\n            <tr key=\"-1\">\r\n                <td style={noBorderStyle}></td>\r\n                {header}\r\n            </tr>\r\n        );\r\n\r\n        // Outer loop to create parent\r\n        for (let i = 0; i < this.state.row; i++) {\r\n            let children = [];\r\n            children.push(\r\n                <th key={i} scope=\"row\" style={tdStyle}>\r\n                    {i}\r\n                </th>\r\n            );\r\n            //Inner loop to create children\r\n            for (let j = 0; j < this.state.column; j++) {\r\n                children.push(\r\n                    <td\r\n                        id={`node-${i + 1}-${j + 1}`}\r\n                        key={`node-${i + 1}-${j + 1}`}\r\n                        style={tdStyle}\r\n                    ></td>\r\n                );\r\n            }\r\n            //Create the parent and add the children\r\n            grid.push(\r\n                <tr id={`row-${i + 1}`} key={`row-${i + 1}`}>\r\n                    {children}\r\n                </tr>\r\n            );\r\n        }\r\n        return grid;\r\n    };\r\n}\r\n\r\nfunction calculateBsp(col, row) {\r\n    return BSP(0, 0, col, row);\r\n}\r\n\r\nfunction BspSplitSvg(props) {\r\n    let tree = null;\r\n    if (props.bspTree === null) {\r\n        tree = calculateBsp(props.curState.column, props.curState.row);\r\n        props.updateTree(tree);\r\n    } else tree = props.bspTree;\r\n\r\n    var gridStyle = {\r\n        width: props.curState.winWidth,\r\n        height: props.curState.winHeight,\r\n    };\r\n\r\n    return (\r\n        <svg id={\"svgRoot\"} style={gridStyle}>\r\n            <g id=\"bsp-split\" className=\"bsp-svg-paths\">\r\n                {createFirstSplitPath(tree[0], props.curState, props.visuSpeed)}\r\n                {createSplitPath(tree, props.curState, props.visuSpeed)}\r\n            </g>\r\n\r\n            {getAnimateSplitGray()}\r\n            {getAnimateSplitThin()}\r\n\r\n            <g id=\"bsp-rooms\" className=\"bsp-svg-paths\">\r\n                {createRoomPath(tree, props.curState, props.visuSpeed)}\r\n            </g>\r\n            <g id=\"bsp-connectors\" className=\"bsp-svg-paths\">\r\n                {createConnectorPath(tree, props.curState, props.visuSpeed)}\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nfunction createFirstSplitPath(node, curState, visuSpeed) {\r\n    let convertedLeaf = convertSize(node, curState);\r\n    return (\r\n        <BspFirstSplitPath\r\n            convertedLeaf={convertedLeaf}\r\n            visuSpeed={visuSpeed}\r\n        ></BspFirstSplitPath>\r\n    );\r\n}\r\n\r\nfunction createSplitPath(tree, curState, visuSpeed) {\r\n    let paths = [];\r\n    let cnt = 1;\r\n\r\n    for (let i = 0; i < tree.length; i++) {\r\n        let leaf = tree[i];\r\n        // console.log(i + \" splitPos: \" + leaf.getSplitPos());\r\n        if (leaf.getSplitPos() === 0) continue;\r\n\r\n        let convertedLeaf = convertSize(leaf, curState);\r\n        let id = \"bsp-split-path-\" + cnt;\r\n        cnt++;\r\n\r\n        paths.push(\r\n            <BspSplitPath\r\n                key={id}\r\n                id={id}\r\n                convertedLeaf={convertedLeaf}\r\n                visuSpeed={visuSpeed}\r\n            ></BspSplitPath>\r\n        );\r\n    }\r\n    return paths;\r\n}\r\n\r\nfunction createRoomPath(tree, curState, visuSpeed) {\r\n    let paths = [];\r\n    let cnt = 0;\r\n\r\n    for (let i = 0; i < tree.length; i++) {\r\n        let leaf = tree[i];\r\n\r\n        if (leaf.getRoom() === null) continue;\r\n\r\n        let convertedRoom = convertSize(leaf.getRoom(), curState);\r\n        let id = \"bsp-room-path-\" + cnt;\r\n        cnt++;\r\n\r\n        paths.push(\r\n            <BspRoomPath\r\n                key={id}\r\n                id={id}\r\n                convertedRoom={convertedRoom}\r\n                visuSpeed={visuSpeed}\r\n            ></BspRoomPath>\r\n        );\r\n    }\r\n    return paths;\r\n}\r\n\r\nfunction createConnectorPath(tree, curState, visuSpeed) {\r\n    let paths = [];\r\n    let cnt = 0;\r\n    for (let i = tree.length - 1; i >= 0; i--) {\r\n        let node = tree[i];\r\n\r\n        if (node.getConnector() === null) continue;\r\n\r\n        let convertedConnector = convertSize(node.getConnector(), curState);\r\n        let id = \"bsp-connector-path-\" + cnt;\r\n        cnt++;\r\n\r\n        paths.push(\r\n            <BspConnectorPath\r\n                key={id}\r\n                id={id}\r\n                convertedConnector={convertedConnector}\r\n                visuSpeed={visuSpeed}\r\n                interval={curState.interval}\r\n                isSplitVertical={node.getIsSplitVertical()}\r\n            ></BspConnectorPath>\r\n        );\r\n    }\r\n    return paths;\r\n}\r\n\r\nfunction convertSize(obj, curState) {\r\n    const interval = curState.interval;\r\n    const gridWidth = (curState.column * interval) / 2;\r\n    const gridHeight = (curState.row * interval) / 2;\r\n    const winXCenter = curState.winWidth / 2;\r\n    const winYCenter = curState.winHeight / 2;\r\n\r\n    var x = winXCenter - gridWidth;\r\n    var y = winYCenter - gridHeight;\r\n\r\n    if (obj instanceof Leaf)\r\n        return new ConvertedLeaf(\r\n            x + obj.getX() * interval + interval / 2,\r\n            y + obj.getY() * interval + interval / 2,\r\n            obj.getWidth() * interval,\r\n            obj.getHeight() * interval,\r\n            obj.getIsSplitVertical(),\r\n            obj.getSplitPos() * interval\r\n        );\r\n\r\n    if (obj instanceof Room) {\r\n        return new ConvertedRoom(\r\n            x + obj.getX() * interval + interval / 2,\r\n            y + obj.getY() * interval + interval / 2,\r\n            obj.getWidth() * interval,\r\n            obj.getHeight() * interval\r\n        );\r\n    }\r\n    if (obj instanceof Connector) {\r\n        let convertedConnector = [];\r\n        obj.getPath().forEach((coor) => {\r\n            let coorX = coor.getX(),\r\n                coorY = coor.getY();\r\n            coorX = x + coorX * interval + interval / 2;\r\n            coorY = y + coorY * interval + interval / 2;\r\n            convertedConnector.push(new Coor(coorX, coorY));\r\n        });\r\n        return convertedConnector;\r\n    }\r\n}\r\n\r\nfunction getAnimateSplitGray() {\r\n    return (\r\n        <animate\r\n            id=\"animate-split-gray\"\r\n            xlinkHref=\"#bsp-split\"\r\n            attributeType=\"CSS\"\r\n            attributeName=\"stroke\"\r\n            to=\"gray\"\r\n            dur=\"1s\"\r\n            fill=\"freeze\"\r\n            begin=\"indefinite\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction getAnimateSplitThin() {\r\n    return (\r\n        <animate\r\n            id=\"animate-split-thin\"\r\n            xlinkHref=\"#bsp-split\"\r\n            attributeType=\"CSS\"\r\n            attributeName=\"stroke-width\"\r\n            to=\"3\"\r\n            dur=\"1s\"\r\n            fill=\"freeze\"\r\n            begin=\"indefinite\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction connectBspPaths() {\r\n    let g = document.getElementById(\"bsp-split\");\r\n\r\n    let n = g.childElementCount - 1;\r\n    let beginAnim = \"bsp-split-anim-\" + n + \".end + 0.2s\";\r\n\r\n    let animGray = document.getElementById(\"animate-split-gray\");\r\n    let animThin = document.getElementById(\"animate-split-thin\");\r\n\r\n    animGray.setAttribute(\"begin\", beginAnim);\r\n    animThin.setAttribute(\"begin\", beginAnim);\r\n\r\n    g = document.getElementById(\"bsp-rooms\");\r\n    n = g.childElementCount - 1;\r\n    let beginDoor = \"bsp-room-anim-\" + n + \".end + 0.2s\";\r\n\r\n    let animDoor = document.getElementById(\"bsp-door-anim-0\");\r\n    let animDoor2 = document.getElementById(\"bsp-door2-anim-0\");\r\n    animDoor.setAttribute(\"begin\", beginDoor);\r\n    animDoor2.setAttribute(\"begin\", beginDoor);\r\n\r\n    //add class, (element).classList.add(\"\")\r\n\r\n    let svgRoot = document.getElementById(\"svgRoot\");\r\n    let animateTags = svgRoot.getElementsByTagName(\"animate\");\r\n    let totalDuration = 0;\r\n    let timestamps = [0];\r\n    // console.log(animateTags);\r\n    for (let i = 0; i < animateTags.length; i++) {\r\n        //These animations begin concurrently with another animation\r\n        if (animateTags[i].id === \"animate-split-thin\") continue;\r\n        else if (animateTags[i].id.includes(\"door2\")) continue;\r\n        else if (animateTags[i].id.includes(\"anim2\")) continue;\r\n\r\n        let dur = animateTags[i].getAttribute(\"dur\");\r\n        dur = dur.substring(0, dur.length - 1);\r\n        dur *= 1000;\r\n        totalDuration += dur + 200;\r\n\r\n        timestamps.push(totalDuration);\r\n    }\r\n    return timestamps;\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport \"./leftPane.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default class LeftPane extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"left-wrapper\">\r\n                <div id=\"steps-hide\">{this.showArrow()}</div>\r\n                <div id=\"steps-panel\">\r\n                    <div id=\"steps-title\">Steps</div>\r\n                    {this.showSteps()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showSteps() {\r\n        return (\r\n            <ul id=\"steps-ul\">\r\n                <li>1. Split Tree</li>\r\n                <li>2. Create Rooms</li>\r\n                <li>3. Connect Rooms</li>\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    showArrow() {\r\n        return (\r\n            <FontAwesomeIcon\r\n                icon={faChevronRight}\r\n                id=\"steps-hide-icon\"\r\n                onClick={this.hideLeftPaneHandler}\r\n            />\r\n        );\r\n    }\r\n\r\n    hideLeftPaneHandler() {\r\n        let e = document.getElementById(\"steps-panel\");\r\n        let h = document.getElementById(\"steps-hide-icon\");\r\n\r\n        if (e.style.width === \"0px\") {\r\n            e.style.width = \"200px\";\r\n            h.style.transform = \"rotate(-180deg)\";\r\n        } else {\r\n            e.style.width = \"0px\";\r\n            h.style.transform = \"rotate(0deg)\";\r\n        }\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./controlPanelSlider.css\";\r\n\r\nexport default class ControlPanelSlider extends Component {\r\n    sliderListener = null;\r\n\r\n    componentDidMount() {\r\n        if (this.props.visuState === \"start\") this.activateListener();\r\n        else this.deactivateListener();\r\n\r\n        document\r\n            .getElementById(\"progress-bar\")\r\n            .addEventListener(\"click\", this.clickEvent);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.visuState === \"start\") this.activateListener();\r\n        else this.deactivateListener();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.deactivateListener();\r\n        document.removeEventListener(\"click\", this.clickEvent);\r\n    }\r\n\r\n    activateListener = () => {\r\n        if (this.sliderListener === null) {\r\n            this.sliderListener = setInterval(() => {\r\n                this.changeSliderWidth();\r\n            }, 10);\r\n        }\r\n    };\r\n\r\n    deactivateListener = () => {\r\n        if (this.sliderListener !== null) {\r\n            clearInterval(this.sliderListener);\r\n            this.sliderListener = null;\r\n        }\r\n    };\r\n\r\n    changeSliderWidth = () => {\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        let curTime = Math.round(svgRoot.getCurrentTime() * 1000);\r\n        let ts = this.props.visuTimestamps;\r\n        let maxTime = ts[ts.length - 1];\r\n\r\n        let pos = Math.round((curTime / maxTime) * 100000) / 1000;\r\n\r\n        let slider = document.getElementById(\"slider\");\r\n        if (slider.style.width.includes(\"100\")) {\r\n            this.deactivateListener();\r\n            slider.style.width = \"100%\";\r\n        } else slider.style.width = pos + \"%\";\r\n    };\r\n\r\n    clickEvent = (e) => {\r\n        let maxW = document.getElementById(\"progress-bar\").clientWidth;\r\n\r\n        var rect = e.target.getBoundingClientRect();\r\n        var x = e.clientX - rect.left; //x position within the element.\r\n\r\n        let pos = Math.round((x / maxW) * 100000) / 1000;\r\n\r\n        let slider = document.getElementById(\"slider\");\r\n        slider.style.width = pos + \"%\";\r\n\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        let ts = this.props.visuTimestamps;\r\n        let maxTime = ts[ts.length - 1];\r\n        let clickTime = Math.round((pos * maxTime) / 100) / 1000;\r\n\r\n        svgRoot.setCurrentTime(clickTime);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"progress-bar\">\r\n                <div id=\"slider\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./controlPanel.css\";\r\nimport ControlPanelSlider from \"./controlPanelSlider\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faPlay,\r\n    faPause,\r\n    faStop,\r\n    faStepForward,\r\n    faStepBackward,\r\n    faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default class ControlPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            curAlgo: \"bsp\",\r\n            visuState: \"pause\",\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"control-panel\">\r\n                <div id=\"control-wrapper\">\r\n                    <div id=\"control-algo-title\">BINARY SPACE PARTITIONING</div>\r\n                    {this.showControlButtons()}\r\n                </div>\r\n                <ControlPanelSlider\r\n                    visuState={this.state.visuState}\r\n                    visuTimestamps={this.props.visuTimestamps}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showControlButtons = () => {\r\n        return (\r\n            <div id=\"control-icons\">\r\n                <FontAwesomeIcon\r\n                    icon={faRedoAlt}\r\n                    className=\"icons\"\r\n                    size=\"lg\"\r\n                    onClick={this.reset}\r\n                    title=\"Reset\"\r\n                />\r\n                <FontAwesomeIcon\r\n                    icon={faStepBackward}\r\n                    className=\"icons\"\r\n                    onClick={this.stepBackward}\r\n                />\r\n\r\n                {this.showPausePlayButton()}\r\n\r\n                <FontAwesomeIcon\r\n                    icon={faStepForward}\r\n                    className=\"icons\"\r\n                    onClick={this.stepForward}\r\n                />\r\n                <FontAwesomeIcon\r\n                    icon={faStop}\r\n                    id=\"stop-icon\"\r\n                    className=\"icons\"\r\n                    size=\"lg\"\r\n                    onClick={this.stop}\r\n                    title=\"Stop\"\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ visuState: \"pause\" });\r\n\r\n        let g = document.getElementById(\"bsp-split\");\r\n        while (g.childElementCount) {\r\n            let path = g.children[0];\r\n            path.parentNode.removeChild(path);\r\n        }\r\n\r\n        this.props.bspHandler(null);\r\n    };\r\n\r\n    stepBackward = () => {\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        let curTime = Math.round(svgRoot.getCurrentTime() * 1000);\r\n        let ts = this.props.visuTimestamps;\r\n        //preventing overflow\r\n        if (curTime <= 0) return;\r\n\r\n        let nextIdx = ts.findIndex((t) => t >= curTime);\r\n        let prevTime = ts[nextIdx - 1] / 1000;\r\n\r\n        svgRoot.setCurrentTime(prevTime);\r\n\r\n        this.setSliderPos();\r\n    };\r\n\r\n    showPausePlayButton() {\r\n        return (\r\n            <FontAwesomeIcon\r\n                icon={this.state.visuState === \"start\" ? faPause : faPlay}\r\n                className=\"icons\"\r\n                size=\"lg\"\r\n                onClick={this.pausePlay}\r\n                title={this.state.visuState === \"start\" ? \"Pause\" : \"Play\"}\r\n            />\r\n        );\r\n    }\r\n\r\n    pausePlay = () => {\r\n        if (this.state.visuState === \"pause\")\r\n            this.setState({ visuState: \"start\" });\r\n        else if (this.state.visuState === \"start\")\r\n            this.setState({ visuState: \"pause\" });\r\n\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        if (svgRoot === null) return;\r\n\r\n        if (svgRoot.animationsPaused()) {\r\n            svgRoot.unpauseAnimations();\r\n        } else {\r\n            svgRoot.pauseAnimations();\r\n        }\r\n    };\r\n\r\n    stepForward = () => {\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        let curTime = Math.round(svgRoot.getCurrentTime() * 1000);\r\n        let ts = this.props.visuTimestamps;\r\n        //preventing overflow\r\n        if (curTime >= ts[ts.length - 1]) return;\r\n\r\n        let nextTime = ts.find((t) => t > curTime) / 1000;\r\n        svgRoot.setCurrentTime(nextTime);\r\n\r\n        this.setSliderPos();\r\n    };\r\n\r\n    stop = () => {\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n\r\n        svgRoot.setCurrentTime(0);\r\n\r\n        this.setState({ visuState: \"pause\" });\r\n\r\n        if (!svgRoot.animationsPaused()) {\r\n            svgRoot.pauseAnimations();\r\n        }\r\n    };\r\n\r\n    setSliderPos = () => {\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        let curTime = Math.round(svgRoot.getCurrentTime() * 1000);\r\n        let ts = this.props.visuTimestamps;\r\n        let maxTime = ts[ts.length - 1];\r\n\r\n        let pos = Math.round((curTime / maxTime) * 100000) / 1000;\r\n\r\n        let slider = document.getElementById(\"slider\");\r\n        slider.style.width = pos + \"%\";\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport LeftPane from \"./leftPane.jsx\";\r\nimport ControlPanel from \"./controlPanel.jsx\";\r\n\r\nexport default class ContentLayout extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"content-layout-wrapper\">\r\n                <ControlPanel\r\n                    bspHandler={this.props.bspHandler}\r\n                    visuTimestamps={this.props.visuTimestamps}\r\n                ></ControlPanel>\r\n                <LeftPane></LeftPane>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"./navbar.jsx\";\r\nimport Grid from \"./grid.jsx\";\r\nimport ContentLayout from \"./ContentLayout\";\r\n\r\nclass main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            curAlgo: \"bsp\",\r\n            visuSpeed: 750, //750 px / sec\r\n            bspTree: null,\r\n            visuTimestamps: null,\r\n        };\r\n    }\r\n\r\n    bspHandler = (tree, ts = null) => {\r\n        this.setState({ bspTree: tree, visuTimestamps: ts });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"main-wrapper\">\r\n                <Navbar />\r\n                <ContentLayout\r\n                    bspHandler={this.bspHandler}\r\n                    visuTimestamps={this.state.visuTimestamps}\r\n                />\r\n                <Grid\r\n                    algo={this.state.curAlgo}\r\n                    visuState={this.state.visuState}\r\n                    visuSpeed={this.state.visuSpeed}\r\n                    bspTree={this.state.bspTree}\r\n                    bspHandler={this.bspHandler}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./Components/main.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}