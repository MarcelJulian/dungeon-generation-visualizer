{"version":3,"sources":["Components/navbar.jsx","Components/helper.js","Components/BinarySpacePartitioning/room.js","Components/BinarySpacePartitioning/connector.js","Components/BinarySpacePartitioning/leaf.js","Components/BinarySpacePartitioning/BSP.js","Components/BinarySpacePartitioning/SvgComponents.jsx","Components/grid.jsx","Components/ContentLayout/controlPanelSlider.jsx","Components/ContentLayout/rightPanel.jsx","Components/ContentLayout/controlPanel.jsx","Components/ContentLayout/index.jsx","Components/main.jsx","serviceWorker.js","index.js"],"names":["Navbar","id","href","icon","faGithub","size","Component","Coor","x","y","getX","getY","getData","this","ConvertedRoom","width","height","getSize","Room","minWidth","minHeight","getWidth","getHeight","roomWidthBoundary","roomHeightBoundary","Math","floor","random","roomXBoundary","roomYBoundary","nodePos","isSplitVertical","side","iter","condition","x2","y2","i","push","Connector","leftSide","rightSide","splitPos","getPath","path","randLeft","length","randRight","coorLeftX","coorLeftY","coorRightX","coorRightY","split","ConvertedLeaf","getAll","Leaf","settingOptions","isSplitHorizontal","leftChild","rightChild","room","connector","lowerLim","upperLim","getLeftChild","getRightChild","getIsSplitVertical","getIsSplitHorizontal","getSplitPos","getRoom","getConnector","splitVertical","splitHorizontal","boundary","min","rand","createConnector","leftSideCoors","addSide","rightSideCoors","trimSide","node","coors","concat","getConnectorSide","tempCoors","insertedVal","forEach","c","includes","tempCoor","find","e","idx","indexOf","splice","console","log","BSP","tree","root","q","createRoom","shift","splitRoot","delay","BspFirstSplitPath","document","getElementById","pauseAnimations","props","convertedLeaf","visuSpeed","pathString","getRectanglePath","pathStyle","strokeDasharray","strokeDashoffset","dur","getVisualizationDuration","d","style","animatePath","BspSplitPath","x1","y1","getLineSplitPath","idAnim","replace","lastIndexOf","num","parseInt","slice","begin","BspRoomPath","convertedRoom","BspConnectorPath","convertedConnector","interval","turnIdx","lastDir","dirList","path1","path2","curDir","getDir","c1","c2","c1x","c1y","c2x","c2y","c1x_i","c1y_i","c2x_i","c2y_i","c3","c3x","c3y","c3x_i","c3y_i","c4","c4x","c4y","c4x_i","c4y_i","getConnectorPath","id2","idAnim2","idDoor","beginDoor","pathStyleWhite","stroke","strokeWidth","x3","y3","x4","y4","id1","getDoorPath","points","attributeType","attributeName","to","fill","BspSplitSvg","col","row","bspTree","curState","column","updateTree","gridStyle","winWidth","winHeight","className","convertSize","createFirstSplitPath","paths","cnt","leaf","key","createSplitPath","xlinkHref","createRoomPath","createConnectorPath","obj","gridWidth","gridHeight","winXCenter","winYCenter","coor","coorX","coorY","connectBspPaths","g","n","childElementCount","beginAnim","animGray","animThin","setAttribute","animDoor","animDoor2","animateTags","getElementsByTagName","totalDuration","timestamps","timestampsSplit","getAttribute","substring","visuTimestamps","visuTimestampsSplit","Grid","passedTree","curBspTree","randNum","createGrid","grid","tdStyle","state","header","scope","border","children","j","window","innerWidth","innerHeight","updateWindowDimensions","bind","addEventListener","bspHandler","removeEventListener","headerHeight","offsetHeight","controlHeight","curWidth","curHeight","setState","ControlPanelSlider","sliderListener","activateListener","setInterval","changeSliderWidth","deactivateListener","clearInterval","svgRoot","curTime","round","getCurrentTime","ts","maxTime","pos","slider","clickEvent","maxW","clientWidth","rect","target","getBoundingClientRect","clientX","left","clickTime","setCurrentTime","visuState","setSliderPos","RightPanel","stepListener","lastpage","jumpToStep","resetStateHandler","limitStep","tsSplit","highlightOption","e0","e1","classList","contains","remove","add","reset","parentNode","removeChild","settingOptionsHandler","showArrow","s","faChevronRight","onClick","hideRightPanelHandler","showDescContentTitle","title","curPage","showDescReplayIcon","faRedoAlt","replay","showDescContent","src","process","alt","faChevronDown","showDropDown","wrapper","detail","transform","maxHeight","fontWeight","resetDropDown","showDescContentPage","faLongArrowAltLeft","prevPage","faLongArrowAltRight","nextPage","h","lastPage","changeSelected","o","temp","ControlPanel","showControlButtons","faStepBackward","stepBackward","showPausePlayButton","faStepForward","stepForward","faStop","stop","nextIdx","findIndex","t","prevTime","pausePlay","animationsPaused","unpauseAnimations","nextTime","curAlgo","resetState","faPause","faPlay","ContentLayout","v","main","tempSpeed","algo","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c077945.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <header id=\"navbar\">\r\n                <div id=\"title\">\r\n                    <b>Dungeon Generation Visualizer</b>\r\n                </div>\r\n                <a href=\"https://github.com/MarcelJulian/dungeon-generation-visualizer\">\r\n                    <FontAwesomeIcon icon={faGithub} id=\"gh-icon\" size=\"lg\" />\r\n                </a>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n","class Coor {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    getX = () => this.x;\r\n    getY = () => this.y;\r\n    getData = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n        };\r\n    };\r\n}\r\n\r\nclass Size {\r\n    constructor(coor, width, height) {\r\n        this.coor = coor;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    getCoor = () => this.coor;\r\n    getX = () => this.coor.getX();\r\n    getY = () => this.coor.getY();\r\n    getWidth = () => this.width;\r\n    getHeight = () => this.height;\r\n    getX2 = () => this.coor.getX() + this.width;\r\n    getY2 = () => this.coor.getY() + this.height;\r\n    getData = () => {\r\n        return {\r\n            x: this.coor.getX(),\r\n            y: this.coor.getY(),\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n}\r\n\r\nexport { Coor, Size };\r\n","import { Coor } from \"../helper.js\";\r\n\r\nclass Room {\r\n    minWidth = 2;\r\n    minHeight = 2;\r\n\r\n    constructor(x, y, width, height) {\r\n        //to prevent rooms going too close to each other\r\n        let roomWidthBoundary = width - 2 - this.minWidth + 1;\r\n        let roomHeightBoundary = height - 2 - this.minHeight + 1;\r\n\r\n        this.width =\r\n            Math.floor(Math.random() * roomWidthBoundary) + this.minWidth;\r\n        this.height =\r\n            Math.floor(Math.random() * roomHeightBoundary) + this.minHeight;\r\n\r\n        let roomXBoundary = width - 2 - this.width + 1;\r\n        let roomYBoundary = height - 2 - this.height + 1;\r\n\r\n        this.x = Math.floor(Math.random() * roomXBoundary) + x + 1;\r\n        this.y = Math.floor(Math.random() * roomYBoundary) + y + 1;\r\n    }\r\n\r\n    getConnectorSide(nodePos, isSplitVertical) {\r\n        let side = [];\r\n        let iter = 0,\r\n            condition = 0,\r\n            x2 = 0,\r\n            y2 = 0;\r\n\r\n        if (isSplitVertical) {\r\n            iter = this.y;\r\n            condition = this.y + this.height;\r\n\r\n            //get bottom side\r\n            if (nodePos === \"left\") x2 = this.x + this.width - 1;\r\n            //get top side\r\n            else x2 = this.x;\r\n\r\n            for (let i = iter; i < condition; i++) side.push(new Coor(x2, i));\r\n        } else {\r\n            iter = this.x;\r\n            condition = this.x + this.width;\r\n\r\n            //get right side\r\n            if (nodePos === \"left\") y2 = this.y + this.height - 1;\r\n            //get left side\r\n            else y2 = this.y;\r\n\r\n            for (let i = iter; i < condition; i++) side.push(new Coor(i, y2));\r\n        }\r\n\r\n        return side;\r\n    }\r\n\r\n    getX = () => this.x;\r\n    getY = () => this.y;\r\n    getWidth = () => this.width;\r\n    getHeight = () => this.height;\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n}\r\n\r\nclass ConvertedRoom {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n}\r\n\r\nexport default Room;\r\nexport { ConvertedRoom };\r\n","import { Coor } from \"../helper.js\";\r\n\r\nexport default class Connector {\r\n    constructor(leftSide, rightSide, isSplitVertical, splitPos) {\r\n        let path = [];\r\n        // leftSide.forEach((element) => {\r\n        //     console.log(\"Left: X: \" + element.getX() + \" Y: \" + element.getY());\r\n        // });\r\n\r\n        // rightSide.forEach((element) => {\r\n        //     console.log(\r\n        //         \"Right: X: \" + element.getX() + \" Y: \" + element.getY()\r\n        //     );\r\n        // });\r\n\r\n        let randLeft = Math.floor(Math.random() * leftSide.length);\r\n        let randRight = Math.floor(Math.random() * rightSide.length);\r\n\r\n        let coorLeftX = leftSide[randLeft].getX();\r\n        let coorLeftY = leftSide[randLeft].getY();\r\n        let coorRightX = rightSide[randRight].getX();\r\n        let coorRightY = rightSide[randRight].getY();\r\n\r\n        if (isSplitVertical) {\r\n            let split = splitPos - Math.floor(Math.random() * 2);\r\n            // console.log(\"Split: \" + split);\r\n\r\n            for (let i = coorLeftX + 1; i <= split; i++) {\r\n                path.push(new Coor(i, coorLeftY));\r\n                // console.log(\"First Step: \" + i + \", \" + coorLeftY);\r\n            }\r\n\r\n            if (coorLeftY < coorRightY) {\r\n                for (let i = coorLeftY + 1; i <= coorRightY; i++) {\r\n                    path.push(new Coor(split, i));\r\n                    // console.log(\"Second Step < : \" + split + \", \" + i);\r\n                }\r\n            } else if (coorLeftY > coorRightY) {\r\n                for (let i = coorLeftY - 1; i >= coorRightY; i--) {\r\n                    path.push(new Coor(split, i));\r\n                    // console.log(\"Second Step > : \" + split + \", \" + i);\r\n                }\r\n            } else {\r\n                //straight\r\n            }\r\n\r\n            for (let i = split + 1; i < coorRightX; i++) {\r\n                path.push(new Coor(i, coorRightY));\r\n                // console.log(\"Third Step: \" + i + \", \" + coorRightY);\r\n            }\r\n        } else {\r\n            let split = splitPos - Math.floor(Math.random() * 2);\r\n            // console.log(\"Split: \" + split);\r\n            //left: (1,6) (2,6) (3,6) (4,6) (5,6)\r\n            //right: (1,9) (2,9)\r\n\r\n            for (let i = coorLeftY + 1; i <= split; i++) {\r\n                path.push(new Coor(coorLeftX, i));\r\n                // console.log(\"First Step: \" + coorLeftX + \", \" + i);\r\n            }\r\n\r\n            if (coorLeftX < coorRightX) {\r\n                for (let i = coorLeftX + 1; i <= coorRightX; i++) {\r\n                    path.push(new Coor(i, split));\r\n                    // console.log(\"Second Step < : \" + i + \", \" + split);\r\n                }\r\n            } else if (coorLeftX > coorRightX) {\r\n                for (let i = coorLeftX - 1; i >= coorRightX; i--) {\r\n                    path.push(new Coor(i, split));\r\n                    // console.log(\"Second Step > : \" + i + \", \" + split);\r\n                }\r\n            } else {\r\n                //straight\r\n            }\r\n\r\n            for (let i = split + 1; i < coorRightY; i++) {\r\n                path.push(new Coor(coorRightX, i));\r\n                // console.log(\"Third Step: \" + coorRightX + \", \" + i);\r\n            }\r\n        }\r\n\r\n        this.path = path;\r\n    }\r\n\r\n    getPath = () => this.path;\r\n}\r\n","//Classes in javascript is weird. Using classes in this project is fine but,\r\n//it's better to benefit from the prototype aspect of javascript than the classics.\r\nimport Room from \"./room.js\";\r\nimport Connector from \"./connector.js\";\r\n\r\nclass Leaf {\r\n    leftChild = null;\r\n    rightChild = null;\r\n\r\n    isSplitVertical = false;\r\n    isSplitHorizontal = false;\r\n\r\n    splitPos = 0;\r\n\r\n    room = null;\r\n    connector = null;\r\n\r\n    //lowest and highest multiplier for random\r\n    //these limits are needed to either make the splits size vary or similar\r\n    lowerLim = 0.2;\r\n    upperLim = 0.8;\r\n\r\n    //smallest possible width and height\r\n    minWidth = 6;\r\n    minHeight = 6;\r\n\r\n    constructor(\r\n        x,\r\n        y,\r\n        width,\r\n        height,\r\n        settingOptions,\r\n        isSplitVertical = false,\r\n        isSplitHorizontal = false,\r\n        splitPos = 0\r\n    ) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.isSplitVertical = isSplitVertical;\r\n        this.isSplitHorizontal = isSplitHorizontal;\r\n        this.splitPos = splitPos;\r\n\r\n        this.settingOptions = settingOptions;\r\n\r\n        if (settingOptions[1] === 1) {\r\n            this.lowerLim = 0.4;\r\n            this.upperLim = 0.6;\r\n        }\r\n        if (settingOptions[2] === 1) {\r\n            this.minWidth = 4;\r\n            this.minHeight = 4;\r\n        }\r\n    }\r\n\r\n    split() {\r\n        if (this.leftChild != null || this.rightChild != null) return false;\r\n\r\n        //if l or w is 50% larger, force split. Else, the split is random.\r\n        if (this.width / this.height >= 1.5) this.isSplitVertical = true;\r\n        else if (this.height / this.width >= 1.5) this.isSplitHorizontal = true;\r\n        else {\r\n            let rand = Math.floor(Math.random() * 2);\r\n            if (rand) this.isSplitVertical = true;\r\n            else this.isSplitHorizontal = true;\r\n        }\r\n\r\n        if (this.isSplitVertical) return this.splitVertical();\r\n        else if (this.isSplitHorizontal) return this.splitHorizontal();\r\n    }\r\n\r\n    //TODO: convert these limits to props\r\n\r\n    splitVertical() {\r\n        //width is too small to be splitted\r\n        if (this.width < this.minWidth * 2) return false;\r\n\r\n        let boundary = Math.floor(\r\n            this.width - this.width * (this.upperLim - this.lowerLim)\r\n        );\r\n\r\n        //preventing size being lower than the min size\r\n        boundary =\r\n            boundary > this.width - this.minWidth * 2\r\n                ? this.width - this.minWidth * 2\r\n                : boundary;\r\n        boundary += 1;\r\n        let min =\r\n            this.width * this.lowerLim > this.minWidth\r\n                ? this.width * this.lowerLim\r\n                : this.minWidth;\r\n\r\n        let rand = Math.floor(Math.random() * boundary);\r\n        rand += Math.floor(min);\r\n\r\n        this.splitPos = rand;\r\n\r\n        this.leftChild = new Leaf(\r\n            this.x,\r\n            this.y,\r\n            rand,\r\n            this.height,\r\n            this.settingOptions\r\n        );\r\n        this.rightChild = new Leaf(\r\n            this.x + rand,\r\n            this.y,\r\n            this.width - rand,\r\n            this.height,\r\n            this.settingOptions\r\n        );\r\n        return true;\r\n    }\r\n\r\n    splitHorizontal() {\r\n        //height is too small to be splitted\r\n        if (this.height < this.minHeight * 2) return false;\r\n\r\n        let boundary = Math.floor(\r\n            this.height - this.height * (this.upperLim - this.lowerLim)\r\n        );\r\n\r\n        //preventing size being lower than the min size\r\n        boundary =\r\n            boundary > this.height - this.minHeight * 2\r\n                ? this.height - this.minHeight * 2\r\n                : boundary;\r\n        boundary += 1;\r\n        let min =\r\n            this.height * this.lowerLim > this.minHeight\r\n                ? this.height * this.lowerLim\r\n                : this.minHeight;\r\n\r\n        let rand = Math.floor(Math.random() * boundary);\r\n        rand += Math.floor(min);\r\n\r\n        this.splitPos = rand;\r\n\r\n        this.leftChild = new Leaf(\r\n            this.x,\r\n            this.y,\r\n            this.width,\r\n            rand,\r\n            this.settingOptions\r\n        );\r\n        this.rightChild = new Leaf(\r\n            this.x,\r\n            this.y + rand,\r\n            this.width,\r\n            this.height - rand,\r\n            this.settingOptions\r\n        );\r\n        return true;\r\n    }\r\n\r\n    createRoom() {\r\n        if (this.leftChild !== null || this.rightChild !== null) return;\r\n        if (this.room !== null) return;\r\n        this.room = new Room(this.x, this.y, this.width, this.height);\r\n    }\r\n\r\n    createConnector() {\r\n        if (\r\n            this.connector !== null ||\r\n            this.getLeftChild() === null ||\r\n            this.getRightChild() === null\r\n        )\r\n            return;\r\n\r\n        if (this.getLeftChild().getConnector() === null)\r\n            this.getLeftChild().createConnector();\r\n\r\n        if (this.getRightChild().getConnector() === null)\r\n            this.getRightChild().createConnector();\r\n\r\n        let leftSideCoors = this.addSide(\r\n            this.getLeftChild(),\r\n            \"left\",\r\n            this.getIsSplitVertical()\r\n        );\r\n        let rightSideCoors = this.addSide(\r\n            this.getRightChild(),\r\n            \"right\",\r\n            this.getIsSplitVertical()\r\n        );\r\n\r\n        leftSideCoors = this.trimSide(\r\n            leftSideCoors,\r\n            \"left\",\r\n            this.getIsSplitVertical()\r\n        );\r\n\r\n        rightSideCoors = this.trimSide(\r\n            rightSideCoors,\r\n            \"right\",\r\n            this.getIsSplitVertical()\r\n        );\r\n\r\n        let split = this.splitPos;\r\n        if (this.isSplitVertical) split += this.x;\r\n        else split += this.y;\r\n\r\n        this.connector = new Connector(\r\n            leftSideCoors,\r\n            rightSideCoors,\r\n            this.getIsSplitVertical(),\r\n            split\r\n        );\r\n    }\r\n\r\n    addSide(node, side, isSplitVertical) {\r\n        let coors = [];\r\n        if (node.leftChild !== null)\r\n            coors = coors.concat(\r\n                this.addSide(node.leftChild, side, isSplitVertical)\r\n            );\r\n        if (node.rightChild !== null)\r\n            coors = coors.concat(\r\n                this.addSide(node.rightChild, side, isSplitVertical)\r\n            );\r\n\r\n        if (node.getConnector() !== null)\r\n            coors = coors.concat(node.getConnector().getPath());\r\n\r\n        if (node.getRoom() !== null) {\r\n            coors = coors.concat(\r\n                node.getRoom().getConnectorSide(side, isSplitVertical)\r\n            );\r\n        }\r\n\r\n        return coors;\r\n    }\r\n\r\n    trimSide(coors, side, isSplitVertical) {\r\n        let tempCoors = [];\r\n        let insertedVal = [];\r\n\r\n        coors.forEach((c) => {\r\n            if (isSplitVertical) {\r\n                //check if the axis is alr filled\r\n                if (insertedVal.includes(c.getY())) {\r\n                    let tempCoor = tempCoors.find((e) => e.getY() === c.getY());\r\n\r\n                    //if the new coor is closer to the splitPos, switch it\r\n                    if (side === \"left\") {\r\n                        if (c.getX() > tempCoor.getX()) {\r\n                            let idx = tempCoors.indexOf(tempCoor);\r\n                            tempCoors.splice(idx, 1);\r\n                            tempCoors.push(c);\r\n                        }\r\n                    } else {\r\n                        if (c.getX() < tempCoor.getX()) {\r\n                            let idx = tempCoors.indexOf(tempCoor);\r\n                            tempCoors.splice(idx, 1);\r\n                            tempCoors.push(c);\r\n                        }\r\n                    }\r\n                } else {\r\n                    //it's a new coor, simply push\r\n                    insertedVal.push(c.getY());\r\n                    tempCoors.push(c);\r\n                }\r\n            } else {\r\n                //check if the axis is alr filled\r\n                if (insertedVal.includes(c.getX())) {\r\n                    let tempCoor = tempCoors.find((e) => e.getX() === c.getX());\r\n\r\n                    //if the new coor is closer to the splitPos, switch it\r\n                    if (side === \"left\") {\r\n                        if (c.getY() > tempCoor.getY()) {\r\n                            let idx = tempCoors.indexOf(tempCoor);\r\n                            tempCoors.splice(idx, 1);\r\n                            tempCoors.push(c);\r\n                        }\r\n                    } else {\r\n                        if (c.getY() < tempCoor.getY()) {\r\n                            let idx = tempCoors.indexOf(tempCoor);\r\n                            tempCoors.splice(idx, 1);\r\n                            tempCoors.push(c);\r\n                        }\r\n                    }\r\n                } else {\r\n                    //it's a new coor, simply push\r\n                    insertedVal.push(c.getX());\r\n                    tempCoors.push(c);\r\n                }\r\n            }\r\n        });\r\n        return tempCoors;\r\n    }\r\n\r\n    toStrings() {\r\n        console.log(\"x: \" + this.x + \" y: \" + this.y);\r\n        console.log(\"width: \" + this.width + \" height: \" + this.height);\r\n    }\r\n\r\n    getX = () => this.x;\r\n    getY = () => this.y;\r\n    getWidth = () => this.width;\r\n    getHeight = () => this.height;\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n    getLeftChild = () => this.leftChild;\r\n    getRightChild = () => this.rightChild;\r\n    getIsSplitVertical = () => this.isSplitVertical;\r\n    getIsSplitHorizontal = () => this.isSplitHorizontal;\r\n    getSplitPos = () => this.splitPos;\r\n    getRoom = () => this.room;\r\n    getConnector = () => this.connector;\r\n}\r\n\r\nclass ConvertedLeaf {\r\n    constructor(x, y, width, height, isSplitVertical, splitPos) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.isSplitVertical = isSplitVertical;\r\n        this.splitPos = splitPos;\r\n    }\r\n\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n\r\n    getAll = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n            isSplitVertical: this.isSplitVertical,\r\n            splitPos: this.splitPos,\r\n        };\r\n    };\r\n}\r\n\r\nexport default Leaf;\r\n\r\nexport { ConvertedLeaf };\r\n","import Leaf from \"./leaf.js\";\r\n\r\nfunction splitRoot(root, tree) {\r\n    //level order tree traversal\r\n    let q = [];\r\n    q.push(root);\r\n    while (q.length !== 0) {\r\n        tree.push(q[0]);\r\n\r\n        if (q[0].split()) {\r\n            q.push(q[0].getLeftChild());\r\n            q.push(q[0].getRightChild());\r\n            // tree.push(q[0].getLeftChild());\r\n            // tree.push(q[0].getRightChild());\r\n        } else {\r\n            q[0].createRoom();\r\n        }\r\n        q.shift();\r\n    }\r\n\r\n    //run createConnector() from root\r\n    tree[0].createConnector();\r\n\r\n    return tree;\r\n}\r\n\r\nfunction BSP(x, y, width, height, settingOptions) {\r\n    var tree = [];\r\n    var root = new Leaf(x, y, width, height, settingOptions);\r\n\r\n    tree = splitRoot(root, tree);\r\n\r\n    return tree;\r\n\r\n    //only get leaves (last node)\r\n    /*\r\n    var leaves = [];\r\n\r\n    tree.forEach((l) => {\r\n        if (l.getRightChild());\r\n        else leaves.push(l);\r\n    });\r\n\r\n    return leaves;\r\n    */\r\n}\r\n\r\nexport default BSP;\r\n","import React, { Component } from \"react\";\r\nimport \"./SvgComponents.css\";\r\n\r\nvar delay = \" + 0.2s\";\r\n\r\nexport class BspFirstSplitPath extends Component {\r\n    componentDidMount() {\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        svgRoot.pauseAnimations();\r\n    }\r\n\r\n    render() {\r\n        const { convertedLeaf, visuSpeed } = this.props;\r\n\r\n        let { x, y, width, height } = convertedLeaf.getSize();\r\n\r\n        let pathString = getRectanglePath(x, y, width, height);\r\n\r\n        let length = (width + height) * 2;\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n\r\n        return (\r\n            <path id=\"bsp-split-path-0\" d={pathString} style={pathStyle}>\r\n                {animatePath(dur, \"bsp-split-anim-0\", \"0s\")}\r\n            </path>\r\n        );\r\n    }\r\n}\r\n\r\nexport class BspSplitPath extends Component {\r\n    render() {\r\n        const { id, convertedLeaf, visuSpeed } = this.props;\r\n\r\n        let {\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            isSplitVertical,\r\n            splitPos,\r\n        } = convertedLeaf.getAll();\r\n\r\n        let { x1, y1, x2, y2 } = getLineSplitPath(\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            isSplitVertical,\r\n            splitPos\r\n        );\r\n\r\n        let length = 0;\r\n        if (isSplitVertical) length = height;\r\n        else length = width;\r\n\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n\r\n        let idAnim = id.replace(\"path\", \"anim\");\r\n        let idx = id.lastIndexOf(\"-\");\r\n        let num = parseInt(id.slice(idx + 1)) - 1;\r\n        let begin = idAnim.slice(0, idx + 1) + num + \".end\" + delay;\r\n\r\n        return (\r\n            <line id={id} x1={x1} y1={y1} x2={x2} y2={y2} style={pathStyle}>\r\n                {animatePath(dur, idAnim, begin)}\r\n            </line>\r\n        );\r\n    }\r\n}\r\n\r\nexport class BspRoomPath extends Component {\r\n    render() {\r\n        const { id, convertedRoom, visuSpeed } = this.props;\r\n\r\n        let { x, y, width, height } = convertedRoom.getSize();\r\n\r\n        let pathString = getRectanglePath(x, y, width, height);\r\n\r\n        let length = (width + height) * 2;\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n        let idAnim = id.replace(\"path\", \"anim\");\r\n        let idx = id.lastIndexOf(\"-\");\r\n        let num = parseInt(id.slice(idx + 1)) - 1;\r\n        let begin = idAnim.slice(0, idx + 1) + num + \".end\" + delay;\r\n        if (num === -1) begin = \"animate-split-gray.end\" + delay;\r\n\r\n        return (\r\n            <path id={id} d={pathString} style={pathStyle}>\r\n                {animatePath(dur, idAnim, begin)}\r\n            </path>\r\n        );\r\n    }\r\n}\r\n\r\nexport class BspConnectorPath extends Component {\r\n    render() {\r\n        const {\r\n            id,\r\n            convertedConnector,\r\n            visuSpeed,\r\n            interval,\r\n            isSplitVertical,\r\n        } = this.props;\r\n\r\n        let { path1, path2 } = getConnectorPath(\r\n            convertedConnector,\r\n            interval,\r\n            isSplitVertical\r\n        );\r\n\r\n        let length = convertedConnector.length * interval;\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n            // strokeWidth: 3,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length * 2);\r\n\r\n        let id2 = id.replace(\"path\", \"path2\");\r\n\r\n        let idAnim = id.replace(\"path\", \"anim\");\r\n        let idAnim2 = idAnim.replace(\"anim\", \"anim2\");\r\n        let idDoor = idAnim.replace(\"connector\", \"door\");\r\n        let idx = id.lastIndexOf(\"-\");\r\n        let num = parseInt(id.slice(idx + 1)) - 1;\r\n        let begin = idDoor + \".end\" + delay;\r\n        let beginDoor = idAnim.slice(0, idx + 1) + num + \".end\" + delay;\r\n\r\n        let door = () =>\r\n            getDoorPath(\r\n                convertedConnector,\r\n                interval,\r\n                isSplitVertical,\r\n                idDoor,\r\n                beginDoor\r\n            );\r\n\r\n        return (\r\n            <g>\r\n                {door()}\r\n                <polyline id={id} points={path1} style={pathStyle}>\r\n                    {animatePath(dur, idAnim, begin)}\r\n                </polyline>\r\n                <polyline id={id2} points={path2} style={pathStyle}>\r\n                    {animatePath(dur, idAnim2, begin)}\r\n                </polyline>\r\n            </g>\r\n        );\r\n    }\r\n}\r\n\r\nfunction animatePath(dur, id, begin = \"indefinite\") {\r\n    return (\r\n        <animate\r\n            id={id}\r\n            attributeType=\"CSS\"\r\n            attributeName=\"stroke-dashoffset\"\r\n            to=\"0\"\r\n            dur={dur + \"s\"}\r\n            fill=\"freeze\"\r\n            begin={begin}\r\n        />\r\n    );\r\n}\r\n\r\nfunction getVisualizationDuration(visuSpeed, length) {\r\n    return length / visuSpeed;\r\n}\r\n\r\nfunction getRectanglePath(x, y, width, height) {\r\n    return (\r\n        \"M\" +\r\n        x +\r\n        \" \" +\r\n        y +\r\n        \" L\" +\r\n        (x + width) +\r\n        \" \" +\r\n        y +\r\n        \" L\" +\r\n        (x + width) +\r\n        \" \" +\r\n        (y + height) +\r\n        \" L\" +\r\n        x +\r\n        \" \" +\r\n        (y + height) +\r\n        \" L\" +\r\n        x +\r\n        \" \" +\r\n        y +\r\n        \" Z\"\r\n    );\r\n}\r\n\r\nfunction getLineSplitPath(x, y, width, height, isSplitVertical, splitPos) {\r\n    if (isSplitVertical)\r\n        return {\r\n            x1: x + splitPos,\r\n            y1: y,\r\n            x2: x + splitPos,\r\n            y2: y + height,\r\n        };\r\n    return {\r\n        x1: x,\r\n        y1: y + splitPos,\r\n        x2: x + width,\r\n        y2: y + splitPos,\r\n    };\r\n}\r\n\r\nfunction getConnectorPath(path, interval, isSplitVertical) {\r\n    let turnIdx = [],\r\n        lastDir = \"\",\r\n        dirList = [];\r\n    let path1 = \"\",\r\n        path2 = \"\";\r\n\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        let curDir = getDir(\r\n            path[i].getX(),\r\n            path[i].getY(),\r\n            path[i + 1].getX(),\r\n            path[i + 1].getY()\r\n        );\r\n        if (lastDir === \"\") {\r\n            lastDir = curDir;\r\n            dirList.push(curDir);\r\n        } else if (lastDir !== curDir) {\r\n            lastDir = curDir;\r\n            turnIdx.push(i);\r\n            dirList.push(curDir);\r\n        }\r\n    }\r\n\r\n    //straight line\r\n    if (dirList.length === 1) {\r\n        let c1 = path[0],\r\n            c2 = path[path.length - 1];\r\n        const c1x = c1.getX(),\r\n            c1y = c1.getY(),\r\n            c2x = c2.getX(),\r\n            c2y = c2.getY();\r\n        const c1x_i = c1x + interval,\r\n            c1y_i = c1y + interval,\r\n            c2x_i = c2x + interval,\r\n            c2y_i = c2y + interval;\r\n\r\n        if (dirList[0] === \"down\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y_i;\r\n        } else if (dirList[0] === \"right\") {\r\n            path1 = c1x + \",\" + c1y_i + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 = c1x + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n        } else console.log(\"Error Connector with length 1. Dir: \" + dirList[0]);\r\n    } else if (dirList.length === 2) {\r\n        //1 turn\r\n        let c1 = path[0],\r\n            c2 = path[turnIdx[0]],\r\n            c3 = path[path.length - 1];\r\n        const c1x = c1.getX(),\r\n            c1y = c1.getY(),\r\n            c2x = c2.getX(),\r\n            c2y = c2.getY(),\r\n            c3x = c3.getX(),\r\n            c3y = c3.getY();\r\n        const c1x_i = c1x + interval,\r\n            c1y_i = c1y + interval,\r\n            c2x_i = c2x + interval,\r\n            c2y_i = c2y + interval,\r\n            c3x_i = c3x + interval,\r\n            c3y_i = c3y + interval;\r\n\r\n        if (\r\n            dirList[0] === \"down\" &&\r\n            dirList[1] === \"right\" &&\r\n            isSplitVertical\r\n        ) {\r\n            path1 = c1x + \",\" + c1y_i + \" \" + c2x + \",\" + c2y_i;\r\n            path1 += \" \" + c3x_i + \",\" + c3y_i;\r\n            path2 = c1x + \",\" + c1y + \" \" + c1x_i + \",\" + c1y;\r\n            path2 += \" \" + c2x_i + \",\" + c2y + \" \" + c3x_i + \",\" + c3y;\r\n        } else if (\r\n            dirList[0] === \"down\" &&\r\n            dirList[1] === \"right\" &&\r\n            !isSplitVertical\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y_i;\r\n            path1 += \" \" + c3x + \",\" + c3y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path2 += \" \" + c3x_i + \",\" + c3y + \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (\r\n            dirList[0] === \"right\" &&\r\n            dirList[1] === \"down\" &&\r\n            isSplitVertical\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path1 += \" \" + c3x_i + \",\" + c3y;\r\n            path2 = c1x + \",\" + c1y_i + \" \" + c2x + \",\" + c2y_i;\r\n            path2 += \" \" + c3x + \",\" + c3y_i + \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (\r\n            dirList[0] === \"right\" &&\r\n            dirList[1] === \"down\" &&\r\n            !isSplitVertical\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c1x + \",\" + c1y_i;\r\n            path1 += \" \" + c2x + \",\" + c2y_i + \" \" + c3x + \",\" + c3y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (dirList[0] === \"up\" && dirList[1] === \"right\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x_i + \",\" + c3y;\r\n            path2 = c1x + \",\" + c1y_i + \" \" + c1x_i + \",\" + c1y_i;\r\n            path2 += \" \" + c2x_i + \",\" + c2y_i + \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (dirList[0] === \"right\" && dirList[1] === \"up\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y + \" \" + c3x_i + \",\" + c3y;\r\n            path2 = c1x + \",\" + c1y_i + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (dirList[0] === \"left\" && dirList[1] === \"down\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c1x_i + \",\" + c1y_i;\r\n            path2 += \" \" + c2x_i + \",\" + c2y_i + \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (dirList[0] === \"down\" && dirList[1] === \"left\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y + \" \" + c3x + \",\" + c3y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i;\r\n        } else\r\n            console.log(\r\n                \"Error Connector with length 2. Dir: \" +\r\n                    dirList[0] +\r\n                    \" to \" +\r\n                    dirList[1]\r\n            );\r\n    } else if (dirList.length === 3) {\r\n        //2 turn\r\n        let c1 = path[0],\r\n            c2 = path[turnIdx[0]],\r\n            c3 = path[turnIdx[1]],\r\n            c4 = path[path.length - 1];\r\n        const c1x = c1.getX(),\r\n            c1y = c1.getY(),\r\n            c2x = c2.getX(),\r\n            c2y = c2.getY(),\r\n            c3x = c3.getX(),\r\n            c3y = c3.getY(),\r\n            c4x = c4.getX(),\r\n            c4y = c4.getY();\r\n        const c1x_i = c1x + interval,\r\n            c1y_i = c1y + interval,\r\n            c2x_i = c2x + interval,\r\n            c2y_i = c2y + interval,\r\n            c3x_i = c3x + interval,\r\n            c3y_i = c3y + interval,\r\n            c4x_i = c4x + interval,\r\n            c4y_i = c4y + interval;\r\n\r\n        if (\r\n            dirList[0] === \"down\" &&\r\n            dirList[1] === \"right\" &&\r\n            dirList[2] === \"down\"\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y_i;\r\n            path1 += \" \" + c3x + \",\" + c3y_i + \" \" + c4x + \",\" + c4y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path2 += \" \" + c3x_i + \",\" + c3y + \" \" + c4x_i + \",\" + c4y_i;\r\n        } else if (\r\n            dirList[0] === \"down\" &&\r\n            dirList[1] === \"left\" &&\r\n            dirList[2] === \"down\"\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y + \" \" + c4x + \",\" + c4y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i + \" \" + c4x_i + \",\" + c4y_i;\r\n        } else if (\r\n            dirList[0] === \"right\" &&\r\n            dirList[1] === \"down\" &&\r\n            dirList[2] === \"right\"\r\n        ) {\r\n            path1 = c1x + \",\" + c1y_i + \" \" + c2x + \",\" + c2y_i;\r\n            path1 += \" \" + c3x + \",\" + c3y_i + \" \" + c4x_i + \",\" + c4y_i;\r\n            path2 = c1x + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path2 += \" \" + c3x_i + \",\" + c3y + \" \" + c4x_i + \",\" + c4y;\r\n        } else if (\r\n            dirList[0] === \"right\" &&\r\n            dirList[1] === \"up\" &&\r\n            dirList[2] === \"right\"\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y + \" \" + c4x_i + \",\" + c4y;\r\n            path2 = c1x + \",\" + c1y_i + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i + \" \" + c4x_i + \",\" + c4y_i;\r\n        } else\r\n            console.log(\r\n                \"Error Connector with length 3. Dir: \" +\r\n                    dirList[0] +\r\n                    \" to \" +\r\n                    dirList[1] +\r\n                    \" to \" +\r\n                    dirList[2]\r\n            );\r\n    }\r\n\r\n    return {\r\n        path1: path1,\r\n        path2: path2,\r\n    };\r\n}\r\n\r\nfunction getDoorPath(path, interval, isSplitVertical, id, begin) {\r\n    // let pathStyleThin = {\r\n    //     strokeDasharray: interval - 5,\r\n    //     strokeDashoffset: interval - 5,\r\n    //     stroke: \"black\",\r\n    //     strokeWidth: 1,\r\n    // };\r\n    let pathStyleWhite = {\r\n        strokeDasharray: interval - 5,\r\n        strokeDashoffset: interval - 5,\r\n        stroke: \"white\",\r\n        strokeWidth: 5,\r\n    };\r\n\r\n    let dur = 0.25;\r\n\r\n    let c1 = path[0],\r\n        c2 = path[path.length - 1];\r\n    const c1x = c1.getX(),\r\n        c1y = c1.getY(),\r\n        c2x = c2.getX(),\r\n        c2y = c2.getY();\r\n    const c1x_i = c1x + interval,\r\n        c1y_i = c1y + interval,\r\n        c2x_i = c2x + interval,\r\n        c2y_i = c2y + interval;\r\n\r\n    let x1 = 0,\r\n        y1 = 0,\r\n        x2 = 0,\r\n        y2 = 0,\r\n        x3 = 0,\r\n        y3 = 0,\r\n        x4 = 0,\r\n        y4 = 0;\r\n    if (isSplitVertical) {\r\n        x1 = c1x;\r\n        y1 = c1y + 2.5;\r\n        x2 = c1x;\r\n        y2 = c1y_i - 2.5;\r\n        x3 = c2x_i;\r\n        y3 = c2y + 2.5;\r\n        x4 = c2x_i;\r\n        y4 = c2y_i - 2.5;\r\n    } else {\r\n        x1 = c1x + 2.5;\r\n        y1 = c1y;\r\n        x2 = c1x_i - 2.5;\r\n        y2 = c1y;\r\n        x3 = c2x + 2.5;\r\n        y3 = c2y_i;\r\n        x4 = c2x_i - 2.5;\r\n        y4 = c2y_i;\r\n    }\r\n\r\n    let id1 = id;\r\n    let id2 = id.replace(\"door\", \"door2\");\r\n    return (\r\n        <g>\r\n            <line x1={x1} y1={y1} x2={x2} y2={y2} style={pathStyleWhite}>\r\n                {animatePath(dur, id1, begin)}\r\n            </line>\r\n            {/* <line x1={x1} y1={y1} x2={x2} y2={y2} style={pathStyleThin}>\r\n                {animatePath(dur)}\r\n            </line> */}\r\n            <line x1={x3} y1={y3} x2={x4} y2={y4} style={pathStyleWhite}>\r\n                {animatePath(dur, id2, begin)}\r\n            </line>\r\n            {/* <line x1={x3} y1={y3} x2={x4} y2={y4} style={pathStyleThin}>\r\n                {animatePath(dur)}\r\n            </line> */}\r\n        </g>\r\n    );\r\n}\r\n\r\nfunction getDir(x1, y1, x2, y2) {\r\n    if (x1 > x2) return \"left\";\r\n    else if (x1 < x2) return \"right\";\r\n    else if (y1 > y2) return \"up\";\r\n    else if (y1 < y2) return \"down\";\r\n}\r\n","import React, { Component } from \"react\";\r\n//TODO: change BSP.js to index.js, go refactor!\r\nimport BSP from \"./BinarySpacePartitioning/BSP.js\";\r\nimport {\r\n    BspFirstSplitPath,\r\n    BspSplitPath,\r\n    BspRoomPath,\r\n    BspConnectorPath,\r\n} from \"./BinarySpacePartitioning/SvgComponents.jsx\";\r\nimport { ConvertedLeaf } from \"./BinarySpacePartitioning/leaf.js\";\r\nimport { ConvertedRoom } from \"./BinarySpacePartitioning/room.js\";\r\nimport Leaf from \"./BinarySpacePartitioning/leaf.js\";\r\nimport Room from \"./BinarySpacePartitioning/room.js\";\r\nimport Connector from \"./BinarySpacePartitioning/connector.js\";\r\nimport \"./grid.css\";\r\nimport { Coor } from \"./helper.js\";\r\n\r\nclass Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            winWidth: window.innerWidth,\r\n            //61 is header height\r\n            //TODO: convert magic number\r\n            winHeight: window.innerHeight - 41.8 - 73.3,\r\n            row: 15,\r\n            column: 25,\r\n            interval: 30,\r\n        };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n        this.curBspTree = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        //get new window Width and Height\r\n        this.updateWindowDimensions();\r\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\r\n\r\n        let { visuTimestamps, visuTimestampsSplit } = connectBspPaths();\r\n        if (this.props.bspTree === null) {\r\n            this.props.bspHandler(\r\n                this.curBspTree,\r\n                visuTimestamps,\r\n                visuTimestampsSplit\r\n            );\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        let { visuTimestamps, visuTimestampsSplit } = connectBspPaths();\r\n        if (this.props.bspTree === null) {\r\n            this.props.bspHandler(\r\n                this.curBspTree,\r\n                visuTimestamps,\r\n                visuTimestampsSplit\r\n            );\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        let headerHeight = document.getElementById(\"navbar\").offsetHeight;\r\n        let controlHeight = document.getElementById(\"control-panel\")\r\n            .offsetHeight;\r\n\r\n        let curWidth = window.innerWidth - 400;\r\n        //61 is header height\r\n        let curHeight = window.innerHeight - headerHeight - controlHeight - 1;\r\n        this.setState({\r\n            winWidth: curWidth,\r\n            winHeight: curHeight,\r\n        });\r\n    }\r\n\r\n    updateTree = (passedTree) => {\r\n        this.curBspTree = passedTree;\r\n    };\r\n\r\n    randNum = () => Math.floor(Math.random() * 1000);\r\n\r\n    render() {\r\n        var gridStyle = {\r\n            width: this.state.winWidth,\r\n            height: this.state.winHeight,\r\n        };\r\n\r\n        return (\r\n            <div key={this.randNum()} id=\"visualizer\">\r\n                <div id=\"grid\" style={gridStyle}>\r\n                    <table>\r\n                        <tbody>{this.createGrid()}</tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <BspSplitSvg\r\n                    curState={this.state}\r\n                    visuSpeed={this.props.visuSpeed}\r\n                    bspTree={this.props.bspTree}\r\n                    bspHandler={this.props.bspHandler}\r\n                    updateTree={this.updateTree}\r\n                    settingOptions={this.props.settingOptions}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    createGrid = () => {\r\n        let grid = [];\r\n        let tdStyle = {\r\n            width: this.state.interval + \"px\",\r\n            height: this.state.interval + \"px\",\r\n        };\r\n\r\n        let header = [];\r\n        for (let i = 0; i < this.state.column; i++)\r\n            header.push(\r\n                <th key={i} scope=\"col\" style={tdStyle}>\r\n                    {i}\r\n                </th>\r\n            );\r\n\r\n        let noBorderStyle = {\r\n            border: \"none\",\r\n        };\r\n\r\n        grid.push(\r\n            <tr key=\"-1\">\r\n                <td style={noBorderStyle}></td>\r\n                {header}\r\n            </tr>\r\n        );\r\n\r\n        // Outer loop to create parent\r\n        for (let i = 0; i < this.state.row; i++) {\r\n            let children = [];\r\n            children.push(\r\n                <th key={i} scope=\"row\" style={tdStyle}>\r\n                    {i}\r\n                </th>\r\n            );\r\n            //Inner loop to create children\r\n            for (let j = 0; j < this.state.column; j++) {\r\n                children.push(\r\n                    <td\r\n                        id={`node-${i + 1}-${j + 1}`}\r\n                        key={`node-${i + 1}-${j + 1}`}\r\n                        style={tdStyle}\r\n                    ></td>\r\n                );\r\n            }\r\n            //Create the parent and add the children\r\n            grid.push(\r\n                <tr id={`row-${i + 1}`} key={`row-${i + 1}`}>\r\n                    {children}\r\n                </tr>\r\n            );\r\n        }\r\n        return grid;\r\n    };\r\n}\r\n\r\nfunction calculateBsp(col, row, settingOptions) {\r\n    return BSP(0, 0, col, row, settingOptions);\r\n}\r\n\r\nfunction BspSplitSvg(props) {\r\n    let tree = null;\r\n    if (props.bspTree === null) {\r\n        tree = calculateBsp(\r\n            props.curState.column,\r\n            props.curState.row,\r\n            props.settingOptions\r\n        );\r\n        props.updateTree(tree);\r\n    } else tree = props.bspTree;\r\n\r\n    var gridStyle = {\r\n        width: props.curState.winWidth,\r\n        height: props.curState.winHeight,\r\n    };\r\n\r\n    return (\r\n        <svg id={\"svgRoot\"} style={gridStyle}>\r\n            <g id=\"bsp-split\" className=\"bsp-svg-paths\">\r\n                {createFirstSplitPath(tree[0], props.curState, props.visuSpeed)}\r\n                {createSplitPath(tree, props.curState, props.visuSpeed)}\r\n            </g>\r\n\r\n            {getAnimateSplitGray()}\r\n            {getAnimateSplitThin()}\r\n\r\n            <g id=\"bsp-rooms\" className=\"bsp-svg-paths\">\r\n                {createRoomPath(tree, props.curState, props.visuSpeed)}\r\n            </g>\r\n            <g id=\"bsp-connectors\" className=\"bsp-svg-paths\">\r\n                {createConnectorPath(tree, props.curState, props.visuSpeed)}\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nfunction createFirstSplitPath(node, curState, visuSpeed) {\r\n    let convertedLeaf = convertSize(node, curState);\r\n    return (\r\n        <BspFirstSplitPath\r\n            convertedLeaf={convertedLeaf}\r\n            visuSpeed={visuSpeed}\r\n        ></BspFirstSplitPath>\r\n    );\r\n}\r\n\r\nfunction createSplitPath(tree, curState, visuSpeed) {\r\n    let paths = [];\r\n    let cnt = 1;\r\n\r\n    for (let i = 0; i < tree.length; i++) {\r\n        let leaf = tree[i];\r\n        // console.log(i + \" splitPos: \" + leaf.getSplitPos());\r\n        if (leaf.getSplitPos() === 0) continue;\r\n\r\n        let convertedLeaf = convertSize(leaf, curState);\r\n        let id = \"bsp-split-path-\" + cnt;\r\n        cnt++;\r\n\r\n        paths.push(\r\n            <BspSplitPath\r\n                key={id}\r\n                id={id}\r\n                convertedLeaf={convertedLeaf}\r\n                visuSpeed={visuSpeed}\r\n            ></BspSplitPath>\r\n        );\r\n    }\r\n    return paths;\r\n}\r\n\r\nfunction createRoomPath(tree, curState, visuSpeed) {\r\n    let paths = [];\r\n    let cnt = 0;\r\n\r\n    for (let i = 0; i < tree.length; i++) {\r\n        let leaf = tree[i];\r\n\r\n        if (leaf.getRoom() === null) continue;\r\n\r\n        let convertedRoom = convertSize(leaf.getRoom(), curState);\r\n        let id = \"bsp-room-path-\" + cnt;\r\n        cnt++;\r\n\r\n        paths.push(\r\n            <BspRoomPath\r\n                key={id}\r\n                id={id}\r\n                convertedRoom={convertedRoom}\r\n                visuSpeed={visuSpeed}\r\n            ></BspRoomPath>\r\n        );\r\n    }\r\n    return paths;\r\n}\r\n\r\nfunction createConnectorPath(tree, curState, visuSpeed) {\r\n    let paths = [];\r\n    let cnt = 0;\r\n    for (let i = tree.length - 1; i >= 0; i--) {\r\n        let node = tree[i];\r\n\r\n        if (node.getConnector() === null) continue;\r\n\r\n        let convertedConnector = convertSize(node.getConnector(), curState);\r\n        let id = \"bsp-connector-path-\" + cnt;\r\n        cnt++;\r\n\r\n        paths.push(\r\n            <BspConnectorPath\r\n                key={id}\r\n                id={id}\r\n                convertedConnector={convertedConnector}\r\n                visuSpeed={visuSpeed}\r\n                interval={curState.interval}\r\n                isSplitVertical={node.getIsSplitVertical()}\r\n            ></BspConnectorPath>\r\n        );\r\n    }\r\n    return paths;\r\n}\r\n\r\nfunction convertSize(obj, curState) {\r\n    const interval = curState.interval;\r\n    const gridWidth = (curState.column * interval) / 2;\r\n    const gridHeight = (curState.row * interval) / 2;\r\n    const winXCenter = curState.winWidth / 2;\r\n    const winYCenter = curState.winHeight / 2;\r\n\r\n    var x = winXCenter - gridWidth;\r\n    var y = winYCenter - gridHeight;\r\n\r\n    if (obj instanceof Leaf)\r\n        return new ConvertedLeaf(\r\n            x + obj.getX() * interval + interval / 2,\r\n            y + obj.getY() * interval + interval / 2,\r\n            obj.getWidth() * interval,\r\n            obj.getHeight() * interval,\r\n            obj.getIsSplitVertical(),\r\n            obj.getSplitPos() * interval\r\n        );\r\n\r\n    if (obj instanceof Room) {\r\n        return new ConvertedRoom(\r\n            x + obj.getX() * interval + interval / 2,\r\n            y + obj.getY() * interval + interval / 2,\r\n            obj.getWidth() * interval,\r\n            obj.getHeight() * interval\r\n        );\r\n    }\r\n    if (obj instanceof Connector) {\r\n        let convertedConnector = [];\r\n        obj.getPath().forEach((coor) => {\r\n            let coorX = coor.getX(),\r\n                coorY = coor.getY();\r\n            coorX = x + coorX * interval + interval / 2;\r\n            coorY = y + coorY * interval + interval / 2;\r\n            convertedConnector.push(new Coor(coorX, coorY));\r\n        });\r\n        return convertedConnector;\r\n    }\r\n}\r\n\r\nfunction getAnimateSplitGray() {\r\n    return (\r\n        <animate\r\n            id=\"animate-split-gray\"\r\n            xlinkHref=\"#bsp-split\"\r\n            attributeType=\"CSS\"\r\n            attributeName=\"stroke\"\r\n            to=\"gray\"\r\n            dur=\"1s\"\r\n            fill=\"freeze\"\r\n            begin=\"indefinite\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction getAnimateSplitThin() {\r\n    return (\r\n        <animate\r\n            id=\"animate-split-thin\"\r\n            xlinkHref=\"#bsp-split\"\r\n            attributeType=\"CSS\"\r\n            attributeName=\"stroke-width\"\r\n            to=\"3\"\r\n            dur=\"1s\"\r\n            fill=\"freeze\"\r\n            begin=\"indefinite\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction connectBspPaths() {\r\n    let g = document.getElementById(\"bsp-split\");\r\n\r\n    let n = g.childElementCount - 1;\r\n    let beginAnim = \"bsp-split-anim-\" + n + \".end + 0.2s\";\r\n\r\n    let animGray = document.getElementById(\"animate-split-gray\");\r\n    let animThin = document.getElementById(\"animate-split-thin\");\r\n\r\n    animGray.setAttribute(\"begin\", beginAnim);\r\n    animThin.setAttribute(\"begin\", beginAnim);\r\n\r\n    g = document.getElementById(\"bsp-rooms\");\r\n    n = g.childElementCount - 1;\r\n    let beginDoor = \"bsp-room-anim-\" + n + \".end + 0.2s\";\r\n\r\n    let animDoor = document.getElementById(\"bsp-door-anim-0\");\r\n    let animDoor2 = document.getElementById(\"bsp-door2-anim-0\");\r\n    animDoor.setAttribute(\"begin\", beginDoor);\r\n    animDoor2.setAttribute(\"begin\", beginDoor);\r\n\r\n    let svgRoot = document.getElementById(\"svgRoot\");\r\n    let animateTags = svgRoot.getElementsByTagName(\"animate\");\r\n    let totalDuration = 0;\r\n    let timestamps = [0];\r\n    let timestampsSplit = [];\r\n    // console.log(animateTags);\r\n    for (let i = 0; i < animateTags.length; i++) {\r\n        //These animations begin concurrently with another animation\r\n        if (animateTags[i].id === \"animate-split-thin\") continue;\r\n        else if (animateTags[i].id.includes(\"door2\")) continue;\r\n        else if (animateTags[i].id.includes(\"anim2\")) continue;\r\n\r\n        let dur = animateTags[i].getAttribute(\"dur\");\r\n        dur = dur.substring(0, dur.length - 1);\r\n        dur *= 1000;\r\n        totalDuration += dur + 200;\r\n\r\n        if (animateTags[i].id === \"bsp-split-anim-0\") {\r\n            timestampsSplit.push(totalDuration);\r\n        } else if (animateTags[i].id === \"animate-split-gray\") {\r\n            timestampsSplit.push(totalDuration);\r\n        } else if (animateTags[i].id === \"bsp-door-anim-0\") {\r\n            timestampsSplit.push(totalDuration - dur - 200);\r\n        }\r\n\r\n        timestamps.push(totalDuration);\r\n    }\r\n\r\n    //pushing the last timestamp\r\n    timestampsSplit.push(timestamps[timestamps.length - 1]);\r\n\r\n    return {\r\n        visuTimestamps: timestamps,\r\n        visuTimestampsSplit: timestampsSplit,\r\n    };\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport \"./controlPanelSlider.css\";\r\n\r\nexport default class ControlPanelSlider extends Component {\r\n    sliderListener = null;\r\n\r\n    componentDidMount() {\r\n        if (this.props.visuState === \"start\") this.activateListener();\r\n        else this.deactivateListener();\r\n\r\n        document\r\n            .getElementById(\"progress-bar\")\r\n            .addEventListener(\"click\", this.clickEvent);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.visuState === \"start\") this.activateListener();\r\n        else this.deactivateListener();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.deactivateListener();\r\n        document.removeEventListener(\"click\", this.clickEvent);\r\n    }\r\n\r\n    activateListener = () => {\r\n        if (this.sliderListener === null) {\r\n            this.sliderListener = setInterval(() => {\r\n                this.changeSliderWidth();\r\n            }, 10);\r\n        }\r\n    };\r\n\r\n    deactivateListener = () => {\r\n        if (this.sliderListener !== null) {\r\n            clearInterval(this.sliderListener);\r\n            this.sliderListener = null;\r\n        }\r\n    };\r\n\r\n    changeSliderWidth = () => {\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        let curTime = Math.round(svgRoot.getCurrentTime() * 1000);\r\n        let ts = this.props.visuTimestamps;\r\n        let maxTime = ts[ts.length - 1];\r\n\r\n        let pos = Math.round((curTime / maxTime) * 100000) / 1000;\r\n\r\n        let slider = document.getElementById(\"slider\");\r\n        if (slider.style.width.includes(\"100\")) {\r\n            this.deactivateListener();\r\n            slider.style.width = \"100%\";\r\n        } else slider.style.width = pos + \"%\";\r\n    };\r\n\r\n    clickEvent = (e) => {\r\n        let maxW = document.getElementById(\"progress-bar\").clientWidth;\r\n\r\n        var rect = e.target.getBoundingClientRect();\r\n        var x = e.clientX - rect.left; //x position within the element.\r\n\r\n        let pos = Math.round((x / maxW) * 100000) / 1000;\r\n\r\n        let slider = document.getElementById(\"slider\");\r\n        slider.style.width = pos + \"%\";\r\n\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        let ts = this.props.visuTimestamps;\r\n        let maxTime = ts[ts.length - 1];\r\n        let clickTime = Math.round((pos * maxTime) / 100) / 1000;\r\n\r\n        svgRoot.setCurrentTime(clickTime);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"progress-bar\">\r\n                <div id=\"slider\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport function setSliderPos(visuTimestamps) {\r\n    let svgRoot = document.getElementById(\"svgRoot\");\r\n    let curTime = Math.round(svgRoot.getCurrentTime() * 1000);\r\n    let ts = visuTimestamps;\r\n    let maxTime = ts[ts.length - 1];\r\n\r\n    let pos = Math.round((curTime / maxTime) * 100000) / 1000;\r\n\r\n    let slider = document.getElementById(\"slider\");\r\n    slider.style.width = pos + \"%\";\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { setSliderPos } from \"./controlPanelSlider\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faChevronRight,\r\n    faChevronDown,\r\n    faLongArrowAltLeft,\r\n    faLongArrowAltRight,\r\n    faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./rightPanel.css\";\r\n\r\nexport default class RightPanel extends Component {\r\n    stepListener = null;\r\n    lastpage = 1;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            curPage: 1,\r\n            settingOptions: [0, 0, 0],\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.lastPage !== this.state.curPage) {\r\n            this.deactivateListener();\r\n            if (this.state.curPage >= 3 && this.state.curPage <= 5) {\r\n                this.jumpToStep(this.state.curPage - 3);\r\n                this.activateListener(this.state.curPage - 3);\r\n            }\r\n            this.lastPage = this.state.curPage;\r\n        }\r\n        this.highlightOption();\r\n    }\r\n\r\n    jumpToStep = (i) => {\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        svgRoot.setCurrentTime(this.props.visuTimestampsSplit[i] / 1000);\r\n        setSliderPos(this.props.visuTimestamps);\r\n        svgRoot.pauseAnimations();\r\n        this.props.resetStateHandler(true);\r\n    };\r\n\r\n    activateListener = (i) => {\r\n        console.log(this.stepListener);\r\n        if (this.stepListener === null) {\r\n            this.stepListener = setInterval(() => {\r\n                this.limitStep(i);\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    deactivateListener = () => {\r\n        if (this.stepListener !== null) {\r\n            clearInterval(this.stepListener);\r\n            this.stepListener = null;\r\n        }\r\n    };\r\n\r\n    limitStep = (i) => {\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        let curTime = Math.round(svgRoot.getCurrentTime() * 1000);\r\n        let tsSplit = this.props.visuTimestampsSplit;\r\n        let animStep1 = document.getElementById(\"animate-split-gray\");\r\n        let dur = animStep1.getAttribute(\"dur\");\r\n        dur = dur.substring(0, dur.length - 1);\r\n        dur *= 1000;\r\n        dur += 200;\r\n\r\n        if (i === 0) {\r\n            if (curTime > tsSplit[i + 1] - dur) {\r\n                svgRoot.setCurrentTime((tsSplit[i + 1] - dur) / 1000);\r\n                setSliderPos(this.props.visuTimestamps);\r\n                svgRoot.pauseAnimations();\r\n                this.props.resetStateHandler(true);\r\n                this.deactivateListener();\r\n            }\r\n        } else if (curTime > tsSplit[i + 1]) {\r\n            svgRoot.setCurrentTime(tsSplit[i + 1] / 1000);\r\n            setSliderPos(this.props.visuTimestamps);\r\n            svgRoot.pauseAnimations();\r\n            this.props.resetStateHandler(true);\r\n            this.deactivateListener();\r\n        }\r\n    };\r\n\r\n    highlightOption = () => {\r\n        for (let i = 1; i <= 3; i++) {\r\n            if (i === 2) continue;\r\n            let e0 = document.getElementById(\"settings-\" + i + \"-0\");\r\n            let e1 = document.getElementById(\"settings-\" + i + \"-1\");\r\n\r\n            if (e0.classList.contains(\"selected\"))\r\n                e0.classList.remove(\"selected\");\r\n            if (e1.classList.contains(\"selected\"))\r\n                e1.classList.remove(\"selected\");\r\n        }\r\n\r\n        for (let i = 0; i <= 2; i++) {\r\n            if (i === 1) continue;\r\n            let e0 = document.getElementById(\"settings-\" + (i + 1) + \"-0\");\r\n            let e1 = document.getElementById(\"settings-\" + (i + 1) + \"-1\");\r\n\r\n            if (this.state.settingOptions[i] === 0)\r\n                e0.classList.add(\"selected\");\r\n            else e1.classList.add(\"selected\");\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"right-wrapper\">\r\n                <div id=\"settings-wrapper\">\r\n                    <div id=\"settings-hide\">{this.showArrow(\"settings\")}</div>\r\n                    <div id=\"settings-panel\">\r\n                        <div id=\"settings-title\" className=\"panel-title\">\r\n                            Settings\r\n                        </div>\r\n                        <div id=\"settings-content\">\r\n                            <div className=\"settings-row\">\r\n                                <div className=\"settings-type\">Speed</div>\r\n                                <div\r\n                                    id=\"settings-1-0\"\r\n                                    className=\"settings-option\"\r\n                                    onClick={() => this.changeSelected(1, 0)}\r\n                                >\r\n                                    Slow\r\n                                </div>\r\n                                <div\r\n                                    id=\"settings-1-1\"\r\n                                    className=\"settings-option\"\r\n                                    onClick={() => this.changeSelected(1, 1)}\r\n                                >\r\n                                    Fast\r\n                                </div>\r\n                            </div>\r\n                            {/* <div className=\"settings-row\">\r\n                                <div className=\"settings-type\">Splits</div>\r\n                                <div\r\n                                    id=\"settings-2-0\"\r\n                                    className=\"settings-option\"\r\n                                    onClick={() => this.changeSelected(2, 0)}\r\n                                >\r\n                                    Diverse\r\n                                </div>\r\n                                <div\r\n                                    id=\"settings-2-1\"\r\n                                    className=\"settings-option\"\r\n                                    onClick={() => this.changeSelected(2, 1)}\r\n                                >\r\n                                    Uniform\r\n                                </div>\r\n                            </div> */}\r\n                            <div className=\"settings-row\">\r\n                                <div className=\"settings-type\">Rooms</div>\r\n                                <div\r\n                                    id=\"settings-3-0\"\r\n                                    className=\"settings-option\"\r\n                                    onClick={() => this.changeSelected(3, 0)}\r\n                                >\r\n                                    Few\r\n                                </div>\r\n                                <div\r\n                                    id=\"settings-3-1\"\r\n                                    className=\"settings-option\"\r\n                                    onClick={() => this.changeSelected(3, 1)}\r\n                                >\r\n                                    Lots\r\n                                </div>\r\n                            </div>\r\n                            <button onClick={this.reset}>\r\n                                Reset Visualization\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"desc-wrapper\">\r\n                    <div id=\"desc-hide\">{this.showArrow(\"desc\")}</div>\r\n                    <div id=\"desc-panel\">\r\n                        <div id=\"desc-title\" className=\"panel-title\">\r\n                            Description\r\n                        </div>\r\n                        <div id=\"desc-content-wrapper\">\r\n                            {this.showDescContentTitle()}\r\n                            {this.showDescReplayIcon()}\r\n                            {this.showDescContent()}\r\n                            {this.showDescContentPage()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changeSelected(row, o) {\r\n        let temp = this.state.settingOptions;\r\n        temp[row - 1] = o;\r\n\r\n        this.setState({\r\n            settingOptions: temp,\r\n        });\r\n    }\r\n\r\n    reset = () => {\r\n        let g = document.getElementById(\"bsp-split\");\r\n        while (g.childElementCount) {\r\n            let path = g.children[0];\r\n            path.parentNode.removeChild(path);\r\n        }\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        svgRoot.setCurrentTime(0);\r\n        setSliderPos(this.props.visuTimestamps);\r\n\r\n        this.props.bspHandler(null);\r\n        this.props.settingOptionsHandler(this.state.settingOptions);\r\n        this.props.resetStateHandler(true);\r\n    };\r\n\r\n    showArrow = (s) => {\r\n        return (\r\n            <FontAwesomeIcon\r\n                icon={faChevronRight}\r\n                id={s + \"-hide-icon\"}\r\n                className=\"right-icon\"\r\n                onClick={() => this.hideRightPanelHandler(s)}\r\n            />\r\n        );\r\n    };\r\n\r\n    showDescContentTitle = () => {\r\n        let title = \"\";\r\n        switch (this.state.curPage) {\r\n            case 1:\r\n                title = \"Web Intro\";\r\n                break;\r\n            case 2:\r\n                title = \"BSP Intro\";\r\n                break;\r\n            case 3:\r\n                title = \"First Step - Split Tree\";\r\n                break;\r\n            case 4:\r\n                title = \"Second Step - Create Rooms\";\r\n                break;\r\n            case 5:\r\n                title = \"Third Step - Connect Rooms\";\r\n                break;\r\n            case 6:\r\n                title = \"End Note\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return <div id=\"desc-content-title\">{title}</div>;\r\n    };\r\n\r\n    showDescReplayIcon = () => {\r\n        if (this.state.curPage >= 3 && this.state.curPage <= 5) {\r\n            return (\r\n                <FontAwesomeIcon\r\n                    icon={faRedoAlt}\r\n                    id=\"desc-replay-icon\"\r\n                    size=\"lg\"\r\n                    title=\"Replay\"\r\n                    onClick={() => this.replay(this.state.curPage - 3)}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    replay = (i) => {\r\n        this.jumpToStep(i);\r\n        this.activateListener(i);\r\n    };\r\n\r\n    showDescContent = () => {\r\n        switch (this.state.curPage) {\r\n            case 1:\r\n                return (\r\n                    <div id=\"desc-content\">\r\n                        <div className=\"desc-subtitle\">\r\n                            Welcome to Dungeon Generation Visualizer!\r\n                        </div>\r\n                        <p>\r\n                            This web will visualize dungeon generation\r\n                            algorithms (as of now, there’s only 1 algorithm).\r\n                            Through this visualization, we hope that the users\r\n                            may learn something.\r\n                        </p>\r\n                        <br />\r\n                        <div className=\"desc-subtitle\">\r\n                            So, what’s “Dungeon Generation”?\r\n                        </div>\r\n                        <p>\r\n                            Dungeon generation is the act of creating\r\n                            “procedurally generated” dungeon. “Procedural\r\n                            generation” means that the dungeon is created using\r\n                            algorithm, not manually. This means that the dungeon\r\n                            created will be different every time the algorithm\r\n                            is run. This concept is usually used in games,\r\n                            notably rogue-like games.\r\n                        </p>\r\n                        <br />\r\n                        <div>\r\n                            *dungeon: in game terms, it refers to a maze-like\r\n                            structure\r\n                        </div>\r\n                    </div>\r\n                );\r\n\r\n            case 2:\r\n                return (\r\n                    <div id=\"desc-content\">\r\n                        <p>\r\n                            BSP algo is one of the standard implementations of\r\n                            dungeon generation. It is easy to understand and\r\n                            features rectangular rooms.\r\n                        </p>\r\n                        <p>This algo works in 3 steps:</p>\r\n                        <ol>\r\n                            <li>Split Tree</li>\r\n                            <li>Create Rooms</li>\r\n                            <li>Connect Rooms</li>\r\n                        </ol>\r\n                    </div>\r\n                );\r\n\r\n            case 3:\r\n                return (\r\n                    <div id=\"desc-content\">\r\n                        <p>\r\n                            The name of the algorithm derives from this step. In\r\n                            this step, the algo creates a root node with the the\r\n                            size of the area (25x15 in this visualizer). This\r\n                            node is then split recursively to produce multiple\r\n                            random areas, which will each contain a room.\r\n                        </p>\r\n                        <br />\r\n\r\n                        <img\r\n                            src={process.env.PUBLIC_URL + \"/step_1.png\"}\r\n                            alt=\"example\"\r\n                        />\r\n\r\n                        <br />\r\n                        <p>\r\n                            The algo recurse through the root by following these\r\n                            steps:\r\n                        </p>\r\n                        <br />\r\n                        <ol className=\"desc-list-wrapper\">\r\n                            <div\r\n                                id=\"desc-list-dropdown-wrapper-1\"\r\n                                className=\"desc-list-dropdown-wrapper\"\r\n                            >\r\n                                <li className=\"desc-list\">\r\n                                    Pick the split direction randomly (vertical\r\n                                    or horizontal)\r\n                                </li>\r\n                                <FontAwesomeIcon\r\n                                    icon={faChevronDown}\r\n                                    id={\"desc-list-icon-1\"}\r\n                                    className=\"desc-list-icon\"\r\n                                    size=\"xs\"\r\n                                    onClick={() => this.showDropDown(1)}\r\n                                />\r\n                            </div>\r\n\r\n                            <p\r\n                                id=\"desc-list-dropdown-1\"\r\n                                className=\"desc-list-dropdown\"\r\n                            >\r\n                                You can also add another rule such as,\r\n                                forcefully splitting horizontally when the width\r\n                                is double the height. This will make more\r\n                                uniform splits.\r\n                            </p>\r\n\r\n                            <div\r\n                                id=\"desc-list-dropdown-wrapper-2\"\r\n                                className=\"desc-list-dropdown-wrapper\"\r\n                            >\r\n                                <li className=\"desc-list\">\r\n                                    Check if the node is big enough to split\r\n                                </li>\r\n                                <FontAwesomeIcon\r\n                                    icon={faChevronDown}\r\n                                    id={\"desc-list-icon-2\"}\r\n                                    className=\"desc-list-icon\"\r\n                                    size=\"xs\"\r\n                                    onClick={() => this.showDropDown(2)}\r\n                                />\r\n                            </div>\r\n\r\n                            <p\r\n                                id=\"desc-list-dropdown-2\"\r\n                                className=\"desc-list-dropdown\"\r\n                            >\r\n                                The split areas must be able to contain the\r\n                                minimum size of the room. For example, if I have\r\n                                a minimum size of 6, a length of &lt;12 won’t be\r\n                                split.\r\n                            </p>\r\n\r\n                            <div\r\n                                id=\"desc-list-dropdown-wrapper-3\"\r\n                                className=\"desc-list-dropdown-wrapper\"\r\n                            >\r\n                                <li className=\"desc-list\">\r\n                                    If true, pick the split point randomly from\r\n                                    the length or width of the node\r\n                                </li>\r\n                                <FontAwesomeIcon\r\n                                    icon={faChevronDown}\r\n                                    id=\"desc-list-icon-3\"\r\n                                    className=\"desc-list-icon\"\r\n                                    size=\"xs\"\r\n                                    onClick={() => this.showDropDown(3)}\r\n                                />\r\n                            </div>\r\n\r\n                            <p\r\n                                id=\"desc-list-dropdown-3\"\r\n                                className=\"desc-list-dropdown\"\r\n                            >\r\n                                You can either make it more uniform (e.g. by\r\n                                picking the splitting point of 40%-60% from the\r\n                                length) or more diverse (e.g. by picking the\r\n                                splitting point of 20%-80% from the length)\r\n                            </p>\r\n\r\n                            <li className=\"desc-list\">\r\n                                Then, run the same algo from the node’s children\r\n                            </li>\r\n                            <li className=\"desc-list\">Else, return null</li>\r\n                        </ol>\r\n                        <br />\r\n                        <p>\r\n                            Finishing this step, we’ll get the several areas\r\n                            which will be the place where we create our rooms.{\" \"}\r\n                        </p>\r\n                    </div>\r\n                );\r\n            case 4:\r\n                return (\r\n                    <div id=\"desc-content\">\r\n                        <p>\r\n                            Next, we need to create the rooms for the areas\r\n                            we’ve split. The step is done by looping through the\r\n                            leaf nodes (the nodes which don’t have any child)\r\n                            created from the first step. The rooms are created\r\n                            by simply picking a random width and height from the\r\n                            available range.\r\n                        </p>\r\n                        <p>\r\n                            Usually, there’s a minimum room size to prevent\r\n                            creating a very small room. (In this case, the min\r\n                            room size is 2, so the smallest room possible is a\r\n                            2x2)\r\n                        </p>\r\n                    </div>\r\n                );\r\n            case 5:\r\n                return (\r\n                    <div id=\"desc-content\">\r\n                        <p>\r\n                            Lastly, connect the created rooms. The algo first\r\n                            connect the rooms that are siblings, then it goes up\r\n                            level by level, until it reaches the root. The algo\r\n                            recurse from the root by following these steps:\r\n                        </p>\r\n                        <br />\r\n                        <ol className=\"desc-list-wrapper\">\r\n                            <li className=\"desc-list\">\r\n                                Check if the left and right child has been\r\n                                connected\r\n                            </li>\r\n                            <li className=\"desc-list\">\r\n                                If false, connect the rooms in left and right\r\n                                child first\r\n                            </li>\r\n                            <div\r\n                                id=\"desc-list-dropdown-wrapper-3\"\r\n                                className=\"desc-list-dropdown-wrapper\"\r\n                            >\r\n                                <li className=\"desc-list\">\r\n                                    Then, check the direction of the split\r\n                                </li>\r\n                                <FontAwesomeIcon\r\n                                    icon={faChevronDown}\r\n                                    id=\"desc-list-icon-3\"\r\n                                    className=\"desc-list-icon\"\r\n                                    size=\"xs\"\r\n                                    onClick={() => this.showDropDown(3)}\r\n                                />\r\n                            </div>\r\n\r\n                            <div\r\n                                id=\"desc-list-dropdown-3\"\r\n                                className=\"desc-list-dropdown\"\r\n                            >\r\n                                <p>\r\n                                    This is to determine the side we could take.\r\n                                    For example, a vertical split means we take\r\n                                    the right side of the rooms in the left\r\n                                    child and the left side of rooms in the\r\n                                    right child.\r\n                                </p>\r\n                                <br />\r\n                                <img\r\n                                    src={\r\n                                        process.env.PUBLIC_URL +\r\n                                        \"/example_1.png\"\r\n                                    }\r\n                                    alt=\"example_1\"\r\n                                />\r\n                                <br />\r\n                                <div>Example with vertical split</div>\r\n                            </div>\r\n\r\n                            <div\r\n                                id=\"desc-list-dropdown-wrapper-4\"\r\n                                className=\"desc-list-dropdown-wrapper\"\r\n                            >\r\n                                <li className=\"desc-list\">\r\n                                    Remove the sides that are unreachable\r\n                                </li>\r\n                                <FontAwesomeIcon\r\n                                    icon={faChevronDown}\r\n                                    id=\"desc-list-icon-4\"\r\n                                    className=\"desc-list-icon\"\r\n                                    size=\"xs\"\r\n                                    onClick={() => this.showDropDown(4)}\r\n                                />\r\n                            </div>\r\n\r\n                            <p\r\n                                id=\"desc-list-dropdown-4\"\r\n                                className=\"desc-list-dropdown\"\r\n                            >\r\n                                In cases where the left and right child has\r\n                                several rooms, there are also several sides that\r\n                                are taken. To prevent clipping, we just take the\r\n                                sides that are closer to the node’s split point.\r\n                            </p>\r\n\r\n                            <div\r\n                                id=\"desc-list-dropdown-wrapper-5\"\r\n                                className=\"desc-list-dropdown-wrapper\"\r\n                            >\r\n                                <li className=\"desc-list\">\r\n                                    Pick a random point from the available sides\r\n                                </li>\r\n                                <FontAwesomeIcon\r\n                                    icon={faChevronDown}\r\n                                    id=\"desc-list-icon-5\"\r\n                                    className=\"desc-list-icon\"\r\n                                    size=\"xs\"\r\n                                    onClick={() => this.showDropDown(5)}\r\n                                />\r\n                            </div>\r\n\r\n                            <p\r\n                                id=\"desc-list-dropdown-5\"\r\n                                className=\"desc-list-dropdown\"\r\n                            >\r\n                                In my version of the algo, the child’s connector\r\n                                is also included. With this, there could be\r\n                                T-shaped intersections, instead of solely long\r\n                                corridors.\r\n                            </p>\r\n\r\n                            <div\r\n                                id=\"desc-list-dropdown-wrapper-6\"\r\n                                className=\"desc-list-dropdown-wrapper\"\r\n                            >\r\n                                <li className=\"desc-list\">\r\n                                    Connect the points\r\n                                </li>\r\n                                <FontAwesomeIcon\r\n                                    icon={faChevronDown}\r\n                                    id=\"desc-list-icon-6\"\r\n                                    className=\"desc-list-icon\"\r\n                                    size=\"xs\"\r\n                                    onClick={() => this.showDropDown(6)}\r\n                                />\r\n                            </div>\r\n\r\n                            <p\r\n                                id=\"desc-list-dropdown-6\"\r\n                                className=\"desc-list-dropdown\"\r\n                            >\r\n                                In this version, I hard code the algo (check the\r\n                                github for more details). This could be made\r\n                                easier by using pathfinding algorithm.\r\n                            </p>\r\n                        </ol>\r\n                    </div>\r\n                );\r\n            case 6:\r\n                return (\r\n                    <div id=\"desc-content\">\r\n                        <p>\r\n                            Done! That’s the basic version of dungeon generation\r\n                            using binary split partitioning tree. The algo could\r\n                            be customized to fit the developer’s needs. For\r\n                            example,{\" \"}\r\n                        </p>\r\n                        <br />\r\n                        <ul>\r\n                            <li>\r\n                                Using pre-generated rooms rather than creating\r\n                                it randomly\r\n                            </li>\r\n                            <li>\r\n                                Adding other needed game elements like, spawn\r\n                                locations, treasure, stair to next level, etc.\r\n                            </li>\r\n                            <li>\r\n                                As mentioned before, using pathfinding\r\n                                algorithm. With it, the connectors may become\r\n                                more diverse.\r\n                            </li>\r\n                            <li>And many more</li>\r\n                        </ul>\r\n                        <br />\r\n                        <p>\r\n                            Thanks for reading this simple tutorial. Feel free\r\n                            to explore the visualization to understand the algo\r\n                            deeper (or even look at the code itself in the\r\n                            github page). Feedbacks are appreciated.\r\n                        </p>\r\n                    </div>\r\n                );\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    showDropDown = (i) => {\r\n        let wrapper = document.getElementById(\r\n            \"desc-list-dropdown-wrapper-\" + i\r\n        );\r\n        let icon = document.getElementById(\"desc-list-icon-\" + i);\r\n        let detail = document.getElementById(\"desc-list-dropdown-\" + i);\r\n\r\n        if (icon.style.transform === \"rotate(180deg)\") {\r\n            //hide\r\n            icon.style.transform = \"rotate(0deg)\";\r\n            detail.style.maxHeight = \"0px\";\r\n            if (detail.classList.contains(\"selected\"))\r\n                detail.classList.remove(\"selected\");\r\n            if (wrapper.classList.contains(\"selected\")) {\r\n                wrapper.classList.remove(\"selected\");\r\n                wrapper.children[0].style.fontWeight = \"normal\";\r\n            }\r\n        } else {\r\n            //show\r\n            this.resetDropDown();\r\n            icon.style.transform = \"rotate(180deg)\";\r\n            detail.style.maxHeight = \"400px\";\r\n            detail.classList.add(\"selected\");\r\n            wrapper.classList.add(\"selected\");\r\n            wrapper.children[0].style.fontWeight = \"bold\";\r\n        }\r\n    };\r\n\r\n    resetDropDown = () => {\r\n        for (let i = 1; i <= 6; i++) {\r\n            let wrapper = document.getElementById(\r\n                \"desc-list-dropdown-wrapper-\" + i\r\n            );\r\n            if (wrapper === null) continue;\r\n            let icon = document.getElementById(\"desc-list-icon-\" + i);\r\n            let detail = document.getElementById(\"desc-list-dropdown-\" + i);\r\n\r\n            if (icon.style.transform === \"rotate(180deg)\") {\r\n                //hide\r\n                icon.style.transform = \"rotate(0deg)\";\r\n                detail.style.height = \"0px\";\r\n                if (detail.classList.contains(\"selected\"))\r\n                    detail.classList.remove(\"selected\");\r\n                if (wrapper.classList.contains(\"selected\"))\r\n                    wrapper.classList.remove(\"selected\");\r\n            }\r\n        }\r\n    };\r\n\r\n    showDescContentPage = () => {\r\n        let curPage = this.state.curPage;\r\n\r\n        return (\r\n            <div id=\"desc-content-page-wrapper\">\r\n                <FontAwesomeIcon\r\n                    icon={faLongArrowAltLeft}\r\n                    id=\"desc-left-icon\"\r\n                    className=\"right-icon\"\r\n                    size=\"lg\"\r\n                    onClick={this.prevPage}\r\n                    title=\"Previous Page\"\r\n                />\r\n                <div id=\"desc-content-page\"> {curPage + \" / 6\"}</div>\r\n                <FontAwesomeIcon\r\n                    icon={faLongArrowAltRight}\r\n                    id=\"desc-right-icon\"\r\n                    className=\"right-icon\"\r\n                    size=\"lg\"\r\n                    onClick={this.nextPage}\r\n                    title=\"Next Page\"\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    prevPage = () => {\r\n        if (this.state.curPage !== 1) {\r\n            this.setState({\r\n                curPage: this.state.curPage - 1,\r\n            });\r\n        }\r\n    };\r\n\r\n    nextPage = () => {\r\n        if (this.state.curPage !== 6) {\r\n            this.setState({\r\n                curPage: this.state.curPage + 1,\r\n            });\r\n        }\r\n    };\r\n\r\n    hideRightPanelHandler = (s) => {\r\n        let e = document.getElementById(s + \"-panel\");\r\n        let h = document.getElementById(s + \"-hide-icon\");\r\n\r\n        if (e.style.width === \"0px\") {\r\n            //show\r\n            e.style.width = \"350px\";\r\n            h.style.transform = \"rotate(0deg)\";\r\n        } else {\r\n            //hide\r\n            e.style.width = \"0px\";\r\n            h.style.transform = \"rotate(-180deg)\";\r\n        }\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./controlPanel.css\";\r\nimport ControlPanelSlider from \"./controlPanelSlider\";\r\nimport { setSliderPos } from \"./controlPanelSlider\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faPlay,\r\n    faPause,\r\n    faStop,\r\n    faStepForward,\r\n    faStepBackward,\r\n    // faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default class ControlPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            curAlgo: \"bsp\",\r\n            visuState: \"pause\",\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.resetState) {\r\n            //icon Play\r\n            this.setState({\r\n                visuState: \"pause\",\r\n            });\r\n            this.props.resetStateHandler(false);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"control-panel\">\r\n                <div id=\"control-wrapper\">\r\n                    <div id=\"control-algo-title\">BINARY SPACE PARTITIONING</div>\r\n                    {this.showControlButtons()}\r\n                </div>\r\n                <ControlPanelSlider\r\n                    visuState={this.state.visuState}\r\n                    visuTimestamps={this.props.visuTimestamps}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showControlButtons = () => {\r\n        return (\r\n            <div id=\"control-icons\">\r\n                {/* <FontAwesomeIcon\r\n                    icon={faRedoAlt}\r\n                    className=\"icons\"\r\n                    size=\"lg\"\r\n                    onClick={this.reset}\r\n                    title=\"Reset\"\r\n                /> */}\r\n                <FontAwesomeIcon\r\n                    icon={faStepBackward}\r\n                    className=\"icons\"\r\n                    onClick={this.stepBackward}\r\n                    title=\"Prev\"\r\n                />\r\n\r\n                {this.showPausePlayButton()}\r\n\r\n                <FontAwesomeIcon\r\n                    icon={faStepForward}\r\n                    className=\"icons\"\r\n                    onClick={this.stepForward}\r\n                    title=\"Next\"\r\n                />\r\n                <FontAwesomeIcon\r\n                    icon={faStop}\r\n                    id=\"stop-icon\"\r\n                    className=\"icons\"\r\n                    size=\"lg\"\r\n                    onClick={this.stop}\r\n                    title=\"Stop\"\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ visuState: \"pause\" });\r\n\r\n        let g = document.getElementById(\"bsp-split\");\r\n        while (g.childElementCount) {\r\n            let path = g.children[0];\r\n            path.parentNode.removeChild(path);\r\n        }\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        svgRoot.setCurrentTime(0);\r\n        setSliderPos(this.props.visuTimestamps);\r\n\r\n        this.props.bspHandler(null);\r\n    };\r\n\r\n    stepBackward = () => {\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        let curTime = Math.round(svgRoot.getCurrentTime() * 1000);\r\n        let ts = this.props.visuTimestamps;\r\n        //preventing overflow\r\n        if (curTime <= 0) return;\r\n\r\n        let nextIdx = ts.findIndex((t) => t >= curTime);\r\n        let prevTime = ts[nextIdx - 1] / 1000;\r\n\r\n        svgRoot.setCurrentTime(prevTime);\r\n\r\n        setSliderPos(this.props.visuTimestamps);\r\n    };\r\n\r\n    showPausePlayButton() {\r\n        return (\r\n            <FontAwesomeIcon\r\n                icon={this.state.visuState === \"start\" ? faPause : faPlay}\r\n                className=\"icons\"\r\n                size=\"lg\"\r\n                onClick={this.pausePlay}\r\n                title={this.state.visuState === \"start\" ? \"Pause\" : \"Play\"}\r\n            />\r\n        );\r\n    }\r\n\r\n    pausePlay = () => {\r\n        if (this.state.visuState === \"pause\")\r\n            this.setState({ visuState: \"start\" });\r\n        else if (this.state.visuState === \"start\")\r\n            this.setState({ visuState: \"pause\" });\r\n\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        if (svgRoot === null) return;\r\n\r\n        if (svgRoot.animationsPaused()) {\r\n            svgRoot.unpauseAnimations();\r\n        } else {\r\n            svgRoot.pauseAnimations();\r\n        }\r\n    };\r\n\r\n    stepForward = () => {\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n        let curTime = Math.round(svgRoot.getCurrentTime() * 1000);\r\n        let ts = this.props.visuTimestamps;\r\n        //preventing overflow\r\n        if (curTime >= ts[ts.length - 1]) return;\r\n\r\n        let nextTime = ts.find((t) => t > curTime) / 1000;\r\n        svgRoot.setCurrentTime(nextTime);\r\n\r\n        setSliderPos(this.props.visuTimestamps);\r\n    };\r\n\r\n    stop = () => {\r\n        let svgRoot = document.getElementById(\"svgRoot\");\r\n\r\n        svgRoot.setCurrentTime(0);\r\n        setSliderPos(this.props.visuTimestamps);\r\n\r\n        this.setState({ visuState: \"pause\" });\r\n\r\n        if (!svgRoot.animationsPaused()) {\r\n            svgRoot.pauseAnimations();\r\n        }\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\n// import LeftPanel from \"./leftPanel.jsx\";\r\nimport RightPanel from \"./rightPanel.jsx\";\r\nimport ControlPanel from \"./controlPanel.jsx\";\r\n\r\nexport default class ContentLayout extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            resetState: true,\r\n        };\r\n    }\r\n\r\n    resetStateHandler = (v) => {\r\n        this.setState({\r\n            resetState: v,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"content-layout-wrapper\">\r\n                <ControlPanel\r\n                    bspHandler={this.props.bspHandler}\r\n                    visuTimestamps={this.props.visuTimestamps}\r\n                    resetState={this.state.resetState}\r\n                    resetStateHandler={this.resetStateHandler}\r\n                />\r\n                {/* <LeftPanel\r\n                    visuTimestamps={this.props.visuTimestamps}\r\n                    visuTimestampsSplit={this.props.visuTimestampsSplit}\r\n                /> */}\r\n                <RightPanel\r\n                    visuTimestamps={this.props.visuTimestamps}\r\n                    visuTimestampsSplit={this.props.visuTimestampsSplit}\r\n                    settingOptionsHandler={this.props.settingOptionsHandler}\r\n                    bspHandler={this.props.bspHandler}\r\n                    resetStateHandler={this.resetStateHandler}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"./navbar.jsx\";\r\nimport Grid from \"./grid.jsx\";\r\nimport ContentLayout from \"./ContentLayout\";\r\n\r\nclass main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            curAlgo: \"bsp\",\r\n            visuSpeed: 750, //750 px / sec\r\n            bspTree: null,\r\n            visuTimestamps: null,\r\n            visuTimestampsSplit: null,\r\n            settingOptions: [0, 0, 0],\r\n        };\r\n    }\r\n\r\n    bspHandler = (tree, ts = null, tsSplit = null) => {\r\n        this.setState({\r\n            bspTree: tree,\r\n            visuTimestamps: ts,\r\n            visuTimestampsSplit: tsSplit,\r\n        });\r\n    };\r\n\r\n    settingOptionsHandler = (o) => {\r\n        let tempSpeed = 750;\r\n        if (o[0] === 1) tempSpeed = 1500;\r\n        this.setState({\r\n            settingOptions: o,\r\n            visuSpeed: tempSpeed,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"main-wrapper\">\r\n                <Navbar />\r\n                <ContentLayout\r\n                    bspHandler={this.bspHandler}\r\n                    visuTimestamps={this.state.visuTimestamps}\r\n                    visuTimestampsSplit={this.state.visuTimestampsSplit}\r\n                    settingOptionsHandler={this.settingOptionsHandler}\r\n                />\r\n                <Grid\r\n                    algo={this.state.curAlgo}\r\n                    visuState={this.state.visuState}\r\n                    visuSpeed={this.state.visuSpeed}\r\n                    bspTree={this.state.bspTree}\r\n                    bspHandler={this.bspHandler}\r\n                    settingOptions={this.state.settingOptions}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./Components/main.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}