{"version":3,"sources":["Components/navbar.jsx","Components/BSP/leaf.js","Components/BSP/BSP.js","Components/BSP/SVGComponents.jsx","Components/grid.jsx","Components/main.jsx","serviceWorker.js","index.js"],"names":["Navbar","props","state","curAlgo","visuState","id","href","this","showButton","onClick","visualizeBSPSplit","resetVisualization","setState","g","document","getElementById","console","log","children","durTotal","i","path","dur","getAttribute","substring","length","setTimeout","beginElement","childElementCount","parentNode","removeChild","resetHandler","Component","ConvertedLeaf","x","y","width","height","isSplitVertical","isSplitHorizontal","splitPos","getSize","getAll","Leaf","leftChild","rightChild","lowerLim","upperLim","minWidth","minHeight","getX","getY","getWidth","getHeight","getLeftChild","getRightChild","getIsSplitVertical","getIsSplitHorizontal","getSplitPos","Math","floor","random","splitVertical","splitHorizontal","boundary","rand","BSP","tree","root","q","push","split","shift","splitRoot","BSPFirstSplitPath","convertedLeaf","visuSpeed","pathString","getRectangleSplitPath","pathStyle","strokeDasharray","strokeDashoffset","getVisualizationDuration","d","style","getAnimateTag","BSPSplitPath","x1","y1","x2","y2","getLineSplitPath","attributeType","attributeName","to","fill","begin","BSPSplitSVG","col","row","leaves","curState","column","gridStyle","winWidth","winHeight","className","node","convertLeaf","createFirstSplitPath","paths","leaf","key","createSplitPath","interval","gridWidth","gridHeight","winXCenter","Grid","randNum","createGrid","grid","tdStyle","j","window","innerWidth","innerHeight","updateWindowDimensions","bind","addEventListener","removeEventListener","curWidth","curHeight","main","reset","algo","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5835a22a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            curAlgo: \"BSP\",\r\n            visuState: \"stop\",\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <div id=\"title\">Procedural Dungeon Generation Visualizer</div>\r\n                <ul id=\"nav\">\r\n                    <li>\r\n                        <a href=\"#\">1</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#\">2</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#\">3</a>\r\n                    </li>\r\n                </ul>\r\n\r\n                {/* <button id=\"vis\" onClick={() => this.props.visualizeAlgo()}>\r\n                    Visualize BSP\r\n                </button> */}\r\n\r\n                {this.showButton()}\r\n            </header>\r\n        );\r\n    }\r\n\r\n    showButton() {\r\n        if (this.state.visuState === \"stop\")\r\n            return (\r\n                <button id=\"vis\" onClick={() => this.visualizeBSPSplit()}>\r\n                    Visualize BSP\r\n                </button>\r\n            );\r\n        if (this.state.visuState === \"start\")\r\n            return (\r\n                <button id=\"vis\" onClick={() => this.resetVisualization()}>\r\n                    Reset Visualization\r\n                </button>\r\n            );\r\n    }\r\n\r\n    visualizeBSPSplit() {\r\n        this.setState({ visuState: \"start\" });\r\n\r\n        let g = document.getElementById(\"BSP-split\");\r\n        console.log(g);\r\n        console.log(g.children);\r\n        // console.log(g.children.length);\r\n\r\n        let durTotal = 0;\r\n\r\n        for (let i = 0; i < g.children.length; i++) {\r\n            let path = g.children[i];\r\n            let dur = path.children[0].getAttribute(\"dur\");\r\n\r\n            //trim the word s\r\n            dur = dur.substring(0, dur.length - 1);\r\n            dur *= 1000;\r\n\r\n            setTimeout(() => {\r\n                path.children[0].beginElement();\r\n            }, durTotal + i * 200);\r\n\r\n            durTotal += dur;\r\n        }\r\n    }\r\n\r\n    resetVisualization() {\r\n        this.setState({ visuState: \"stop\" });\r\n\r\n        let g = document.getElementById(\"BSP-split\");\r\n        while (g.childElementCount) {\r\n            let path = g.children[0];\r\n            path.parentNode.removeChild(path);\r\n        }\r\n        this.props.resetHandler();\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n","//Classes in javascript is weird. Using classes in this project is fine but,\r\n//it's better to benefit from the prototype aspect of javascript than the classics.\r\n\r\nclass Leaf {\r\n    leftChild = null;\r\n    rightChild = null;\r\n\r\n    isSplitVertical = false;\r\n    isSplitHorizontal = false;\r\n\r\n    splitPos = 0;\r\n\r\n    constructor(\r\n        x,\r\n        y,\r\n        width,\r\n        height,\r\n        isSplitVertical = false,\r\n        isSplitHorizontal = false,\r\n        splitPos = 0\r\n    ) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.isSplitVertical = isSplitVertical;\r\n        this.isSplitHorizontal = isSplitHorizontal;\r\n        this.splitPos = splitPos;\r\n    }\r\n\r\n    split() {\r\n        if (this.leftChild != null || this.rightChild != null) return false;\r\n\r\n        //if l or w is 50% larger, force split. Else, the split is random.\r\n        if (this.width / this.height >= 1.5) this.isSplitVertical = true;\r\n        else if (this.height / this.width >= 1.5) this.isSplitHorizontal = true;\r\n        else {\r\n            let rand = Math.floor(Math.random() * 2);\r\n            if (rand) this.isSplitVertical = true;\r\n            else this.isSplitHorizontal = true;\r\n        }\r\n\r\n        if (this.isSplitVertical) return this.splitVertical();\r\n        else if (this.isSplitHorizontal) return this.splitHorizontal();\r\n    }\r\n\r\n    //lowest and highest multiplier for random\r\n    //these limits are needed to either make the splits size vary or similar\r\n    lowerLim = 0.3;\r\n    upperLim = 0.7;\r\n\r\n    //smallest possible width and height\r\n    minWidth = 4;\r\n    minHeight = 4;\r\n\r\n    //TODO: convert these limits to props\r\n\r\n    splitVertical() {\r\n        //width is too small to be splitted\r\n        if (this.width < this.minWidth * 2) return false;\r\n\r\n        let boundary = Math.floor(\r\n            this.width - this.width * (this.lowerLim + 1.0 - this.upperLim)\r\n        );\r\n        let rand = Math.floor(Math.random() * boundary);\r\n        rand += Math.floor(this.width * this.lowerLim);\r\n\r\n        //preventing rand being lower than the min size\r\n        if (rand < this.minWidth || this.width - rand < this.minWidth)\r\n            rand = this.minWidth;\r\n\r\n        this.splitPos = rand;\r\n\r\n        this.leftChild = new Leaf(this.x, this.y, rand, this.height);\r\n        this.rightChild = new Leaf(\r\n            this.x + rand,\r\n            this.y,\r\n            this.width - rand,\r\n            this.height\r\n        );\r\n        return true;\r\n    }\r\n\r\n    splitHorizontal() {\r\n        //height is too small to be splitted\r\n        if (this.height < this.minHeight * 2) return false;\r\n\r\n        let boundary = Math.floor(\r\n            this.height - this.height * (this.lowerLim + 1.0 - this.upperLim)\r\n        );\r\n        let rand = Math.floor(Math.random() * boundary);\r\n        rand += Math.floor(this.height * this.lowerLim);\r\n\r\n        //preventing rand being lower than the min size\r\n        if (rand < this.minHeight || this.height - rand < this.minHeight)\r\n            rand = this.minHeight;\r\n\r\n        this.splitPos = rand;\r\n\r\n        this.leftChild = new Leaf(this.x, this.y, this.width, rand);\r\n        this.rightChild = new Leaf(\r\n            this.x,\r\n            this.y + rand,\r\n            this.width,\r\n            this.height - rand\r\n        );\r\n        return true;\r\n    }\r\n\r\n    toString() {\r\n        console.log(\"x: \" + this.x + \" y: \" + this.y);\r\n        console.log(\"width: \" + this.width + \" height: \" + this.height);\r\n    }\r\n\r\n    getX = () => this.x;\r\n    getY = () => this.y;\r\n    getWidth = () => this.width;\r\n    getHeight = () => this.height;\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n    getLeftChild = () => this.leftChild;\r\n    getRightChild = () => this.rightChild;\r\n    getIsSplitVertical = () => this.isSplitVertical;\r\n    getIsSplitHorizontal = () => this.isSplitHorizontal;\r\n    getSplitPos = () => this.splitPos;\r\n}\r\n\r\nclass ConvertedLeaf {\r\n    constructor(\r\n        x,\r\n        y,\r\n        width,\r\n        height,\r\n        isSplitVertical,\r\n        isSplitHorizontal,\r\n        splitPos\r\n    ) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.isSplitVertical = isSplitVertical;\r\n        this.isSplitHorizontal = isSplitHorizontal;\r\n        this.splitPos = splitPos;\r\n    }\r\n\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n\r\n    getAll = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n            isSplitVertical: this.isSplitVertical,\r\n            isSplitHorizontal: this.isSplitHorizontal,\r\n            splitPos: this.splitPos,\r\n        };\r\n    };\r\n}\r\n\r\nexport default Leaf;\r\n\r\nexport { ConvertedLeaf };\r\n","import Leaf from \"./leaf.js\";\r\n\r\nfunction splitRoot(root, tree) {\r\n    //level order tree traversal\r\n    let q = [];\r\n    q.push(root);\r\n    while (q.length !== 0) {\r\n        tree.push(q[0]);\r\n\r\n        if (q[0].split()) {\r\n            q.push(q[0].getLeftChild());\r\n            q.push(q[0].getRightChild());\r\n            // tree.push(q[0].getLeftChild());\r\n            // tree.push(q[0].getRightChild());\r\n        }\r\n        q.shift();\r\n    }\r\n    return tree;\r\n}\r\n\r\nfunction BSP(x, y, width, height) {\r\n    var tree = [];\r\n    var root = new Leaf(x, y, width, height);\r\n\r\n    tree = splitRoot(root, tree);\r\n\r\n    return tree;\r\n\r\n    //only get leaves (last node)\r\n    /*\r\n    var leaves = [];\r\n\r\n    tree.forEach((l) => {\r\n        if (l.getRightChild());\r\n        else leaves.push(l);\r\n    });\r\n\r\n    return leaves;\r\n    */\r\n}\r\n\r\nexport default BSP;\r\n","import React, { Component } from \"react\";\r\nimport \"./SVGComponents.css\";\r\n\r\nclass BSPFirstSplitPath extends Component {\r\n    render() {\r\n        const { convertedLeaf, visuSpeed } = this.props;\r\n\r\n        let { x, y, width, height } = convertedLeaf.getSize();\r\n\r\n        let pathString = getRectangleSplitPath(x, y, width, height);\r\n\r\n        let length = (width + height) * 2;\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n\r\n        return (\r\n            <path id=\"BSP-split-path-0\" d={pathString} style={pathStyle}>\r\n                {getAnimateTag(dur)}\r\n            </path>\r\n        );\r\n    }\r\n}\r\nclass BSPSplitPath extends Component {\r\n    render() {\r\n        const { id, convertedLeaf, visuSpeed } = this.props;\r\n\r\n        let {\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            isSplitVertical,\r\n            isSplitHorizontal,\r\n            splitPos,\r\n        } = convertedLeaf.getAll();\r\n\r\n        let { x1, y1, x2, y2 } = getLineSplitPath(\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            isSplitVertical,\r\n            isSplitHorizontal,\r\n            splitPos\r\n        );\r\n\r\n        let length = 0;\r\n        if (isSplitVertical) length = height;\r\n        else length = width;\r\n\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n\r\n        return (\r\n            <line id={id} x1={x1} y1={y1} x2={x2} y2={y2} style={pathStyle}>\r\n                {getAnimateTag(dur)}\r\n            </line>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getAnimateTag(dur) {\r\n    return (\r\n        <animate\r\n            attributeType=\"CSS\"\r\n            attributeName=\"stroke-dashoffset\"\r\n            to=\"0\"\r\n            dur={dur + \"s\"}\r\n            fill=\"freeze\"\r\n            begin=\"indefinite\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction getVisualizationDuration(visuSpeed, length) {\r\n    return length / visuSpeed;\r\n}\r\n\r\nexport { BSPFirstSplitPath, BSPSplitPath };\r\n\r\nfunction getRectangleSplitPath(x, y, width, height) {\r\n    return (\r\n        \"M\" +\r\n        x +\r\n        \" \" +\r\n        y +\r\n        \" L\" +\r\n        (x + width) +\r\n        \" \" +\r\n        y +\r\n        \" L\" +\r\n        (x + width) +\r\n        \" \" +\r\n        (y + height) +\r\n        \" L\" +\r\n        x +\r\n        \" \" +\r\n        (y + height) +\r\n        \" L\" +\r\n        x +\r\n        \" \" +\r\n        y +\r\n        \" Z\"\r\n    );\r\n}\r\n\r\nfunction getLineSplitPath(\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    isSplitVertical,\r\n    isSplitHorizontal,\r\n    splitPos\r\n) {\r\n    if (isSplitVertical)\r\n        return {\r\n            x1: x + splitPos,\r\n\r\n            y1: y,\r\n\r\n            x2: x + splitPos,\r\n\r\n            y2: y + height,\r\n        };\r\n    return {\r\n        x1: x,\r\n        y1: y + splitPos,\r\n        x2: x + width,\r\n        y2: y + splitPos,\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport BSP from \"./BSP/BSP.js\";\r\nimport { BSPFirstSplitPath, BSPSplitPath } from \"./BSP/SVGComponents.jsx\";\r\nimport { ConvertedLeaf } from \"./BSP/leaf.js\";\r\nimport Leaf from \"./BSP/leaf.js\";\r\nimport \"./grid.css\";\r\n\r\nclass Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            winWidth: window.innerWidth,\r\n            //99 is from padding (30+30) and 39 of button height\r\n            //TODO: convert magic number\r\n            winHeight: window.innerHeight - 99,\r\n            row: 15,\r\n            column: 25,\r\n            interval: 30,\r\n        };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //get new window Width and Height\r\n        this.updateWindowDimensions();\r\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        let curWidth = window.innerWidth;\r\n        //99 is from padding (30+30) and 39 of button height\r\n        let curHeight = window.innerHeight - 99;\r\n        this.setState({\r\n            winWidth: curWidth,\r\n            winHeight: curHeight,\r\n        });\r\n    }\r\n\r\n    randNum = () => Math.random() * 1000;\r\n\r\n    render() {\r\n        var gridStyle = {\r\n            width: this.state.winWidth,\r\n            height: this.state.winHeight,\r\n        };\r\n\r\n        return (\r\n            <div key={this.randNum()} id=\"visualizer\">\r\n                <div id=\"grid\" style={gridStyle}>\r\n                    <table>\r\n                        <tbody>{this.createGrid()}</tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <BSPSplitSVG\r\n                    curState={this.state}\r\n                    visuSpeed={this.props.visuSpeed}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    createGrid = () => {\r\n        let grid = [];\r\n        let tdStyle = {\r\n            width: this.state.interval + \"px\",\r\n            height: this.state.interval + \"px\",\r\n        };\r\n\r\n        // Outer loop to create parent\r\n        for (let i = 0; i < this.state.row; i++) {\r\n            let children = [];\r\n            //Inner loop to create children\r\n            for (let j = 0; j < this.state.column; j++) {\r\n                children.push(\r\n                    <td\r\n                        id={`node-${i + 1}-${j + 1}`}\r\n                        key={`node-${i + 1}-${j + 1}`}\r\n                        style={tdStyle}\r\n                    ></td>\r\n                );\r\n            }\r\n            //Create the parent and add the children\r\n            grid.push(\r\n                <tr id={`row-${i + 1}`} key={`row-${i + 1}`}>\r\n                    {children}\r\n                </tr>\r\n            );\r\n        }\r\n        return grid;\r\n    };\r\n}\r\n\r\nfunction BSPSplitSVG(props) {\r\n    const leaves = calculateBSP(props.curState.column, props.curState.row);\r\n    // var leaves = [];\r\n    // leaves.push(new Leaf(0, 0, 25, 15, true, false, 10));\r\n    // leaves.push(new Leaf(0, 0, 10, 15, false, true, 8));\r\n    // leaves.push(new Leaf(10, 0, 15, 15, false, true, 3));\r\n    console.log(leaves);\r\n    // console.log(props.curState);\r\n\r\n    var gridStyle = {\r\n        width: props.curState.winWidth,\r\n        height: props.curState.winHeight,\r\n    };\r\n\r\n    return (\r\n        <svg style={gridStyle}>\r\n            <g id=\"BSP-split\" className=\"BSP-svg-paths\">\r\n                {createFirstSplitPath(\r\n                    leaves[0],\r\n                    props.curState,\r\n                    props.visuSpeed\r\n                )}\r\n                {createSplitPath(leaves, props.curState, props.visuSpeed)}\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nfunction createFirstSplitPath(node, curState, visuSpeed) {\r\n    let convertedLeaf = convertLeaf(node, curState);\r\n    return (\r\n        <BSPFirstSplitPath\r\n            convertedLeaf={convertedLeaf}\r\n            visuSpeed={visuSpeed}\r\n        ></BSPFirstSplitPath>\r\n    );\r\n}\r\n\r\nfunction createSplitPath(leaves, curState, visuSpeed) {\r\n    let paths = [];\r\n    for (let i = 0; i < leaves.length; i++) {\r\n        let leaf = leaves[i];\r\n        // console.log(i + \" splitPos: \" + leaf.getSplitPos());\r\n        if (leaf.getSplitPos() === 0) continue;\r\n\r\n        let convertedLeaf = convertLeaf(leaf, curState);\r\n        let id = \"BSP-split-path-\" + (i + 1);\r\n        paths.push(\r\n            <BSPSplitPath\r\n                key={id}\r\n                id={id}\r\n                convertedLeaf={convertedLeaf}\r\n                visuSpeed={visuSpeed}\r\n            ></BSPSplitPath>\r\n        );\r\n    }\r\n    return paths;\r\n}\r\n\r\nfunction calculateBSP(col, row) {\r\n    return BSP(0, 0, col, row);\r\n}\r\n\r\nfunction convertLeaf(leaf, curState) {\r\n    const interval = curState.interval;\r\n    const gridWidth = (curState.column * interval) / 2;\r\n    const gridHeight = (curState.row * interval) / 2;\r\n    const winXCenter = curState.winWidth / 2;\r\n    const winYCenter = curState.winHeight / 2;\r\n\r\n    var x = winXCenter - gridWidth;\r\n    var y = winYCenter - gridHeight;\r\n\r\n    return new ConvertedLeaf(\r\n        x + leaf.getX() * interval,\r\n        y + leaf.getY() * interval,\r\n        leaf.getWidth() * interval,\r\n        leaf.getHeight() * interval,\r\n        leaf.getIsSplitVertical(),\r\n        leaf.getIsSplitHorizontal(),\r\n        leaf.getSplitPos() * interval\r\n    );\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"./navbar.jsx\";\r\nimport Grid from \"./grid.jsx\";\r\n\r\nclass main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            curAlgo: \"BSP\",\r\n            visuState: \"stop\",\r\n            reset: 0,\r\n            visuSpeed: 750, //750 px / sec\r\n        };\r\n    }\r\n\r\n    // visualizeAlgoHandler = () => {\r\n    //     if (this.state.visuState === \"stop\")\r\n    //         this.setState({\r\n    //             visuState: \"start\",\r\n    //         });\r\n    //     else\r\n    //         this.setState({\r\n    //             visuState: \"stop\",\r\n    //         });\r\n    // };\r\n\r\n    // getVisualizationState = () => this.state.curVisualization;\r\n\r\n    resetHandler = () => {\r\n        this.state.reset === 0\r\n            ? this.setState({ reset: 1 })\r\n            : this.setState({ reset: 0 });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar resetHandler={this.resetHandler} />\r\n                <Grid\r\n                    algo={this.state.curAlgo}\r\n                    visuState={this.state.visuState}\r\n                    visuSpeed={this.state.visuSpeed}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./Components/main.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}