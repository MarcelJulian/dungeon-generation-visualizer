{"version":3,"sources":["Components/navbar.jsx","Components/helper.js","Components/BSP/room.js","Components/BSP/connector.js","Components/BSP/leaf.js","Components/BSP/BSP.js","Components/BSP/SVGComponents.jsx","Components/grid.jsx","Components/layout/leftPane.jsx","Components/main.jsx","serviceWorker.js","index.js"],"names":["Navbar","props","state","curAlgo","visuState","pausePlay","bind","stop","id","this","showButton","showPausePlayButton","showStopButton","onClick","visualizeBSPSplit","resetVisualization","setState","g","document","getElementById","n","childElementCount","beginAnim","animGray","animThin","setAttribute","beginDoor","animDoor","animDoor2","SVGRoot","setCurrentTime","unpauseAnimations","path","children","parentNode","removeChild","BSPtreeHandler","class","src","process","title","animationsPaused","pauseAnimations","console","log","getCurrentTime","Component","Coor","x","y","getX","getY","getData","ConvertedRoom","width","height","getSize","Room","minWidth","minHeight","getWidth","getHeight","roomWidthBoundary","roomHeightBoundary","Math","floor","random","roomXBoundary","roomYBoundary","nodePos","isSplitVertical","side","iter","condition","x2","y2","i","push","Connector","leftSide","rightSide","splitPos","getPath","randLeft","length","randRight","coorLeftX","coorLeftY","coorRightX","coorRightY","split","ConvertedLeaf","getAll","Leaf","isSplitHorizontal","leftChild","rightChild","room","connector","lowerLim","upperLim","getLeftChild","getRightChild","getIsSplitVertical","getIsSplitHorizontal","getSplitPos","getRoom","getConnector","splitVertical","splitHorizontal","boundary","min","rand","createConnector","leftSideCoors","addSide","rightSideCoors","forEach","e","trimSide","node","coors","concat","getConnectorSide","tempCoors","insertedVal","c","includes","tempCoor","find","idx","indexOf","splice","BSP","tree","root","q","createRoom","shift","splitRoot","delay","BSPFirstSplitPath","convertedLeaf","visuSpeed","pathString","getRectanglePath","pathStyle","strokeDasharray","strokeDashoffset","dur","getVisualizationDuration","d","style","animatePath","BSPSplitPath","x1","y1","getLineSplitPath","idAnim","replace","lastIndexOf","num","parseInt","slice","begin","BSPRoomPath","convertedRoom","BSPConnectorPath","convertedConnector","interval","turnIdx","lastDir","dirList","path1","path2","curDir","getDir","c1","c2","c1x","c1y","c2x","c2y","c1x_i","c1y_i","c2x_i","c2y_i","c3","c3x","c3y","c3x_i","c3y_i","c4","c4x","c4y","c4x_i","c4y_i","getConnectorPath","id2","idAnim2","idDoor","pathStyleWhite","stroke","strokeWidth","x3","y3","x4","y4","id1","getDoorPath","points","attributeType","attributeName","to","fill","BSPSplitSVG","documentElement","col","row","BSPtree","curState","column","gridStyle","winWidth","winHeight","className","convertSize","createFirstSplitPath","paths","cnt","leaf","key","createSplitPath","xlinkHref","createRoomPath","createConnectorPath","obj","gridWidth","gridHeight","winXCenter","winYCenter","coor","coorX","coorY","Grid","randNum","createGrid","grid","tdStyle","header","scope","border","j","window","innerWidth","innerHeight","updateWindowDimensions","addEventListener","removeEventListener","curWidth","curHeight","LeftPane","showSteps","showArrow","hideLeftPaneHandler","h","padding","transform","setTimeout","main","val","algo","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b3949aa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            curAlgo: \"BSP\",\r\n            visuState: \"unplayed\",\r\n        };\r\n\r\n        this.pausePlay = this.pausePlay.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <div id=\"title\">\r\n                    <b>Dungeon Generation Visualizer</b>\r\n                </div>\r\n                <div id=\"algo\">\r\n                    {this.showButton()}\r\n                    <div id=\"algo-name\">Binary Space Partitioning</div>\r\n                </div>\r\n\r\n                <div id=\"control\">\r\n                    {this.showPausePlayButton()}\r\n                    {this.showStopButton()}\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    showButton() {\r\n        if (this.state.visuState === \"unplayed\")\r\n            return (\r\n                <button id=\"vis\" onClick={() => this.visualizeBSPSplit()}>\r\n                    Visualize\r\n                </button>\r\n            );\r\n        if (\r\n            this.state.visuState === \"start\" ||\r\n            this.state.visuState === \"pause\"\r\n        )\r\n            return (\r\n                <button id=\"vis\" onClick={() => this.resetVisualization()}>\r\n                    Reset\r\n                </button>\r\n            );\r\n    }\r\n\r\n    visualizeBSPSplit() {\r\n        this.setState({ visuState: \"start\" });\r\n\r\n        let g = document.getElementById(\"BSP-split\");\r\n\r\n        let n = g.childElementCount - 1;\r\n        let beginAnim = \"BSP-split-anim-\" + n + \".end + 0.2s\";\r\n\r\n        let animGray = document.getElementById(\"animate-split-gray\");\r\n        let animThin = document.getElementById(\"animate-split-thin\");\r\n\r\n        animGray.setAttribute(\"begin\", beginAnim);\r\n        animThin.setAttribute(\"begin\", beginAnim);\r\n\r\n        g = document.getElementById(\"BSP-rooms\");\r\n        n = g.childElementCount - 1;\r\n        let beginDoor = \"BSP-room-anim-\" + n + \".end + 0.2s\";\r\n\r\n        let animDoor = document.getElementById(\"BSP-door-anim-0\");\r\n        let animDoor2 = document.getElementById(\"BSP-door2-anim-0\");\r\n        animDoor.setAttribute(\"begin\", beginDoor);\r\n        animDoor2.setAttribute(\"begin\", beginDoor);\r\n\r\n        //add class, (element).classList.add(\"\")\r\n\r\n        let SVGRoot = document.getElementById(\"SVGRoot\");\r\n        SVGRoot.setCurrentTime(0);\r\n        SVGRoot.unpauseAnimations();\r\n    }\r\n\r\n    resetVisualization() {\r\n        this.setState({ visuState: \"unplayed\" });\r\n\r\n        let g = document.getElementById(\"BSP-split\");\r\n        while (g.childElementCount) {\r\n            let path = g.children[0];\r\n            path.parentNode.removeChild(path);\r\n        }\r\n\r\n        this.props.BSPtreeHandler(null);\r\n    }\r\n\r\n    showStopButton() {\r\n        if (this.state.visuState === \"unplayed\") return;\r\n        return (\r\n            <img\r\n                class=\"control-icon\"\r\n                src={process.env.PUBLIC_URL + \"/stop.png\"}\r\n                onClick={this.stop}\r\n                title=\"Stop\"\r\n            />\r\n        );\r\n    }\r\n\r\n    stop() {\r\n        let SVGRoot = document.getElementById(\"SVGRoot\");\r\n\r\n        SVGRoot.setCurrentTime(0);\r\n        this.setState({ visuState: \"pause\" });\r\n\r\n        if (!SVGRoot.animationsPaused()) {\r\n            SVGRoot.pauseAnimations();\r\n        }\r\n    }\r\n\r\n    showPausePlayButton() {\r\n        if (this.state.visuState === \"unplayed\") return;\r\n        return (\r\n            <img\r\n                class=\"control-icon\"\r\n                src={\r\n                    process.env.PUBLIC_URL +\r\n                    (this.state.visuState === \"start\"\r\n                        ? \"/pause.png\"\r\n                        : \"/play.png\")\r\n                }\r\n                onClick={this.pausePlay}\r\n                title={this.state.visuState === \"start\" ? \"Pause\" : \"Play\"}\r\n            />\r\n        );\r\n    }\r\n\r\n    pausePlay() {\r\n        if (this.state.visuState === \"pause\")\r\n            this.setState({ visuState: \"start\" });\r\n        else if (this.state.visuState === \"start\")\r\n            this.setState({ visuState: \"pause\" });\r\n\r\n        let SVGRoot = document.getElementById(\"SVGRoot\");\r\n        if (SVGRoot === null) return;\r\n        console.log(SVGRoot.getCurrentTime());\r\n\r\n        if (SVGRoot.animationsPaused()) {\r\n            SVGRoot.unpauseAnimations();\r\n        } else {\r\n            SVGRoot.pauseAnimations();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n","class Coor {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    getX = () => this.x;\r\n    getY = () => this.y;\r\n    getData = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n        };\r\n    };\r\n}\r\n\r\nclass Size {\r\n    constructor(coor, width, height) {\r\n        this.coor = coor;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    getCoor = () => this.coor;\r\n    getX = () => this.coor.getX();\r\n    getY = () => this.coor.getY();\r\n    getWidth = () => this.width;\r\n    getHeight = () => this.height;\r\n    getX2 = () => this.coor.getX() + this.width;\r\n    getY2 = () => this.coor.getY() + this.height;\r\n    getData = () => {\r\n        return {\r\n            x: this.coor.getX(),\r\n            y: this.coor.getY(),\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n}\r\n\r\nexport { Coor, Size };\r\n","import { Coor, Size } from \"../helper.js\";\r\n\r\nclass Room {\r\n    minWidth = 2;\r\n    minHeight = 2;\r\n\r\n    constructor(x, y, width, height) {\r\n        //to prevent rooms going too close to each other\r\n        let roomWidthBoundary = width - 2 - this.minWidth + 1;\r\n        let roomHeightBoundary = height - 2 - this.minHeight + 1;\r\n\r\n        this.width =\r\n            Math.floor(Math.random() * roomWidthBoundary) + this.minWidth;\r\n        this.height =\r\n            Math.floor(Math.random() * roomHeightBoundary) + this.minHeight;\r\n\r\n        let roomXBoundary = width - 2 - this.width + 1;\r\n        let roomYBoundary = height - 2 - this.height + 1;\r\n\r\n        this.x = Math.floor(Math.random() * roomXBoundary) + x + 1;\r\n        this.y = Math.floor(Math.random() * roomYBoundary) + y + 1;\r\n    }\r\n\r\n    getConnectorSide(nodePos, isSplitVertical) {\r\n        let side = [];\r\n        let iter = 0,\r\n            condition = 0,\r\n            x2 = 0,\r\n            y2 = 0;\r\n\r\n        if (isSplitVertical) {\r\n            iter = this.y;\r\n            condition = this.y + this.height;\r\n\r\n            //get bottom side\r\n            if (nodePos === \"left\") x2 = this.x + this.width - 1;\r\n            //get top side\r\n            else x2 = this.x;\r\n\r\n            for (let i = iter; i < condition; i++) side.push(new Coor(x2, i));\r\n        } else {\r\n            iter = this.x;\r\n            condition = this.x + this.width;\r\n\r\n            //get right side\r\n            if (nodePos === \"left\") y2 = this.y + this.height - 1;\r\n            //get left side\r\n            else y2 = this.y;\r\n\r\n            for (let i = iter; i < condition; i++) side.push(new Coor(i, y2));\r\n        }\r\n\r\n        return side;\r\n    }\r\n\r\n    getX = () => this.x;\r\n    getY = () => this.y;\r\n    getWidth = () => this.width;\r\n    getHeight = () => this.height;\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n}\r\n\r\nclass ConvertedRoom {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n}\r\n\r\nexport default Room;\r\nexport { ConvertedRoom };\r\n","import { Coor } from \"../helper.js\";\r\n\r\nexport default class Connector {\r\n    constructor(leftSide, rightSide, isSplitVertical, splitPos) {\r\n        let path = [];\r\n        // leftSide.forEach((element) => {\r\n        //     console.log(\"Left: X: \" + element.getX() + \" Y: \" + element.getY());\r\n        // });\r\n\r\n        // rightSide.forEach((element) => {\r\n        //     console.log(\r\n        //         \"Right: X: \" + element.getX() + \" Y: \" + element.getY()\r\n        //     );\r\n        // });\r\n\r\n        let randLeft = Math.floor(Math.random() * leftSide.length);\r\n        let randRight = Math.floor(Math.random() * rightSide.length);\r\n\r\n        let coorLeftX = leftSide[randLeft].getX();\r\n        let coorLeftY = leftSide[randLeft].getY();\r\n        let coorRightX = rightSide[randRight].getX();\r\n        let coorRightY = rightSide[randRight].getY();\r\n\r\n        console.log(\r\n            \"Connector: (\" +\r\n                coorLeftX +\r\n                \", \" +\r\n                coorLeftY +\r\n                \") to (\" +\r\n                coorRightX +\r\n                \", \" +\r\n                coorRightY +\r\n                \")\"\r\n        );\r\n\r\n        if (isSplitVertical) {\r\n            let split = splitPos - Math.floor(Math.random() * 2);\r\n            // console.log(\"Split: \" + split);\r\n\r\n            for (let i = coorLeftX + 1; i <= split; i++) {\r\n                path.push(new Coor(i, coorLeftY));\r\n                // console.log(\"First Step: \" + i + \", \" + coorLeftY);\r\n            }\r\n\r\n            if (coorLeftY < coorRightY) {\r\n                for (let i = coorLeftY + 1; i <= coorRightY; i++) {\r\n                    path.push(new Coor(split, i));\r\n                    // console.log(\"Second Step < : \" + split + \", \" + i);\r\n                }\r\n            } else if (coorLeftY > coorRightY) {\r\n                for (let i = coorLeftY - 1; i >= coorRightY; i--) {\r\n                    path.push(new Coor(split, i));\r\n                    // console.log(\"Second Step > : \" + split + \", \" + i);\r\n                }\r\n            } else {\r\n                //straight\r\n            }\r\n\r\n            for (let i = split + 1; i < coorRightX; i++) {\r\n                path.push(new Coor(i, coorRightY));\r\n                // console.log(\"Third Step: \" + i + \", \" + coorRightY);\r\n            }\r\n        } else {\r\n            let split = splitPos - Math.floor(Math.random() * 2);\r\n            // console.log(\"Split: \" + split);\r\n            //left: (1,6) (2,6) (3,6) (4,6) (5,6)\r\n            //right: (1,9) (2,9)\r\n\r\n            for (let i = coorLeftY + 1; i <= split; i++) {\r\n                path.push(new Coor(coorLeftX, i));\r\n                // console.log(\"First Step: \" + coorLeftX + \", \" + i);\r\n            }\r\n\r\n            if (coorLeftX < coorRightX) {\r\n                for (let i = coorLeftX + 1; i <= coorRightX; i++) {\r\n                    path.push(new Coor(i, split));\r\n                    // console.log(\"Second Step < : \" + i + \", \" + split);\r\n                }\r\n            } else if (coorLeftX > coorRightX) {\r\n                for (let i = coorLeftX - 1; i >= coorRightX; i--) {\r\n                    path.push(new Coor(i, split));\r\n                    // console.log(\"Second Step > : \" + i + \", \" + split);\r\n                }\r\n            } else {\r\n                //straight\r\n            }\r\n\r\n            for (let i = split + 1; i < coorRightY; i++) {\r\n                path.push(new Coor(coorRightX, i));\r\n                // console.log(\"Third Step: \" + coorRightX + \", \" + i);\r\n            }\r\n        }\r\n\r\n        this.path = path;\r\n    }\r\n\r\n    getPath = () => this.path;\r\n}\r\n","//Classes in javascript is weird. Using classes in this project is fine but,\r\n//it's better to benefit from the prototype aspect of javascript than the classics.\r\nimport Room from \"./room.js\";\r\nimport Connector from \"./connector.js\";\r\n\r\nclass Leaf {\r\n    leftChild = null;\r\n    rightChild = null;\r\n\r\n    isSplitVertical = false;\r\n    isSplitHorizontal = false;\r\n\r\n    splitPos = 0;\r\n\r\n    room = null;\r\n    connector = null;\r\n\r\n    constructor(\r\n        x,\r\n        y,\r\n        width,\r\n        height,\r\n        isSplitVertical = false,\r\n        isSplitHorizontal = false,\r\n        splitPos = 0\r\n    ) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.isSplitVertical = isSplitVertical;\r\n        this.isSplitHorizontal = isSplitHorizontal;\r\n        this.splitPos = splitPos;\r\n    }\r\n\r\n    split() {\r\n        if (this.leftChild != null || this.rightChild != null) return false;\r\n\r\n        //if l or w is 50% larger, force split. Else, the split is random.\r\n        if (this.width / this.height >= 1.5) this.isSplitVertical = true;\r\n        else if (this.height / this.width >= 1.5) this.isSplitHorizontal = true;\r\n        else {\r\n            let rand = Math.floor(Math.random() * 2);\r\n            if (rand) this.isSplitVertical = true;\r\n            else this.isSplitHorizontal = true;\r\n        }\r\n\r\n        if (this.isSplitVertical) return this.splitVertical();\r\n        else if (this.isSplitHorizontal) return this.splitHorizontal();\r\n    }\r\n\r\n    //lowest and highest multiplier for random\r\n    //these limits are needed to either make the splits size vary or similar\r\n    lowerLim = 0.2;\r\n    upperLim = 0.8;\r\n\r\n    //smallest possible width and height\r\n    minWidth = 6;\r\n    minHeight = 6;\r\n\r\n    //TODO: convert these limits to props\r\n\r\n    splitVertical() {\r\n        //width is too small to be splitted\r\n        if (this.width < this.minWidth * 2) return false;\r\n\r\n        let boundary = Math.floor(\r\n            this.width - this.width * (this.upperLim - this.lowerLim)\r\n        );\r\n\r\n        //preventing size being lower than the min size\r\n        boundary =\r\n            boundary > this.width - this.minWidth * 2\r\n                ? this.width - this.minWidth * 2\r\n                : boundary;\r\n        boundary += 1;\r\n        let min =\r\n            this.width * this.lowerLim > this.minWidth\r\n                ? this.width * this.lowerLim\r\n                : this.minWidth;\r\n\r\n        let rand = Math.floor(Math.random() * boundary);\r\n        rand += Math.floor(min);\r\n\r\n        this.splitPos = rand;\r\n\r\n        this.leftChild = new Leaf(this.x, this.y, rand, this.height);\r\n        this.rightChild = new Leaf(\r\n            this.x + rand,\r\n            this.y,\r\n            this.width - rand,\r\n            this.height\r\n        );\r\n        return true;\r\n    }\r\n\r\n    splitHorizontal() {\r\n        //height is too small to be splitted\r\n        if (this.height < this.minHeight * 2) return false;\r\n\r\n        let boundary = Math.floor(\r\n            this.height - this.height * (this.upperLim - this.lowerLim)\r\n        );\r\n\r\n        //preventing size being lower than the min size\r\n        boundary =\r\n            boundary > this.height - this.minHeight * 2\r\n                ? this.height - this.minHeight * 2\r\n                : boundary;\r\n        boundary += 1;\r\n        let min =\r\n            this.height * this.lowerLim > this.minHeight\r\n                ? this.height * this.lowerLim\r\n                : this.minHeight;\r\n\r\n        let rand = Math.floor(Math.random() * boundary);\r\n        rand += Math.floor(min);\r\n\r\n        this.splitPos = rand;\r\n\r\n        this.leftChild = new Leaf(this.x, this.y, this.width, rand);\r\n        this.rightChild = new Leaf(\r\n            this.x,\r\n            this.y + rand,\r\n            this.width,\r\n            this.height - rand\r\n        );\r\n        return true;\r\n    }\r\n\r\n    createRoom() {\r\n        if (this.leftChild !== null || this.rightChild !== null) return;\r\n        if (this.room !== null) return;\r\n        this.room = new Room(this.x, this.y, this.width, this.height);\r\n    }\r\n\r\n    createConnector() {\r\n        if (\r\n            this.connector !== null ||\r\n            this.getLeftChild() === null ||\r\n            this.getRightChild() === null\r\n        )\r\n            return;\r\n\r\n        if (this.getLeftChild().getConnector() === null)\r\n            this.getLeftChild().createConnector();\r\n\r\n        if (this.getRightChild().getConnector() === null)\r\n            this.getRightChild().createConnector();\r\n\r\n        let leftSideCoors = this.addSide(\r\n            this.getLeftChild(),\r\n            \"left\",\r\n            this.getIsSplitVertical()\r\n        );\r\n        let rightSideCoors = this.addSide(\r\n            this.getRightChild(),\r\n            \"right\",\r\n            this.getIsSplitVertical()\r\n        );\r\n\r\n        console.log(\"Left before trim\");\r\n        leftSideCoors.forEach((e) => {\r\n            console.log(e.getData());\r\n        });\r\n\r\n        leftSideCoors = this.trimSide(\r\n            leftSideCoors,\r\n            \"left\",\r\n            this.getIsSplitVertical()\r\n        );\r\n\r\n        console.log(\"Left after trim\");\r\n        leftSideCoors.forEach((e) => {\r\n            console.log(e.getData());\r\n        });\r\n\r\n        console.log(\"Right before trim\");\r\n        rightSideCoors.forEach((e) => {\r\n            console.log(e.getData());\r\n        });\r\n\r\n        rightSideCoors = this.trimSide(\r\n            rightSideCoors,\r\n            \"right\",\r\n            this.getIsSplitVertical()\r\n        );\r\n\r\n        console.log(\"Right after trim\");\r\n        rightSideCoors.forEach((e) => {\r\n            console.log(e.getData());\r\n        });\r\n\r\n        let split = this.splitPos;\r\n        if (this.isSplitVertical) split += this.x;\r\n        else split += this.y;\r\n\r\n        this.connector = new Connector(\r\n            leftSideCoors,\r\n            rightSideCoors,\r\n            this.getIsSplitVertical(),\r\n            split\r\n        );\r\n    }\r\n\r\n    addSide(node, side, isSplitVertical) {\r\n        let coors = [];\r\n        if (node.leftChild !== null)\r\n            coors = coors.concat(\r\n                this.addSide(node.leftChild, side, isSplitVertical)\r\n            );\r\n        if (node.rightChild !== null)\r\n            coors = coors.concat(\r\n                this.addSide(node.rightChild, side, isSplitVertical)\r\n            );\r\n\r\n        if (node.getConnector() !== null)\r\n            coors = coors.concat(node.getConnector().getPath());\r\n\r\n        if (node.getRoom() !== null) {\r\n            coors = coors.concat(\r\n                node.getRoom().getConnectorSide(side, isSplitVertical)\r\n            );\r\n        }\r\n\r\n        return coors;\r\n    }\r\n\r\n    trimSide(coors, side, isSplitVertical) {\r\n        let tempCoors = [];\r\n        let insertedVal = [];\r\n\r\n        coors.forEach((c) => {\r\n            if (isSplitVertical) {\r\n                //check if the axis is alr filled\r\n                if (insertedVal.includes(c.getY())) {\r\n                    let tempCoor = tempCoors.find((e) => e.getY() === c.getY());\r\n\r\n                    //if the new coor is closer to the splitPos, switch it\r\n                    if (side === \"left\") {\r\n                        if (c.getX() > tempCoor.getX()) {\r\n                            let idx = tempCoors.indexOf(tempCoor);\r\n                            tempCoors.splice(idx, 1);\r\n                            tempCoors.push(c);\r\n                        }\r\n                    } else {\r\n                        if (c.getX() < tempCoor.getX()) {\r\n                            let idx = tempCoors.indexOf(tempCoor);\r\n                            tempCoors.splice(idx, 1);\r\n                            tempCoors.push(c);\r\n                        }\r\n                    }\r\n                } else {\r\n                    //it's a new coor, simply push\r\n                    insertedVal.push(c.getY());\r\n                    tempCoors.push(c);\r\n                }\r\n            } else {\r\n                //check if the axis is alr filled\r\n                if (insertedVal.includes(c.getX())) {\r\n                    let tempCoor = tempCoors.find((e) => e.getX() === c.getX());\r\n\r\n                    //if the new coor is closer to the splitPos, switch it\r\n                    if (side === \"left\") {\r\n                        if (c.getY() > tempCoor.getY()) {\r\n                            let idx = tempCoors.indexOf(tempCoor);\r\n                            tempCoors.splice(idx, 1);\r\n                            tempCoors.push(c);\r\n                        }\r\n                    } else {\r\n                        if (c.getY() < tempCoor.getY()) {\r\n                            let idx = tempCoors.indexOf(tempCoor);\r\n                            tempCoors.splice(idx, 1);\r\n                            tempCoors.push(c);\r\n                        }\r\n                    }\r\n                } else {\r\n                    //it's a new coor, simply push\r\n                    insertedVal.push(c.getX());\r\n                    tempCoors.push(c);\r\n                }\r\n            }\r\n        });\r\n        return tempCoors;\r\n    }\r\n\r\n    toStrings() {\r\n        console.log(\"x: \" + this.x + \" y: \" + this.y);\r\n        console.log(\"width: \" + this.width + \" height: \" + this.height);\r\n    }\r\n\r\n    getX = () => this.x;\r\n    getY = () => this.y;\r\n    getWidth = () => this.width;\r\n    getHeight = () => this.height;\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n    getLeftChild = () => this.leftChild;\r\n    getRightChild = () => this.rightChild;\r\n    getIsSplitVertical = () => this.isSplitVertical;\r\n    getIsSplitHorizontal = () => this.isSplitHorizontal;\r\n    getSplitPos = () => this.splitPos;\r\n    getRoom = () => this.room;\r\n    getConnector = () => this.connector;\r\n}\r\n\r\nclass ConvertedLeaf {\r\n    constructor(x, y, width, height, isSplitVertical, splitPos) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.isSplitVertical = isSplitVertical;\r\n        this.splitPos = splitPos;\r\n    }\r\n\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n\r\n    getAll = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n            isSplitVertical: this.isSplitVertical,\r\n            splitPos: this.splitPos,\r\n        };\r\n    };\r\n}\r\n\r\nexport default Leaf;\r\n\r\nexport { ConvertedLeaf };\r\n","import Leaf from \"./leaf.js\";\r\n\r\nfunction splitRoot(root, tree) {\r\n    //level order tree traversal\r\n    let q = [];\r\n    q.push(root);\r\n    while (q.length !== 0) {\r\n        tree.push(q[0]);\r\n\r\n        if (q[0].split()) {\r\n            q.push(q[0].getLeftChild());\r\n            q.push(q[0].getRightChild());\r\n            // tree.push(q[0].getLeftChild());\r\n            // tree.push(q[0].getRightChild());\r\n        } else {\r\n            q[0].createRoom();\r\n        }\r\n        q.shift();\r\n    }\r\n\r\n    //run createConnector() from root\r\n    tree[0].createConnector();\r\n\r\n    return tree;\r\n}\r\n\r\nfunction BSP(x, y, width, height) {\r\n    var tree = [];\r\n    var root = new Leaf(x, y, width, height);\r\n\r\n    tree = splitRoot(root, tree);\r\n\r\n    return tree;\r\n\r\n    //only get leaves (last node)\r\n    /*\r\n    var leaves = [];\r\n\r\n    tree.forEach((l) => {\r\n        if (l.getRightChild());\r\n        else leaves.push(l);\r\n    });\r\n\r\n    return leaves;\r\n    */\r\n}\r\n\r\nexport default BSP;\r\n","import React, { Component } from \"react\";\r\nimport \"./SVGComponents.css\";\r\n\r\nvar delay = \" + 0.2s\";\r\n\r\nexport class BSPFirstSplitPath extends Component {\r\n    componentDidMount() {\r\n        let SVGRoot = document.getElementById(\"SVGRoot\");\r\n        SVGRoot.pauseAnimations();\r\n    }\r\n\r\n    render() {\r\n        const { convertedLeaf, visuSpeed } = this.props;\r\n\r\n        let { x, y, width, height } = convertedLeaf.getSize();\r\n\r\n        let pathString = getRectanglePath(x, y, width, height);\r\n\r\n        let length = (width + height) * 2;\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n\r\n        return (\r\n            <path id=\"BSP-split-path-0\" d={pathString} style={pathStyle}>\r\n                {animatePath(dur, \"BSP-split-anim-0\", \"0s\")}\r\n            </path>\r\n        );\r\n    }\r\n}\r\n\r\nexport class BSPSplitPath extends Component {\r\n    render() {\r\n        const { id, convertedLeaf, visuSpeed } = this.props;\r\n\r\n        let {\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            isSplitVertical,\r\n            splitPos,\r\n        } = convertedLeaf.getAll();\r\n\r\n        let { x1, y1, x2, y2 } = getLineSplitPath(\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            isSplitVertical,\r\n            splitPos\r\n        );\r\n\r\n        let length = 0;\r\n        if (isSplitVertical) length = height;\r\n        else length = width;\r\n\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n\r\n        let idAnim = id.replace(\"path\", \"anim\");\r\n        let idx = id.lastIndexOf(\"-\");\r\n        let num = parseInt(id.slice(idx + 1)) - 1;\r\n        let begin = idAnim.slice(0, idx + 1) + num + \".end\" + delay;\r\n\r\n        return (\r\n            <line id={id} x1={x1} y1={y1} x2={x2} y2={y2} style={pathStyle}>\r\n                {animatePath(dur, idAnim, begin)}\r\n            </line>\r\n        );\r\n    }\r\n}\r\n\r\nexport class BSPRoomPath extends Component {\r\n    render() {\r\n        const { id, convertedRoom, visuSpeed } = this.props;\r\n\r\n        let { x, y, width, height } = convertedRoom.getSize();\r\n\r\n        let pathString = getRectanglePath(x, y, width, height);\r\n\r\n        let length = (width + height) * 2;\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n        let idAnim = id.replace(\"path\", \"anim\");\r\n        let idx = id.lastIndexOf(\"-\");\r\n        let num = parseInt(id.slice(idx + 1)) - 1;\r\n        let begin = idAnim.slice(0, idx + 1) + num + \".end\" + delay;\r\n        if (num === -1) begin = \"animate-split-gray.end\" + delay;\r\n\r\n        return (\r\n            <path id={id} d={pathString} style={pathStyle}>\r\n                {animatePath(dur, idAnim, begin)}\r\n            </path>\r\n        );\r\n    }\r\n}\r\n\r\nexport class BSPConnectorPath extends Component {\r\n    render() {\r\n        const {\r\n            id,\r\n            convertedConnector,\r\n            visuSpeed,\r\n            interval,\r\n            isSplitVertical,\r\n        } = this.props;\r\n\r\n        let { path1, path2 } = getConnectorPath(\r\n            convertedConnector,\r\n            interval,\r\n            isSplitVertical\r\n        );\r\n\r\n        let length = convertedConnector.length * interval;\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n            // strokeWidth: 3,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length * 2);\r\n\r\n        let id2 = id.replace(\"path\", \"path2\");\r\n\r\n        let idAnim = id.replace(\"path\", \"anim\");\r\n        let idAnim2 = idAnim.replace(\"anim\", \"anim2\");\r\n        let idDoor = idAnim.replace(\"connector\", \"door\");\r\n        let idx = id.lastIndexOf(\"-\");\r\n        let num = parseInt(id.slice(idx + 1)) - 1;\r\n        let begin = idDoor + \".end\" + delay;\r\n        let beginDoor = idAnim.slice(0, idx + 1) + num + \".end\" + delay;\r\n\r\n        let door = () =>\r\n            getDoorPath(\r\n                convertedConnector,\r\n                interval,\r\n                isSplitVertical,\r\n                idDoor,\r\n                beginDoor\r\n            );\r\n\r\n        return (\r\n            <g>\r\n                {door()}\r\n                <polyline id={id} points={path1} style={pathStyle}>\r\n                    {animatePath(dur, idAnim, begin)}\r\n                </polyline>\r\n                <polyline id={id2} points={path2} style={pathStyle}>\r\n                    {animatePath(dur, idAnim2, begin)}\r\n                </polyline>\r\n            </g>\r\n        );\r\n    }\r\n}\r\n\r\nfunction animatePath(dur, id, begin = \"indefinite\") {\r\n    return (\r\n        <animate\r\n            id={id}\r\n            attributeType=\"CSS\"\r\n            attributeName=\"stroke-dashoffset\"\r\n            to=\"0\"\r\n            dur={dur + \"s\"}\r\n            fill=\"freeze\"\r\n            begin={begin}\r\n        />\r\n    );\r\n}\r\n\r\nfunction getVisualizationDuration(visuSpeed, length) {\r\n    return length / visuSpeed;\r\n}\r\n\r\nfunction getRectanglePath(x, y, width, height) {\r\n    return (\r\n        \"M\" +\r\n        x +\r\n        \" \" +\r\n        y +\r\n        \" L\" +\r\n        (x + width) +\r\n        \" \" +\r\n        y +\r\n        \" L\" +\r\n        (x + width) +\r\n        \" \" +\r\n        (y + height) +\r\n        \" L\" +\r\n        x +\r\n        \" \" +\r\n        (y + height) +\r\n        \" L\" +\r\n        x +\r\n        \" \" +\r\n        y +\r\n        \" Z\"\r\n    );\r\n}\r\n\r\nfunction getLineSplitPath(x, y, width, height, isSplitVertical, splitPos) {\r\n    if (isSplitVertical)\r\n        return {\r\n            x1: x + splitPos,\r\n            y1: y,\r\n            x2: x + splitPos,\r\n            y2: y + height,\r\n        };\r\n    return {\r\n        x1: x,\r\n        y1: y + splitPos,\r\n        x2: x + width,\r\n        y2: y + splitPos,\r\n    };\r\n}\r\n\r\nfunction getConnectorPath(path, interval, isSplitVertical) {\r\n    let turnIdx = [],\r\n        lastDir = \"\",\r\n        dirList = [];\r\n    let path1 = \"\",\r\n        path2 = \"\";\r\n\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        let curDir = getDir(\r\n            path[i].getX(),\r\n            path[i].getY(),\r\n            path[i + 1].getX(),\r\n            path[i + 1].getY()\r\n        );\r\n        if (lastDir === \"\") {\r\n            lastDir = curDir;\r\n            dirList.push(curDir);\r\n        } else if (lastDir !== curDir) {\r\n            lastDir = curDir;\r\n            turnIdx.push(i);\r\n            dirList.push(curDir);\r\n        }\r\n    }\r\n\r\n    //straight line\r\n    if (dirList.length === 1) {\r\n        let c1 = path[0],\r\n            c2 = path[path.length - 1];\r\n        const c1x = c1.getX(),\r\n            c1y = c1.getY(),\r\n            c2x = c2.getX(),\r\n            c2y = c2.getY();\r\n        const c1x_i = c1x + interval,\r\n            c1y_i = c1y + interval,\r\n            c2x_i = c2x + interval,\r\n            c2y_i = c2y + interval;\r\n\r\n        if (dirList[0] === \"down\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y_i;\r\n        } else if (dirList[0] === \"right\") {\r\n            path1 = c1x + \",\" + c1y_i + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 = c1x + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n        } else console.log(\"Error Connector with length 1. Dir: \" + dirList[0]);\r\n    } else if (dirList.length === 2) {\r\n        //1 turn\r\n        let c1 = path[0],\r\n            c2 = path[turnIdx[0]],\r\n            c3 = path[path.length - 1];\r\n        const c1x = c1.getX(),\r\n            c1y = c1.getY(),\r\n            c2x = c2.getX(),\r\n            c2y = c2.getY(),\r\n            c3x = c3.getX(),\r\n            c3y = c3.getY();\r\n        const c1x_i = c1x + interval,\r\n            c1y_i = c1y + interval,\r\n            c2x_i = c2x + interval,\r\n            c2y_i = c2y + interval,\r\n            c3x_i = c3x + interval,\r\n            c3y_i = c3y + interval;\r\n\r\n        if (\r\n            dirList[0] === \"down\" &&\r\n            dirList[1] === \"right\" &&\r\n            isSplitVertical\r\n        ) {\r\n            path1 = c1x + \",\" + c1y_i + \" \" + c2x + \",\" + c2y_i;\r\n            path1 += \" \" + c3x_i + \",\" + c3y_i;\r\n            path2 = c1x + \",\" + c1y + \" \" + c1x_i + \",\" + c1y;\r\n            path2 += \" \" + c2x_i + \",\" + c2y + \" \" + c3x_i + \",\" + c3y;\r\n        } else if (\r\n            dirList[0] === \"down\" &&\r\n            dirList[1] === \"right\" &&\r\n            !isSplitVertical\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y_i;\r\n            path1 += \" \" + c3x + \",\" + c3y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path2 += \" \" + c3x_i + \",\" + c3y + \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (\r\n            dirList[0] === \"right\" &&\r\n            dirList[1] === \"down\" &&\r\n            isSplitVertical\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path1 += \" \" + c3x_i + \",\" + c3y;\r\n            path2 = c1x + \",\" + c1y_i + \" \" + c2x + \",\" + c2y_i;\r\n            path2 += \" \" + c3x + \",\" + c3y_i + \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (\r\n            dirList[0] === \"right\" &&\r\n            dirList[1] === \"down\" &&\r\n            !isSplitVertical\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c1x + \",\" + c1y_i;\r\n            path1 += \" \" + c2x + \",\" + c2y_i + \" \" + c3x + \",\" + c3y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (dirList[0] === \"up\" && dirList[1] === \"right\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x_i + \",\" + c3y;\r\n            path2 = c1x + \",\" + c1y_i + \" \" + c1x_i + \",\" + c1y_i;\r\n            path2 += \" \" + c2x_i + \",\" + c2y_i + \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (dirList[0] === \"right\" && dirList[1] === \"up\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y + \" \" + c3x_i + \",\" + c3y;\r\n            path2 = c1x + \",\" + c1y_i + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (dirList[0] === \"left\" && dirList[1] === \"down\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c1x_i + \",\" + c1y_i;\r\n            path2 += \" \" + c2x_i + \",\" + c2y_i + \" \" + c3x_i + \",\" + c3y_i;\r\n        } else if (dirList[0] === \"down\" && dirList[1] === \"left\") {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y + \" \" + c3x + \",\" + c3y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i;\r\n        } else\r\n            console.log(\r\n                \"Error Connector with length 2. Dir: \" +\r\n                    dirList[0] +\r\n                    \" to \" +\r\n                    dirList[1]\r\n            );\r\n    } else if (dirList.length === 3) {\r\n        //2 turn\r\n        let c1 = path[0],\r\n            c2 = path[turnIdx[0]],\r\n            c3 = path[turnIdx[1]],\r\n            c4 = path[path.length - 1];\r\n        const c1x = c1.getX(),\r\n            c1y = c1.getY(),\r\n            c2x = c2.getX(),\r\n            c2y = c2.getY(),\r\n            c3x = c3.getX(),\r\n            c3y = c3.getY(),\r\n            c4x = c4.getX(),\r\n            c4y = c4.getY();\r\n        const c1x_i = c1x + interval,\r\n            c1y_i = c1y + interval,\r\n            c2x_i = c2x + interval,\r\n            c2y_i = c2y + interval,\r\n            c3x_i = c3x + interval,\r\n            c3y_i = c3y + interval,\r\n            c4x_i = c4x + interval,\r\n            c4y_i = c4y + interval;\r\n\r\n        if (\r\n            dirList[0] === \"down\" &&\r\n            dirList[1] === \"right\" &&\r\n            dirList[2] === \"down\"\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y_i;\r\n            path1 += \" \" + c3x + \",\" + c3y_i + \" \" + c4x + \",\" + c4y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path2 += \" \" + c3x_i + \",\" + c3y + \" \" + c4x_i + \",\" + c4y_i;\r\n        } else if (\r\n            dirList[0] === \"down\" &&\r\n            dirList[1] === \"left\" &&\r\n            dirList[2] === \"down\"\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y + \" \" + c4x + \",\" + c4y_i;\r\n            path2 = c1x_i + \",\" + c1y + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i + \" \" + c4x_i + \",\" + c4y_i;\r\n        } else if (\r\n            dirList[0] === \"right\" &&\r\n            dirList[1] === \"down\" &&\r\n            dirList[2] === \"right\"\r\n        ) {\r\n            path1 = c1x + \",\" + c1y_i + \" \" + c2x + \",\" + c2y_i;\r\n            path1 += \" \" + c3x + \",\" + c3y_i + \" \" + c4x_i + \",\" + c4y_i;\r\n            path2 = c1x + \",\" + c1y + \" \" + c2x_i + \",\" + c2y;\r\n            path2 += \" \" + c3x_i + \",\" + c3y + \" \" + c4x_i + \",\" + c4y;\r\n        } else if (\r\n            dirList[0] === \"right\" &&\r\n            dirList[1] === \"up\" &&\r\n            dirList[2] === \"right\"\r\n        ) {\r\n            path1 = c1x + \",\" + c1y + \" \" + c2x + \",\" + c2y;\r\n            path1 += \" \" + c3x + \",\" + c3y + \" \" + c4x_i + \",\" + c4y;\r\n            path2 = c1x + \",\" + c1y_i + \" \" + c2x_i + \",\" + c2y_i;\r\n            path2 += \" \" + c3x_i + \",\" + c3y_i + \" \" + c4x_i + \",\" + c4y_i;\r\n        } else\r\n            console.log(\r\n                \"Error Connector with length 3. Dir: \" +\r\n                    dirList[0] +\r\n                    \" to \" +\r\n                    dirList[1] +\r\n                    \" to \" +\r\n                    dirList[2]\r\n            );\r\n    }\r\n\r\n    return {\r\n        path1: path1,\r\n        path2: path2,\r\n    };\r\n}\r\n\r\nfunction getDoorPath(path, interval, isSplitVertical, id, begin) {\r\n    let pathStyleThin = {\r\n        strokeDasharray: interval - 5,\r\n        strokeDashoffset: interval - 5,\r\n        stroke: \"black\",\r\n        strokeWidth: 1,\r\n    };\r\n    let pathStyleWhite = {\r\n        strokeDasharray: interval - 5,\r\n        strokeDashoffset: interval - 5,\r\n        stroke: \"white\",\r\n        strokeWidth: 5,\r\n    };\r\n\r\n    let dur = 0.25;\r\n\r\n    let c1 = path[0],\r\n        c2 = path[path.length - 1];\r\n    const c1x = c1.getX(),\r\n        c1y = c1.getY(),\r\n        c2x = c2.getX(),\r\n        c2y = c2.getY();\r\n    const c1x_i = c1x + interval,\r\n        c1y_i = c1y + interval,\r\n        c2x_i = c2x + interval,\r\n        c2y_i = c2y + interval;\r\n\r\n    let x1 = 0,\r\n        y1 = 0,\r\n        x2 = 0,\r\n        y2 = 0,\r\n        x3 = 0,\r\n        y3 = 0,\r\n        x4 = 0,\r\n        y4 = 0;\r\n    if (isSplitVertical) {\r\n        x1 = c1x;\r\n        y1 = c1y + 2.5;\r\n        x2 = c1x;\r\n        y2 = c1y_i - 2.5;\r\n        x3 = c2x_i;\r\n        y3 = c2y + 2.5;\r\n        x4 = c2x_i;\r\n        y4 = c2y_i - 2.5;\r\n    } else {\r\n        x1 = c1x + 2.5;\r\n        y1 = c1y;\r\n        x2 = c1x_i - 2.5;\r\n        y2 = c1y;\r\n        x3 = c2x + 2.5;\r\n        y3 = c2y_i;\r\n        x4 = c2x_i - 2.5;\r\n        y4 = c2y_i;\r\n    }\r\n\r\n    let id1 = id;\r\n    let id2 = id.replace(\"door\", \"door2\");\r\n    return (\r\n        <g>\r\n            <line x1={x1} y1={y1} x2={x2} y2={y2} style={pathStyleWhite}>\r\n                {animatePath(dur, id1, begin)}\r\n            </line>\r\n            {/* <line x1={x1} y1={y1} x2={x2} y2={y2} style={pathStyleThin}>\r\n                {animatePath(dur)}\r\n            </line> */}\r\n            <line x1={x3} y1={y3} x2={x4} y2={y4} style={pathStyleWhite}>\r\n                {animatePath(dur, id2, begin)}\r\n            </line>\r\n            {/* <line x1={x3} y1={y3} x2={x4} y2={y4} style={pathStyleThin}>\r\n                {animatePath(dur)}\r\n            </line> */}\r\n        </g>\r\n    );\r\n}\r\n\r\nfunction getDir(x1, y1, x2, y2) {\r\n    if (x1 > x2) return \"left\";\r\n    else if (x1 < x2) return \"right\";\r\n    else if (y1 > y2) return \"up\";\r\n    else if (y1 < y2) return \"down\";\r\n}\r\n","import React, { Component } from \"react\";\r\nimport BSP from \"./BSP/BSP.js\";\r\nimport {\r\n    BSPFirstSplitPath,\r\n    BSPSplitPath,\r\n    BSPRoomPath,\r\n    BSPConnectorPath,\r\n} from \"./BSP/SVGComponents.jsx\";\r\nimport { ConvertedLeaf } from \"./BSP/leaf.js\";\r\nimport { ConvertedRoom } from \"./BSP/room.js\";\r\nimport Leaf from \"./BSP/leaf.js\";\r\nimport Room from \"./BSP/room.js\";\r\nimport Connector from \"./BSP/connector.js\";\r\nimport \"./grid.css\";\r\nimport { Coor } from \"./helper.js\";\r\n\r\nclass Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            winWidth: window.innerWidth,\r\n            //61 is header height\r\n            //TODO: convert magic number\r\n            winHeight: window.innerHeight - 61,\r\n            row: 15,\r\n            column: 25,\r\n            interval: 30,\r\n        };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //get new window Width and Height\r\n        this.updateWindowDimensions();\r\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        let curWidth = window.innerWidth;\r\n        //61 is header height\r\n        let curHeight = window.innerHeight - 61;\r\n        this.setState({\r\n            winWidth: curWidth,\r\n            winHeight: curHeight,\r\n        });\r\n    }\r\n\r\n    randNum = () => Math.floor(Math.random() * 1000);\r\n\r\n    render() {\r\n        var gridStyle = {\r\n            width: this.state.winWidth,\r\n            height: this.state.winHeight,\r\n        };\r\n\r\n        return (\r\n            <div key={this.randNum()} id=\"visualizer\">\r\n                <div id=\"grid\" style={gridStyle}>\r\n                    <table>\r\n                        <tbody>{this.createGrid()}</tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <BSPSplitSVG\r\n                    curState={this.state}\r\n                    visuSpeed={this.props.visuSpeed}\r\n                    BSPtree={this.props.BSPtree}\r\n                    BSPtreeHandler={this.props.BSPtreeHandler}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    createGrid = () => {\r\n        let grid = [];\r\n        let tdStyle = {\r\n            width: this.state.interval + \"px\",\r\n            height: this.state.interval + \"px\",\r\n        };\r\n\r\n        let header = [];\r\n        for (let i = 0; i < this.state.column; i++)\r\n            header.push(\r\n                <th scope=\"col\" style={tdStyle}>\r\n                    {i}\r\n                </th>\r\n            );\r\n\r\n        let noBorderStyle = {\r\n            border: \"none\",\r\n        };\r\n\r\n        grid.push(\r\n            <tr>\r\n                <td style={noBorderStyle}></td>\r\n                {header}\r\n            </tr>\r\n        );\r\n\r\n        // Outer loop to create parent\r\n        for (let i = 0; i < this.state.row; i++) {\r\n            let children = [];\r\n            children.push(\r\n                <th scope=\"row\" style={tdStyle}>\r\n                    {i}\r\n                </th>\r\n            );\r\n            //Inner loop to create children\r\n            for (let j = 0; j < this.state.column; j++) {\r\n                children.push(\r\n                    <td\r\n                        id={`node-${i + 1}-${j + 1}`}\r\n                        key={`node-${i + 1}-${j + 1}`}\r\n                        style={tdStyle}\r\n                    ></td>\r\n                );\r\n            }\r\n            //Create the parent and add the children\r\n            grid.push(\r\n                <tr id={`row-${i + 1}`} key={`row-${i + 1}`}>\r\n                    {children}\r\n                </tr>\r\n            );\r\n        }\r\n        return grid;\r\n    };\r\n}\r\n\r\nfunction calculateBSP(col, row) {\r\n    return BSP(0, 0, col, row);\r\n}\r\n\r\nfunction BSPSplitSVG(props) {\r\n    console.log(document.documentElement);\r\n\r\n    let tree = null;\r\n    if (props.BSPtree === null) {\r\n        tree = calculateBSP(props.curState.column, props.curState.row);\r\n        props.BSPtreeHandler(tree);\r\n    } else tree = props.BSPtree;\r\n\r\n    console.log(props.BSPtree);\r\n\r\n    // var tree = [];\r\n    // tree.push(new Leaf(0, 0, 25, 15, true, false, 10));\r\n    // tree.push(new Leaf(0, 0, 10, 15, false, true, 8));\r\n    // tree.push(new Leaf(10, 0, 15, 15, false, true, 3));\r\n    console.log(\"tree: \" + tree);\r\n    // console.log(props.curState);\r\n\r\n    // tree.forEach((n, idx) => {\r\n    //     console.log(\"connector: \" + idx);\r\n    //     let temp = n.getConnector();\r\n    //     if (temp !== null) temp.forEach((n) => console.log(n.getData()));\r\n    // });\r\n\r\n    var gridStyle = {\r\n        width: props.curState.winWidth,\r\n        height: props.curState.winHeight,\r\n    };\r\n\r\n    return (\r\n        <svg id={\"SVGRoot\"} style={gridStyle}>\r\n            <g id=\"BSP-split\" className=\"BSP-svg-paths\">\r\n                {createFirstSplitPath(tree[0], props.curState, props.visuSpeed)}\r\n                {createSplitPath(tree, props.curState, props.visuSpeed)}\r\n            </g>\r\n\r\n            {getAnimateSplitGray()}\r\n            {getAnimateSplitThin()}\r\n\r\n            <g id=\"BSP-rooms\" className=\"BSP-svg-paths\">\r\n                {createRoomPath(tree, props.curState, props.visuSpeed)}\r\n            </g>\r\n            <g id=\"BSP-connectors\" className=\"BSP-svg-paths\">\r\n                {createConnectorPath(tree, props.curState, props.visuSpeed)}\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nfunction createFirstSplitPath(node, curState, visuSpeed) {\r\n    let convertedLeaf = convertSize(node, curState);\r\n    return (\r\n        <BSPFirstSplitPath\r\n            convertedLeaf={convertedLeaf}\r\n            visuSpeed={visuSpeed}\r\n        ></BSPFirstSplitPath>\r\n    );\r\n}\r\n\r\nfunction createSplitPath(tree, curState, visuSpeed) {\r\n    let paths = [];\r\n    let cnt = 1;\r\n\r\n    for (let i = 0; i < tree.length; i++) {\r\n        let leaf = tree[i];\r\n        // console.log(i + \" splitPos: \" + leaf.getSplitPos());\r\n        if (leaf.getSplitPos() === 0) continue;\r\n\r\n        let convertedLeaf = convertSize(leaf, curState);\r\n        let id = \"BSP-split-path-\" + cnt;\r\n        cnt++;\r\n\r\n        paths.push(\r\n            <BSPSplitPath\r\n                key={id}\r\n                id={id}\r\n                convertedLeaf={convertedLeaf}\r\n                visuSpeed={visuSpeed}\r\n            ></BSPSplitPath>\r\n        );\r\n    }\r\n    return paths;\r\n}\r\n\r\nfunction createRoomPath(tree, curState, visuSpeed) {\r\n    let paths = [];\r\n    let cnt = 0;\r\n\r\n    for (let i = 0; i < tree.length; i++) {\r\n        let leaf = tree[i];\r\n\r\n        if (leaf.getRoom() === null) continue;\r\n\r\n        let convertedRoom = convertSize(leaf.getRoom(), curState);\r\n        let id = \"BSP-room-path-\" + cnt;\r\n        cnt++;\r\n\r\n        paths.push(\r\n            <BSPRoomPath\r\n                key={id}\r\n                id={id}\r\n                convertedRoom={convertedRoom}\r\n                visuSpeed={visuSpeed}\r\n            ></BSPRoomPath>\r\n        );\r\n    }\r\n    return paths;\r\n}\r\n\r\nfunction createConnectorPath(tree, curState, visuSpeed) {\r\n    let paths = [];\r\n    let cnt = 0;\r\n    for (let i = tree.length - 1; i >= 0; i--) {\r\n        let node = tree[i];\r\n\r\n        if (node.getConnector() === null) continue;\r\n\r\n        let convertedConnector = convertSize(node.getConnector(), curState);\r\n        let id = \"BSP-connector-path-\" + cnt;\r\n        cnt++;\r\n\r\n        paths.push(\r\n            <BSPConnectorPath\r\n                key={id}\r\n                id={id}\r\n                convertedConnector={convertedConnector}\r\n                visuSpeed={visuSpeed}\r\n                interval={curState.interval}\r\n                isSplitVertical={node.getIsSplitVertical()}\r\n            ></BSPConnectorPath>\r\n        );\r\n    }\r\n    return paths;\r\n}\r\n\r\nfunction convertSize(obj, curState) {\r\n    const interval = curState.interval;\r\n    const gridWidth = (curState.column * interval) / 2;\r\n    const gridHeight = (curState.row * interval) / 2;\r\n    const winXCenter = curState.winWidth / 2;\r\n    const winYCenter = curState.winHeight / 2;\r\n\r\n    var x = winXCenter - gridWidth;\r\n    var y = winYCenter - gridHeight;\r\n\r\n    if (obj instanceof Leaf)\r\n        return new ConvertedLeaf(\r\n            x + obj.getX() * interval + interval / 2,\r\n            y + obj.getY() * interval + interval / 2,\r\n            obj.getWidth() * interval,\r\n            obj.getHeight() * interval,\r\n            obj.getIsSplitVertical(),\r\n            obj.getSplitPos() * interval\r\n        );\r\n\r\n    if (obj instanceof Room) {\r\n        return new ConvertedRoom(\r\n            x + obj.getX() * interval + interval / 2,\r\n            y + obj.getY() * interval + interval / 2,\r\n            obj.getWidth() * interval,\r\n            obj.getHeight() * interval\r\n        );\r\n    }\r\n    if (obj instanceof Connector) {\r\n        let convertedConnector = [];\r\n        obj.getPath().forEach((coor) => {\r\n            let coorX = coor.getX(),\r\n                coorY = coor.getY();\r\n            coorX = x + coorX * interval + interval / 2;\r\n            coorY = y + coorY * interval + interval / 2;\r\n            convertedConnector.push(new Coor(coorX, coorY));\r\n        });\r\n        return convertedConnector;\r\n    }\r\n}\r\n\r\nfunction getAnimateSplitGray() {\r\n    return (\r\n        <animate\r\n            id=\"animate-split-gray\"\r\n            xlinkHref=\"#BSP-split\"\r\n            attributeType=\"CSS\"\r\n            attributeName=\"stroke\"\r\n            to=\"gray\"\r\n            dur=\"1s\"\r\n            fill=\"freeze\"\r\n            begin=\"indefinite\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction getAnimateSplitThin() {\r\n    return (\r\n        <animate\r\n            id=\"animate-split-thin\"\r\n            xlinkHref=\"#BSP-split\"\r\n            attributeType=\"CSS\"\r\n            attributeName=\"stroke-width\"\r\n            to=\"3\"\r\n            dur=\"1s\"\r\n            fill=\"freeze\"\r\n            begin=\"indefinite\"\r\n        />\r\n    );\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport \"./leftPane.css\";\r\n\r\nexport default class LeftPane extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"left-wrapper\">\r\n                <div id=\"left-pane\">\r\n                    <div id=\"left-title\">Steps</div>\r\n                    {this.showSteps()}\r\n                </div>\r\n                <div id=\"left-hide-pane\">{this.showArrow()}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showSteps() {\r\n        return (\r\n            <ul id=\"steps\">\r\n                <li>1. Split Tree</li>\r\n                <li>2. Create Rooms</li>\r\n                <li>3. Connect Rooms</li>\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    showArrow() {\r\n        return (\r\n            <img\r\n                id=\"left-hide-icon\"\r\n                src={process.env.PUBLIC_URL + \"/arrow_right.png\"}\r\n                onClick={this.hideLeftPaneHandler}\r\n            />\r\n        );\r\n    }\r\n\r\n    hideLeftPaneHandler() {\r\n        let e = document.getElementById(\"left-pane\");\r\n        let h = document.getElementById(\"left-hide-icon\");\r\n\r\n        if (e.style.width === \"0px\") {\r\n            e.style.width = \"200px\";\r\n            e.style.padding = \"10px 20px\";\r\n\r\n            h.style.transform = \"rotate(0deg)\";\r\n        } else {\r\n            e.style.width = \"0px\";\r\n            setTimeout(() => (e.style.padding = \"10px 0px\"), 260);\r\n            h.style.transform = \"rotate(-180deg)\";\r\n        }\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"./navbar.jsx\";\r\nimport Grid from \"./grid.jsx\";\r\nimport LeftPane from \"./layout/leftPane.jsx\";\r\n\r\nclass main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            curAlgo: \"BSP\",\r\n            visuSpeed: 750, //750 px / sec\r\n            BSPtree: null,\r\n        };\r\n    }\r\n\r\n    // getVisualizationState = () => this.state.curVisualization;\r\n\r\n    BSPtreeHandler = (val) => {\r\n        this.setState({ BSPtree: val });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar BSPtreeHandler={this.BSPtreeHandler} />\r\n                <LeftPane></LeftPane>\r\n                <Grid\r\n                    algo={this.state.curAlgo}\r\n                    visuState={this.state.visuState}\r\n                    visuSpeed={this.state.visuSpeed}\r\n                    BSPtree={this.state.BSPtree}\r\n                    BSPtreeHandler={this.BSPtreeHandler}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./Components/main.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}