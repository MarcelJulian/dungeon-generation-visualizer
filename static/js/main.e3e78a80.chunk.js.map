{"version":3,"sources":["Components/navbar.jsx","Components/BSP/room.js","Components/BSP/leaf.js","Components/BSP/BSP.js","Components/BSP/SVGComponents.jsx","Components/grid.jsx","Components/main.jsx","serviceWorker.js","index.js"],"names":["Navbar","props","state","curAlgo","visuState","id","href","this","showButton","onClick","visualizeBSPSplit","resetVisualization","setState","g","document","getElementById","durTotal","i","path","children","dur","getAttribute","substring","length","setTimeout","beginElement","childElementCount","a","durA","console","log","parentNode","removeChild","resetHandler","Component","ConvertedRoom","x","y","width","height","getSize","Room","minWidth","minHeight","getX","getY","getWidth","getHeight","roomWidthBoundary","roomHeightBoundary","Math","floor","random","roomXBoundary","roomYBoundary","ConvertedLeaf","isSplitVertical","isSplitHorizontal","splitPos","getAll","Leaf","leftChild","rightChild","room","lowerLim","upperLim","getLeftChild","getRightChild","getIsSplitVertical","getIsSplitHorizontal","getSplitPos","getRoom","splitVertical","splitHorizontal","boundary","min","rand","BSP","tree","root","q","push","split","createRoom","shift","splitRoot","BSPFirstSplitPath","convertedLeaf","visuSpeed","pathString","getRectangleSplitPath","pathStyle","strokeDasharray","strokeDashoffset","getVisualizationDuration","d","style","animatePath","BSPSplitPath","x1","y1","x2","y2","getLineSplitPath","BSPRoomPath","convertedRoom","attributeType","attributeName","to","fill","begin","BSPSplitSVG","col","row","curState","column","gridStyle","winWidth","winHeight","className","node","convertSize","createFirstSplitPath","paths","leaf","key","createSplitPath","xlinkHref","createRoomPath","interval","gridWidth","gridHeight","Grid","randNum","createGrid","grid","tdStyle","j","window","innerWidth","innerHeight","updateWindowDimensions","bind","addEventListener","removeEventListener","curWidth","curHeight","main","reset","algo","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e3e78a80.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            curAlgo: \"BSP\",\r\n            visuState: \"stop\",\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <div id=\"title\">Procedural Dungeon Generation Visualizer</div>\r\n                <ul id=\"nav\">\r\n                    <li>\r\n                        <a href=\"#\">1</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#\">2</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#\">3</a>\r\n                    </li>\r\n                </ul>\r\n\r\n                {/* <button id=\"vis\" onClick={() => this.props.visualizeAlgo()}>\r\n                    Visualize BSP\r\n                </button> */}\r\n\r\n                {this.showButton()}\r\n            </header>\r\n        );\r\n    }\r\n\r\n    showButton() {\r\n        if (this.state.visuState === \"stop\")\r\n            return (\r\n                <button id=\"vis\" onClick={() => this.visualizeBSPSplit()}>\r\n                    Visualize BSP\r\n                </button>\r\n            );\r\n        if (this.state.visuState === \"start\")\r\n            return (\r\n                <button id=\"vis\" onClick={() => this.resetVisualization()}>\r\n                    Reset Visualization\r\n                </button>\r\n            );\r\n    }\r\n\r\n    visualizeBSPSplit() {\r\n        this.setState({ visuState: \"start\" });\r\n\r\n        let g = document.getElementById(\"BSP-split\");\r\n\r\n        let durTotal = 0;\r\n\r\n        for (let i = 0; i < g.childElementCount; i++) {\r\n            let path = g.children[i];\r\n            let dur = path.children[0].getAttribute(\"dur\");\r\n\r\n            //trim the word s\r\n            dur = dur.substring(0, dur.length - 1);\r\n            dur *= 1000;\r\n\r\n            setTimeout(() => {\r\n                path.children[0].beginElement();\r\n            }, durTotal + i * 200);\r\n\r\n            durTotal += dur;\r\n        }\r\n\r\n        durTotal += g.childElementCount * 200 + 500;\r\n        let a = document.getElementById(\"animate-split-gray\");\r\n        let durA = 0;\r\n        durA = a.getAttribute(\"dur\");\r\n        durA = durA.substring(0, durA.length - 1);\r\n        durA *= 1000;\r\n\r\n        setTimeout(() => {\r\n            a.beginElement();\r\n            a = document.getElementById(\"animate-split-thin\");\r\n            a.beginElement();\r\n        }, durTotal);\r\n\r\n        console.log(durA);\r\n        durTotal += durA;\r\n\r\n        g = document.getElementById(\"BSP-rooms\");\r\n        console.log(g);\r\n        console.log(g.children);\r\n\r\n        for (let i = 0; i < g.childElementCount; i++) {\r\n            let path = g.children[i];\r\n            let dur = path.children[0].getAttribute(\"dur\");\r\n\r\n            //trim the word s\r\n            dur = dur.substring(0, dur.length - 1);\r\n            dur *= 1000;\r\n\r\n            setTimeout(() => {\r\n                path.children[0].beginElement();\r\n            }, durTotal + i * 200);\r\n\r\n            durTotal += dur;\r\n        }\r\n    }\r\n\r\n    resetVisualization() {\r\n        this.setState({ visuState: \"stop\" });\r\n\r\n        let g = document.getElementById(\"BSP-split\");\r\n        while (g.childElementCount) {\r\n            let path = g.children[0];\r\n            path.parentNode.removeChild(path);\r\n        }\r\n        this.props.resetHandler();\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n","class Room {\r\n    minWidth = 2;\r\n    minHeight = 2;\r\n\r\n    constructor(x, y, width, height) {\r\n        //to prevent rooms going too close to each other\r\n        let roomWidthBoundary = width - 2 - this.minWidth + 1;\r\n        let roomHeightBoundary = height - 2 - this.minHeight + 1;\r\n\r\n        this.width =\r\n            Math.floor(Math.random() * roomWidthBoundary) + this.minWidth;\r\n        this.height =\r\n            Math.floor(Math.random() * roomHeightBoundary) + this.minHeight;\r\n\r\n        let roomXBoundary = width - 2 - this.width + 1;\r\n        let roomYBoundary = height - 2 - this.height + 1;\r\n\r\n        this.x = Math.floor(Math.random() * roomXBoundary) + x + 1;\r\n        this.y = Math.floor(Math.random() * roomYBoundary) + y + 1;\r\n    }\r\n\r\n    getX = () => this.x;\r\n    getY = () => this.y;\r\n    getWidth = () => this.width;\r\n    getHeight = () => this.height;\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n}\r\n\r\nclass ConvertedRoom {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n}\r\n\r\nexport default Room;\r\nexport { ConvertedRoom };\r\n","//Classes in javascript is weird. Using classes in this project is fine but,\r\n//it's better to benefit from the prototype aspect of javascript than the classics.\r\nimport Room from \"./room.js\";\r\n\r\nclass Leaf {\r\n    leftChild = null;\r\n    rightChild = null;\r\n\r\n    isSplitVertical = false;\r\n    isSplitHorizontal = false;\r\n\r\n    splitPos = 0;\r\n\r\n    room = null;\r\n\r\n    constructor(\r\n        x,\r\n        y,\r\n        width,\r\n        height,\r\n        isSplitVertical = false,\r\n        isSplitHorizontal = false,\r\n        splitPos = 0\r\n    ) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.isSplitVertical = isSplitVertical;\r\n        this.isSplitHorizontal = isSplitHorizontal;\r\n        this.splitPos = splitPos;\r\n    }\r\n\r\n    split() {\r\n        if (this.leftChild != null || this.rightChild != null) return false;\r\n\r\n        //if l or w is 50% larger, force split. Else, the split is random.\r\n        if (this.width / this.height >= 1.5) this.isSplitVertical = true;\r\n        else if (this.height / this.width >= 1.5) this.isSplitHorizontal = true;\r\n        else {\r\n            let rand = Math.floor(Math.random() * 2);\r\n            if (rand) this.isSplitVertical = true;\r\n            else this.isSplitHorizontal = true;\r\n        }\r\n\r\n        if (this.isSplitVertical) return this.splitVertical();\r\n        else if (this.isSplitHorizontal) return this.splitHorizontal();\r\n    }\r\n\r\n    //lowest and highest multiplier for random\r\n    //these limits are needed to either make the splits size vary or similar\r\n    lowerLim = 0.2;\r\n    upperLim = 0.8;\r\n\r\n    //smallest possible width and height\r\n    minWidth = 4;\r\n    minHeight = 4;\r\n\r\n    //TODO: convert these limits to props\r\n\r\n    splitVertical() {\r\n        //width is too small to be splitted\r\n        if (this.width < this.minWidth * 2) return false;\r\n\r\n        let boundary = Math.floor(\r\n            this.width - this.width * (this.upperLim - this.lowerLim)\r\n        );\r\n\r\n        //preventing size being lower than the min size\r\n        boundary =\r\n            boundary > this.width - this.minWidth * 2\r\n                ? this.width - this.minWidth * 2\r\n                : boundary;\r\n        boundary += 1;\r\n        let min =\r\n            this.width * this.lowerLim > this.minWidth\r\n                ? this.width * this.lowerLim\r\n                : this.minWidth;\r\n\r\n        let rand = Math.floor(Math.random() * boundary);\r\n        rand += Math.floor(min);\r\n\r\n        this.splitPos = rand;\r\n\r\n        this.leftChild = new Leaf(this.x, this.y, rand, this.height);\r\n        this.rightChild = new Leaf(\r\n            this.x + rand,\r\n            this.y,\r\n            this.width - rand,\r\n            this.height\r\n        );\r\n        return true;\r\n    }\r\n\r\n    splitHorizontal() {\r\n        //height is too small to be splitted\r\n        if (this.height < this.minHeight * 2) return false;\r\n\r\n        let boundary = Math.floor(\r\n            this.height - this.height * (this.upperLim - this.lowerLim)\r\n        );\r\n\r\n        //preventing size being lower than the min size\r\n        boundary =\r\n            boundary > this.height - this.minHeight * 2\r\n                ? this.height - this.minHeight * 2\r\n                : boundary;\r\n        boundary += 1;\r\n        let min =\r\n            this.height * this.lowerLim > this.minHeight\r\n                ? this.height * this.lowerLim\r\n                : this.minHeight;\r\n\r\n        let rand = Math.floor(Math.random() * boundary);\r\n        rand += Math.floor(min);\r\n\r\n        this.splitPos = rand;\r\n\r\n        this.leftChild = new Leaf(this.x, this.y, this.width, rand);\r\n        this.rightChild = new Leaf(\r\n            this.x,\r\n            this.y + rand,\r\n            this.width,\r\n            this.height - rand\r\n        );\r\n        return true;\r\n    }\r\n\r\n    createRoom() {\r\n        if (this.leftChild !== null) return;\r\n        if (this.room !== null) return;\r\n        this.room = new Room(this.x, this.y, this.width, this.height);\r\n    }\r\n\r\n    toString() {\r\n        console.log(\"x: \" + this.x + \" y: \" + this.y);\r\n        console.log(\"width: \" + this.width + \" height: \" + this.height);\r\n    }\r\n\r\n    getX = () => this.x;\r\n    getY = () => this.y;\r\n    getWidth = () => this.width;\r\n    getHeight = () => this.height;\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n    getLeftChild = () => this.leftChild;\r\n    getRightChild = () => this.rightChild;\r\n    getIsSplitVertical = () => this.isSplitVertical;\r\n    getIsSplitHorizontal = () => this.isSplitHorizontal;\r\n    getSplitPos = () => this.splitPos;\r\n    getRoom = () => this.room;\r\n}\r\n\r\nclass ConvertedLeaf {\r\n    constructor(\r\n        x,\r\n        y,\r\n        width,\r\n        height,\r\n        isSplitVertical,\r\n        isSplitHorizontal,\r\n        splitPos\r\n    ) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.isSplitVertical = isSplitVertical;\r\n        this.isSplitHorizontal = isSplitHorizontal;\r\n        this.splitPos = splitPos;\r\n    }\r\n\r\n    getSize = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n        };\r\n    };\r\n\r\n    getAll = () => {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n            isSplitVertical: this.isSplitVertical,\r\n            isSplitHorizontal: this.isSplitHorizontal,\r\n            splitPos: this.splitPos,\r\n        };\r\n    };\r\n}\r\n\r\nexport default Leaf;\r\n\r\nexport { ConvertedLeaf };\r\n","import Leaf from \"./leaf.js\";\r\n\r\nfunction splitRoot(root, tree) {\r\n    //level order tree traversal\r\n    let q = [];\r\n    q.push(root);\r\n    while (q.length !== 0) {\r\n        tree.push(q[0]);\r\n\r\n        if (q[0].split()) {\r\n            q.push(q[0].getLeftChild());\r\n            q.push(q[0].getRightChild());\r\n            // tree.push(q[0].getLeftChild());\r\n            // tree.push(q[0].getRightChild());\r\n        } else {\r\n            q[0].createRoom();\r\n        }\r\n        q.shift();\r\n    }\r\n    return tree;\r\n}\r\n\r\nfunction BSP(x, y, width, height) {\r\n    var tree = [];\r\n    var root = new Leaf(x, y, width, height);\r\n\r\n    tree = splitRoot(root, tree);\r\n\r\n    return tree;\r\n\r\n    //only get leaves (last node)\r\n    /*\r\n    var leaves = [];\r\n\r\n    tree.forEach((l) => {\r\n        if (l.getRightChild());\r\n        else leaves.push(l);\r\n    });\r\n\r\n    return leaves;\r\n    */\r\n}\r\n\r\nexport default BSP;\r\n","import React, { Component } from \"react\";\r\nimport \"./SVGComponents.css\";\r\n\r\nclass BSPFirstSplitPath extends Component {\r\n    render() {\r\n        const { convertedLeaf, visuSpeed } = this.props;\r\n\r\n        let { x, y, width, height } = convertedLeaf.getSize();\r\n\r\n        let pathString = getRectangleSplitPath(x, y, width, height);\r\n\r\n        let length = (width + height) * 2;\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n\r\n        return (\r\n            <path id=\"BSP-split-path-0\" d={pathString} style={pathStyle}>\r\n                {animatePath(dur)}\r\n            </path>\r\n        );\r\n    }\r\n}\r\nclass BSPSplitPath extends Component {\r\n    render() {\r\n        const { id, convertedLeaf, visuSpeed } = this.props;\r\n\r\n        let {\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            isSplitVertical,\r\n            isSplitHorizontal,\r\n            splitPos,\r\n        } = convertedLeaf.getAll();\r\n\r\n        let { x1, y1, x2, y2 } = getLineSplitPath(\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            isSplitVertical,\r\n            isSplitHorizontal,\r\n            splitPos\r\n        );\r\n\r\n        let length = 0;\r\n        if (isSplitVertical) length = height;\r\n        else length = width;\r\n\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n\r\n        return (\r\n            <line id={id} x1={x1} y1={y1} x2={x2} y2={y2} style={pathStyle}>\r\n                {animatePath(dur)}\r\n            </line>\r\n        );\r\n    }\r\n}\r\n\r\nclass BSPRoomPath extends Component {\r\n    render() {\r\n        const { id, convertedRoom, visuSpeed } = this.props;\r\n\r\n        let { x, y, width, height } = convertedRoom.getSize();\r\n\r\n        let pathString = getRectangleSplitPath(x, y, width, height);\r\n\r\n        let length = (width + height) * 2;\r\n        let pathStyle = {\r\n            strokeDasharray: length,\r\n            strokeDashoffset: length,\r\n        };\r\n\r\n        let dur = getVisualizationDuration(visuSpeed, length);\r\n\r\n        return (\r\n            <path id={id} d={pathString} style={pathStyle}>\r\n                {animatePath(dur)}\r\n            </path>\r\n        );\r\n    }\r\n}\r\n\r\nexport { BSPFirstSplitPath, BSPSplitPath, BSPRoomPath };\r\n\r\nfunction animatePath(dur) {\r\n    return (\r\n        <animate\r\n            attributeType=\"CSS\"\r\n            attributeName=\"stroke-dashoffset\"\r\n            to=\"0\"\r\n            dur={dur + \"s\"}\r\n            fill=\"freeze\"\r\n            begin=\"indefinite\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction getVisualizationDuration(visuSpeed, length) {\r\n    return length / visuSpeed;\r\n}\r\n\r\nfunction getRectangleSplitPath(x, y, width, height) {\r\n    return (\r\n        \"M\" +\r\n        x +\r\n        \" \" +\r\n        y +\r\n        \" L\" +\r\n        (x + width) +\r\n        \" \" +\r\n        y +\r\n        \" L\" +\r\n        (x + width) +\r\n        \" \" +\r\n        (y + height) +\r\n        \" L\" +\r\n        x +\r\n        \" \" +\r\n        (y + height) +\r\n        \" L\" +\r\n        x +\r\n        \" \" +\r\n        y +\r\n        \" Z\"\r\n    );\r\n}\r\n\r\nfunction getLineSplitPath(\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    isSplitVertical,\r\n    isSplitHorizontal,\r\n    splitPos\r\n) {\r\n    if (isSplitVertical)\r\n        return {\r\n            x1: x + splitPos,\r\n\r\n            y1: y,\r\n\r\n            x2: x + splitPos,\r\n\r\n            y2: y + height,\r\n        };\r\n    return {\r\n        x1: x,\r\n        y1: y + splitPos,\r\n        x2: x + width,\r\n        y2: y + splitPos,\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport BSP from \"./BSP/BSP.js\";\r\nimport {\r\n    BSPFirstSplitPath,\r\n    BSPSplitPath,\r\n    BSPRoomPath,\r\n} from \"./BSP/SVGComponents.jsx\";\r\nimport { ConvertedLeaf } from \"./BSP/leaf.js\";\r\nimport { ConvertedRoom } from \"./BSP/room.js\";\r\nimport Leaf from \"./BSP/leaf.js\";\r\nimport Room from \"./BSP/room.js\";\r\nimport \"./grid.css\";\r\n\r\nclass Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            winWidth: window.innerWidth,\r\n            //99 is from padding (30+30) and 39 of button height\r\n            //TODO: convert magic number\r\n            winHeight: window.innerHeight - 99,\r\n            row: 15,\r\n            column: 25,\r\n            interval: 30,\r\n        };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //get new window Width and Height\r\n        this.updateWindowDimensions();\r\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        let curWidth = window.innerWidth;\r\n        //99 is from padding (30+30) and 39 of button height\r\n        let curHeight = window.innerHeight - 99;\r\n        this.setState({\r\n            winWidth: curWidth,\r\n            winHeight: curHeight,\r\n        });\r\n    }\r\n\r\n    randNum = () => Math.random() * 1000;\r\n\r\n    render() {\r\n        var gridStyle = {\r\n            width: this.state.winWidth,\r\n            height: this.state.winHeight,\r\n        };\r\n\r\n        return (\r\n            <div key={this.randNum()} id=\"visualizer\">\r\n                <div id=\"grid\" style={gridStyle}>\r\n                    <table>\r\n                        <tbody>{this.createGrid()}</tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <BSPSplitSVG\r\n                    curState={this.state}\r\n                    visuSpeed={this.props.visuSpeed}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    createGrid = () => {\r\n        let grid = [];\r\n        let tdStyle = {\r\n            width: this.state.interval + \"px\",\r\n            height: this.state.interval + \"px\",\r\n        };\r\n\r\n        // Outer loop to create parent\r\n        for (let i = 0; i < this.state.row; i++) {\r\n            let children = [];\r\n            //Inner loop to create children\r\n            for (let j = 0; j < this.state.column; j++) {\r\n                children.push(\r\n                    <td\r\n                        id={`node-${i + 1}-${j + 1}`}\r\n                        key={`node-${i + 1}-${j + 1}`}\r\n                        style={tdStyle}\r\n                    ></td>\r\n                );\r\n            }\r\n            //Create the parent and add the children\r\n            grid.push(\r\n                <tr id={`row-${i + 1}`} key={`row-${i + 1}`}>\r\n                    {children}\r\n                </tr>\r\n            );\r\n        }\r\n        return grid;\r\n    };\r\n}\r\n\r\nfunction calculateBSP(col, row) {\r\n    return BSP(0, 0, col, row);\r\n}\r\n\r\nfunction BSPSplitSVG(props) {\r\n    const tree = calculateBSP(props.curState.column, props.curState.row);\r\n    // var tree = [];\r\n    // tree.push(new Leaf(0, 0, 25, 15, true, false, 10));\r\n    // tree.push(new Leaf(0, 0, 10, 15, false, true, 8));\r\n    // tree.push(new Leaf(10, 0, 15, 15, false, true, 3));\r\n    console.log(tree);\r\n    // console.log(props.curState);\r\n\r\n    var gridStyle = {\r\n        width: props.curState.winWidth,\r\n        height: props.curState.winHeight,\r\n    };\r\n\r\n    return (\r\n        <svg style={gridStyle}>\r\n            <g id=\"BSP-split\" className=\"BSP-svg-paths\">\r\n                {createFirstSplitPath(tree[0], props.curState, props.visuSpeed)}\r\n                {createSplitPath(tree, props.curState, props.visuSpeed)}\r\n            </g>\r\n            {getAnimateSplitGray()}\r\n            {getAnimateSplitThin()}\r\n            <g id=\"BSP-rooms\" className=\"BSP-svg-paths\">\r\n                {createRoomPath(tree, props.curState, props.visuSpeed)}\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nfunction createFirstSplitPath(node, curState, visuSpeed) {\r\n    let convertedLeaf = convertSize(node, curState);\r\n    return (\r\n        <BSPFirstSplitPath\r\n            convertedLeaf={convertedLeaf}\r\n            visuSpeed={visuSpeed}\r\n        ></BSPFirstSplitPath>\r\n    );\r\n}\r\n\r\nfunction createSplitPath(tree, curState, visuSpeed) {\r\n    let paths = [];\r\n    for (let i = 0; i < tree.length; i++) {\r\n        let leaf = tree[i];\r\n        // console.log(i + \" splitPos: \" + leaf.getSplitPos());\r\n        if (leaf.getSplitPos() === 0) continue;\r\n\r\n        let convertedLeaf = convertSize(leaf, curState);\r\n        let id = \"BSP-split-path-\" + (i + 1);\r\n        paths.push(\r\n            <BSPSplitPath\r\n                key={id}\r\n                id={id}\r\n                convertedLeaf={convertedLeaf}\r\n                visuSpeed={visuSpeed}\r\n            ></BSPSplitPath>\r\n        );\r\n    }\r\n    return paths;\r\n}\r\n\r\nfunction createRoomPath(tree, curState, visuSpeed) {\r\n    let paths = [];\r\n    for (let i = 0; i < tree.length; i++) {\r\n        let leaf = tree[i];\r\n\r\n        if (leaf.getRoom() === null) continue;\r\n\r\n        let convertedRoom = convertSize(leaf.getRoom(), curState);\r\n        let id = \"BSP-room-path-\" + (i + 1);\r\n        paths.push(\r\n            <BSPRoomPath\r\n                key={id}\r\n                id={id}\r\n                convertedRoom={convertedRoom}\r\n                visuSpeed={visuSpeed}\r\n            ></BSPRoomPath>\r\n        );\r\n    }\r\n    return paths;\r\n}\r\n\r\nfunction convertSize(node, curState) {\r\n    const interval = curState.interval;\r\n    const gridWidth = (curState.column * interval) / 2;\r\n    const gridHeight = (curState.row * interval) / 2;\r\n    const winXCenter = curState.winWidth / 2;\r\n    const winYCenter = curState.winHeight / 2;\r\n\r\n    var x = winXCenter - gridWidth;\r\n    var y = winYCenter - gridHeight;\r\n\r\n    if (node instanceof Leaf)\r\n        return new ConvertedLeaf(\r\n            x + node.getX() * interval,\r\n            y + node.getY() * interval,\r\n            node.getWidth() * interval,\r\n            node.getHeight() * interval,\r\n            node.getIsSplitVertical(),\r\n            node.getIsSplitHorizontal(),\r\n            node.getSplitPos() * interval\r\n        );\r\n\r\n    if (node instanceof Room) {\r\n        return new ConvertedRoom(\r\n            x + node.getX() * interval,\r\n            y + node.getY() * interval,\r\n            node.getWidth() * interval,\r\n            node.getHeight() * interval\r\n        );\r\n    }\r\n}\r\n\r\nfunction getAnimateSplitGray() {\r\n    return (\r\n        <animate\r\n            id=\"animate-split-gray\"\r\n            xlinkHref=\"#BSP-split\"\r\n            attributeType=\"CSS\"\r\n            attributeName=\"stroke\"\r\n            to=\"gray\"\r\n            dur=\"2s\"\r\n            fill=\"freeze\"\r\n            begin=\"indefinite\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction getAnimateSplitThin() {\r\n    return (\r\n        <animate\r\n            id=\"animate-split-thin\"\r\n            xlinkHref=\"#BSP-split\"\r\n            attributeType=\"CSS\"\r\n            attributeName=\"stroke-width\"\r\n            to=\"3\"\r\n            dur=\"2s\"\r\n            fill=\"freeze\"\r\n            begin=\"indefinite\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction convertRoom() {}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"./navbar.jsx\";\r\nimport Grid from \"./grid.jsx\";\r\n\r\nclass main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            curAlgo: \"BSP\",\r\n            visuState: \"stop\",\r\n            reset: 0,\r\n            visuSpeed: 750, //750 px / sec\r\n        };\r\n    }\r\n\r\n    // visualizeAlgoHandler = () => {\r\n    //     if (this.state.visuState === \"stop\")\r\n    //         this.setState({\r\n    //             visuState: \"start\",\r\n    //         });\r\n    //     else\r\n    //         this.setState({\r\n    //             visuState: \"stop\",\r\n    //         });\r\n    // };\r\n\r\n    // getVisualizationState = () => this.state.curVisualization;\r\n\r\n    resetHandler = () => {\r\n        this.state.reset === 0\r\n            ? this.setState({ reset: 1 })\r\n            : this.setState({ reset: 0 });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar resetHandler={this.resetHandler} />\r\n                <Grid\r\n                    algo={this.state.curAlgo}\r\n                    visuState={this.state.visuState}\r\n                    visuSpeed={this.state.visuSpeed}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./Components/main.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}